// Warning! autogenerated file, do what you want.
#include <cstdint>

#include "arm/ARMDisassembler.h"
#include "arm/ARMUtilities.h"
#include "arm/gen/ARMDecodingTable.h"
#include "arm/gen/ARMtoString.h"
#include "arm/ARMtoStringCustom.h"
#include "Utilities.h"

using namespace Disassembler;
using namespace std;

bool ARMDecoder::InITBlock() {
    return CurrentInstrSet() == InstrSet_Thumb && m_it_session.InITBlock();
}

bool ARMDecoder::LastInITBlock() {
    return CurrentInstrSet() == InstrSet_Thumb && m_it_session.LastInITBlock();
}

ARMMode ARMDecoder::CurrentInstrSet() {
    return m_opcode_mode;
}

bool ARMDecoder::CurrentModeIsHyp() {
    return m_hyp_mode;
}

ARMVariants ARMDecoder::ArchVersion() {
    return m_arm_isa;
}

// Format: (mask, value, version, encoding, decoder_function, name)
ARMOpcode arm_opcodes[] = {
    { 0x0fe00000, 0x02a00000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_adc_immediate_a1, "ADC Immediate"},
    { 0x0fe00010, 0x00a00000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_adc_register_a1, "ADC Register"},
    { 0x0fe00090, 0x00a00010, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_adc_register_shifted_register_a1, "ADC (register-shifted register)"},
    { 0x0fe00000, 0x02800000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_add_immediate_arm_a1, "ADD (immediate, ARM)"},
    { 0x0fe00010, 0x00800000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_add_register_arm_a1, "ADD (register, ARM)"},
    { 0x0fe00090, 0x00800010, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_add_register_shifted_register_a1, "ADD (register-shifted register)"},
    { 0x0fef0000, 0x028d0000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_add_sp_plus_immediate_a1, "ADD (SP plus immediate)"},
    { 0x0fef0010, 0x008d0000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_add_sp_plus_register_arm_a1, "ADD (SP plus register, ARM)"},
    { 0x0fff0000, 0x028f0000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_adr_a1, "ADR"},
    { 0x0fff0000, 0x024f0000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA2, &ARMDecoder::decode_adr_a2, "ADR"},
    { 0x0fe00000, 0x02000000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_and_immediate_a1, "AND (immediate)"},
    { 0x0fe00010, 0x00000000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_and_register_a1, "AND (register)"},
    { 0x0fe00090, 0x00000010, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_and_register_shifted_register_a1, "AND (register-shifted register)"},
    { 0x0fef0070, 0x01a00040, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_asr_immediate_a1, "ASR (immediate)"},
    { 0x0fef00f0, 0x01a00050, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_asr_register_a1, "ASR (register)"},
    { 0x0fe0007f, 0x07c0001f, ARMv6T2 | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_bfc_a1, "BFC"},
    { 0x0fe00070, 0x07c00010, ARMv6T2 | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_bfi_a1, "BFI"},
    { 0x0fe00000, 0x03c00000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_bic_immediate_a1, "BIC (immediate)"},
    { 0x0fe00010, 0x01c00000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_bic_register_a1, "BIC (register)"},
    { 0x0fe00090, 0x01c00010, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_bic_register_shifted_register_a1, "BIC (register-shifted register)"},
    { 0x0ff000f0, 0x01200070, ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_bkpt_a1, "BKPT"},
    { 0xfe000000, 0xfa000000, ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA2, &ARMDecoder::decode_bl_blx_immediate_a2, "BL, BLX (immediate)"},
    { 0x0f000000, 0x0b000000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_bl_blx_immediate_a1, "BL, BLX (immediate)"},
    { 0x0f000000, 0x0a000000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_b_a1, "B"},
    { 0x0ffffff0, 0x012fff30, ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_blx_register_a1, "BLX (register)"},
    { 0x0ffffff0, 0x012fff10, ARMv4T | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_bx_a1, "BX"},
    { 0x0ffffff0, 0x012fff20, ARMv5TEJ | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_bxj_a1, "BXJ"},
    { 0xfff1fe20, 0xf1000000, ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_cps_arm_a1, "CPS (ARM)"},
    { 0xff000010, 0xfe000000, ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA2, &ARMDecoder::decode_cdp_cdp2_a2, "CDP, CDP2"},
    { 0x0f000010, 0x0e000000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_cdp_cdp2_a1, "CDP, CDP2"},
    { 0xffffffff, 0xf57ff01f, ARMv6K | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_clrex_a1, "CLREX"},
    { 0x0fff0ff0, 0x016f0f10, ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_clz_a1, "CLZ"},
    { 0x0ff0f000, 0x03700000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_cmn_immediate_a1, "CMN (immediate)"},
    { 0x0ff0f010, 0x01700000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_cmn_register_a1, "CMN (register)"},
    { 0x0ff0f090, 0x01700010, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_cmn_register_shifted_register_a1, "CMN (register-shifted register)"},
    { 0x0ff0f000, 0x03500000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_cmp_immediate_a1, "CMP (immediate)"},
    { 0x0ff0f010, 0x01500000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_cmp_register_a1, "CMP (register)"},
    { 0x0ff0f090, 0x01500010, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_cmp_register_shifted_register_a1, "CMP (register-shifted register)"},
    { 0x0ffffff0, 0x0320f0f0, ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_dbg_a1, "DBG"},
    { 0xfffffff0, 0xf57ff050, ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_dmb_a1, "DMB"},
    { 0xfffffff0, 0xf57ff040, ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_dsb_a1, "DSB"},
    { 0x0fe00000, 0x02200000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_eor_immediate_a1, "EOR (immediate)"},
    { 0x0fe00010, 0x00200000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_eor_register_a1, "EOR (register)"},
    { 0x0fe00090, 0x00200010, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_eor_register_shifted_register_a1, "EOR (register-shifted register)"},
    { 0xfffffff0, 0xf57ff060, ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_isb_a1, "ISB"},
    { 0xfe50ffff, 0xf8100a00, ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_rfe_a1, "RFE"},
    { 0xfe100000, 0xfc100000, ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA2, &ARMDecoder::decode_ldc_ldc2_immediate_a2, "LDC, LDC2 (immediate)"},
    { 0x0e100000, 0x0c100000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_ldc_ldc2_immediate_a1, "LDC, LDC2 (immediate)"},
    { 0xfe1f0000, 0xfc1f0000, ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA2, &ARMDecoder::decode_ldc_ldc2_literal_a2, "LDC, LDC2 (literal)"},
    { 0x0e1f0000, 0x0c1f0000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_ldc_ldc2_literal_a1, "LDC, LDC2 (literal)"},
    { 0x0fd00000, 0x08900000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_ldm_ldmia_ldmfd_arm_a1, "LDM/LDMIA/LDMFD (ARM)"},
    { 0x0fd00000, 0x08100000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_ldmda_ldmfa_a1, "LDMDA/LDMFA"},
    { 0x0fd00000, 0x09100000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_ldmdb_ldmea_a1, "LDMDB/LDMEA"},
    { 0x0fd00000, 0x09900000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_ldmib_ldmed_a1, "LDMIB/LDMED"},
    { 0xff30f000, 0xf510f000, ARMv5TEAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_pld_pldw_immediate_a1, "PLD, PLDW (immediate)"},
    { 0xff7ff000, 0xf55ff000, ARMv5TEAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_pld_literal_a1, "PLD (literal)"},
    { 0xff30f010, 0xf710f000, ARMv5TEAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_pld_pldw_register_a1, "PLD, PLDW (register)"},
    { 0xff70f010, 0xf650f000, ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_pli_register_a1, "PLI (register)"},
    { 0xff70f000, 0xf450f000, ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_pli_immediate_literal_a1, "PLI (immediate, literal)"},
    { 0x0e500000, 0x04100000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_ldr_immediate_arm_a1, "LDR (immediate, ARM)"},
    { 0x0f7f0000, 0x051f0000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_ldr_literal_a1, "LDR (literal)"},
    { 0x0e500010, 0x06100000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_ldr_register_arm_a1, "LDR (register, ARM)"},
    { 0x0e500000, 0x04500000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_ldrb_immediate_arm_a1, "LDRB (immediate, ARM)"},
    { 0x0f7f0000, 0x055f0000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_ldrb_literal_a1, "LDRB (literal)"},
    { 0x0e500010, 0x06500000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_ldrb_register_a1, "LDRB (register)"},
    { 0x0f700000, 0x04700000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_ldrbt_a1, "LDRBT"},
    { 0x0f700010, 0x06700000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA2, &ARMDecoder::decode_ldrbt_a2, "LDRBT"},
    { 0x0e5000f0, 0x004000d0, ARMv5TEAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_ldrd_immediate_a1, "LDRD (immediate)"},
    { 0x0f7f00f0, 0x014f00d0, ARMv5TEAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_ldrd_literal_a1, "LDRD (literal)"},
    { 0x0e500ff0, 0x000000d0, ARMv5TEAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_ldrd_register_a1, "LDRD (register)"},
    { 0x0ff00fff, 0x01900f9f, ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_ldrex_a1, "LDREX"},
    { 0x0ff00fff, 0x01d00f9f, ARMv6K | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_ldrexb_a1, "LDREXB"},
    { 0x0ff00fff, 0x01b00f9f, ARMv6K | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_ldrexd_a1, "LDREXD"},
    { 0x0ff00fff, 0x01f00f9f, ARMv6K | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_ldrexh_a1, "LDREXH"},
    { 0x0e5000f0, 0x005000b0, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_ldrh_immediate_arm_a1, "LDRH (immediate, ARM)"},
    { 0x0f7f00f0, 0x015f00b0, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_ldrh_literal_a1, "LDRH (literal)"},
    { 0x0e500ff0, 0x001000b0, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_ldrh_register_a1, "LDRH (register)"},
    { 0x0f7000f0, 0x007000b0, ARMv6T2 | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_ldrht_a1, "LDRHT"},
    { 0x0f700ff0, 0x003000b0, ARMv6T2 | ARMv7, eSize32, eEncodingA2, &ARMDecoder::decode_ldrht_a2, "LDRHT"},
    { 0x0e5000f0, 0x005000d0, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_ldrsb_immediate_a1, "LDRSB (immediate)"},
    { 0x0f7f00f0, 0x015f00d0, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_ldrsb_literal_a1, "LDRSB (literal)"},
    { 0x0e500ff0, 0x001000d0, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_ldrsb_register_a1, "LDRSB (register)"},
    { 0x0f7000f0, 0x007000d0, ARMv6T2 | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_ldrsbt_a1, "LDRSBT"},
    { 0x0f700ff0, 0x003000d0, ARMv6T2 | ARMv7, eSize32, eEncodingA2, &ARMDecoder::decode_ldrsbt_a2, "LDRSBT"},
    { 0x0e5000f0, 0x005000f0, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_ldrsh_immediate_a1, "LDRSH (immediate)"},
    { 0x0f7f00f0, 0x015f00f0, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_ldrsh_literal_a1, "LDRSH (literal)"},
    { 0x0e500ff0, 0x001000f0, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_ldrsh_register_a1, "LDRSH (register)"},
    { 0x0f7000f0, 0x007000f0, ARMv6T2 | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_ldrsht_a1, "LDRSHT"},
    { 0x0f700ff0, 0x003000f0, ARMv6T2 | ARMv7, eSize32, eEncodingA2, &ARMDecoder::decode_ldrsht_a2, "LDRSHT"},
    { 0x0f700000, 0x04300000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_ldrt_a1, "LDRT"},
    { 0x0f700010, 0x06300000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA2, &ARMDecoder::decode_ldrt_a2, "LDRT"},
    { 0x0fef0070, 0x01a00000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_lsl_immediate_a1, "LSL (immediate)"},
    { 0x0fef00f0, 0x01a00010, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_lsl_register_a1, "LSL (register)"},
    { 0x0fef0070, 0x01a00020, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_lsr_immediate_a1, "LSR (immediate)"},
    { 0x0fef00f0, 0x01a00030, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_lsr_register_a1, "LSR (register)"},
    { 0xff100010, 0xfe000010, ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA2, &ARMDecoder::decode_mcr_mcr2_a2, "MCR, MCR2"},
    { 0x0f100010, 0x0e000010, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_mcr_mcr2_a1, "MCR, MCR2"},
    { 0xfff00000, 0xfc400000, ARMv6All | ARMv7, eSize32, eEncodingA2, &ARMDecoder::decode_mcrr_mcrr2_a2, "MCRR, MCRR2"},
    { 0x0ff00000, 0x0c400000, ARMv5TEAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_mcrr_mcrr2_a1, "MCRR, MCRR2"},
    { 0x0fe000f0, 0x00200090, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_mla_a1, "MLA"},
    { 0x0ff000f0, 0x00600090, ARMv6T2 | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_mls_a1, "MLS"},
    { 0x0fef0000, 0x03a00000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_mov_immediate_a1, "MOV (immediate)"},
    { 0x0ff00000, 0x03000000, ARMv6T2 | ARMv7, eSize32, eEncodingA2, &ARMDecoder::decode_mov_immediate_a2, "MOV (immediate)"},
    { 0x0fef0ff0, 0x01a00000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_mov_register_arm_a1, "MOV (register, ARM)"},
    { 0x0ff00000, 0x03400000, ARMv6T2 | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_movt_a1, "MOVT"},
    { 0xff100010, 0xfe100010, ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA2, &ARMDecoder::decode_mrc_mrc2_a2, "MRC, MRC2"},
    { 0x0f100010, 0x0e100010, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_mrc_mrc2_a1, "MRC, MRC2"},
    { 0xfff00000, 0xfc500000, ARMv6All | ARMv7, eSize32, eEncodingA2, &ARMDecoder::decode_mrrc_mrrc2_a2, "MRRC, MRRC2"},
    { 0x0ff00000, 0x0c500000, ARMv5TEAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_mrrc_mrrc2_a1, "MRRC, MRRC2"},
    { 0x0fbf0fff, 0x010f0000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_mrs_a1, "MRS"},
    { 0x0fb0f000, 0x0320f000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_msr_immediate_a1, "MSR (immediate)"},
    { 0x0fb0fff0, 0x0120f000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_msr_register_a1, "MSR (register)"},
    { 0x0fe0f0f0, 0x00000090, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_mul_a1, "MUL"},
    { 0x0fef0000, 0x03e00000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_mvn_immediate_a1, "MVN (immediate)"},
    { 0x0fef0010, 0x01e00000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_mvn_register_a1, "MVN (register)"},
    { 0x0fef0090, 0x01e00010, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_mvn_register_shifted_register_a1, "MVN (register-shifted register)"},
    { 0x0fffffff, 0x0320f000, ARMv6K | ARMv6T2 | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_nop_a1, "NOP"},
    { 0x0fe00000, 0x03800000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_orr_immediate_a1, "ORR (immediate)"},
    { 0x0fe00010, 0x01800000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_orr_register_a1, "ORR (register)"},
    { 0x0fe00090, 0x01800010, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_orr_register_shifted_register_a1, "ORR (register-shifted register)"},
    { 0x0ff00030, 0x06800010, ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_pkh_a1, "PKH"},
    { 0x0fff0000, 0x08bd0000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_pop_arm_a1, "POP (ARM)"},
    { 0x0fff0fff, 0x049d0004, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA2, &ARMDecoder::decode_pop_arm_a2, "POP (ARM)"},
    { 0x0fff0000, 0x092d0000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_push_a1, "PUSH"},
    { 0x0fff0fff, 0x052d0004, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA2, &ARMDecoder::decode_push_a2, "PUSH"},
    { 0x0ff00ff0, 0x01000050, ARMv5TEAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_qadd_a1, "QADD"},
    { 0x0ff00ff0, 0x06200f10, ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_qadd16_a1, "QADD16"},
    { 0x0ff00ff0, 0x06200f90, ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_qadd8_a1, "QADD8"},
    { 0x0ff00ff0, 0x06200f30, ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_qasx_a1, "QASX"},
    { 0x0ff00ff0, 0x01400050, ARMv5TEAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_qdadd_a1, "QDADD"},
    { 0x0ff00ff0, 0x01600050, ARMv5TEAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_qdsub_a1, "QDSUB"},
    { 0x0ff00ff0, 0x06200f50, ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_qsax_a1, "QSAX"},
    { 0x0ff00ff0, 0x01200050, ARMv5TEAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_qsub_a1, "QSUB"},
    { 0x0ff00ff0, 0x06200f70, ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_qsub16_a1, "QSUB16"},
    { 0x0ff00ff0, 0x06200ff0, ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_qsub8_a1, "QSUB8"},
    { 0x0fff0ff0, 0x06ff0f30, ARMv6T2 | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_rbit_a1, "RBIT"},
    { 0x0fff0ff0, 0x06bf0f30, ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_rev_a1, "REV"},
    { 0x0fff0ff0, 0x06bf0fb0, ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_rev16_a1, "REV16"},
    { 0x0fff0ff0, 0x06ff0fb0, ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_revsh_a1, "REVSH"},
    { 0x0fef0070, 0x01a00060, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_ror_immediate_a1, "ROR (immediate)"},
    { 0x0fef00f0, 0x01a00070, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_ror_register_a1, "ROR (register)"},
    { 0x0fef0ff0, 0x01a00060, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_rrx_a1, "RRX"},
    { 0x0fe00000, 0x02600000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_rsb_immediate_a1, "RSB (immediate)"},
    { 0x0fe00010, 0x00600000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_rsb_register_a1, "RSB (register)"},
    { 0x0fe00090, 0x00600010, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_rsb_register_shifted_register_a1, "RSB (register-shifted register)"},
    { 0x0fe00000, 0x02e00000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_rsc_immediate_a1, "RSC (immediate)"},
    { 0x0fe00010, 0x00e00000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_rsc_register_a1, "RSC (register)"},
    { 0x0fe00090, 0x00e00010, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_rsc_register_shifted_register_a1, "RSC (register-shifted register)"},
    { 0x0ff00ff0, 0x06100f10, ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_sadd16_a1, "SADD16"},
    { 0x0ff00ff0, 0x06100f90, ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_sadd8_a1, "SADD8"},
    { 0x0ff00ff0, 0x06100f30, ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_sasx_a1, "SASX"},
    { 0x0fe00000, 0x02c00000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_sbc_immediate_a1, "SBC (immediate)"},
    { 0x0fe00010, 0x00c00000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_sbc_register_a1, "SBC (register)"},
    { 0x0fe00090, 0x00c00010, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_sbc_register_shifted_register_a1, "SBC (register-shifted register)"},
    { 0x0fe00070, 0x07a00050, ARMv6T2 | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_sbfx_a1, "SBFX"},
    { 0x0ff0f0f0, 0x0710f010, ARMv7VE, eSize32, eEncodingA1, &ARMDecoder::decode_sdiv_a1, "SDIV"},
    { 0x0ff00ff0, 0x06800fb0, ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_sel_a1, "SEL"},
    { 0xfffffdff, 0xf1010000, ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_setend_a1, "SETEND"},
    { 0x0fffffff, 0x0320f004, ARMv6K | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_sev_a1, "SEV"},
    { 0x0ff00ff0, 0x06300f10, ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_shadd16_a1, "SHADD16"},
    { 0x0ff00ff0, 0x06300f90, ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_shadd8_a1, "SHADD8"},
    { 0x0ff00ff0, 0x06300f30, ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_shasx_a1, "SHASX"},
    { 0x0ff00ff0, 0x06300f50, ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_shsax_a1, "SHSAX"},
    { 0x0ff00ff0, 0x06300f70, ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_shsub16_a1, "SHSUB16"},
    { 0x0ff00ff0, 0x06300ff0, ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_shsub8_a1, "SHSUB8"},
    { 0x0ff00090, 0x01000080, ARMv5TEAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_smlabb_smlabt_smlatb_smlatt_a1, "SMLABB, SMLABT, SMLATB, SMLATT"},
    { 0x0ff000d0, 0x07000010, ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_smlad_a1, "SMLAD"},
    { 0x0fe000f0, 0x00e00090, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_smlal_a1, "SMLAL"},
    { 0x0ff00090, 0x01400080, ARMv5TEAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_smlalbb_smlalbt_smlaltb_smlaltt_a1, "SMLALBB, SMLALBT, SMLALTB, SMLALTT"},
    { 0x0ff000d0, 0x07400010, ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_smlald_a1, "SMLALD"},
    { 0x0ff000b0, 0x01200080, ARMv5TEAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_smlawb_smlawt_a1, "SMLAWB, SMLAWT"},
    { 0x0ff000d0, 0x07000050, ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_smlsd_a1, "SMLSD"},
    { 0x0ff000d0, 0x07400050, ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_smlsld_a1, "SMLSLD"},
    { 0x0ff000d0, 0x07500010, ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_smmla_a1, "SMMLA"},
    { 0x0ff000d0, 0x075000d0, ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_smmls_a1, "SMMLS"},
    { 0x0ff0f0d0, 0x0750f010, ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_smmul_a1, "SMMUL"},
    { 0x0ff0f0d0, 0x0700f010, ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_smuad_a1, "SMUAD"},
    { 0x0ff0f090, 0x01600080, ARMv5TEAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_smulbb_smulbt_smultb_smultt_a1, "SMULBB, SMULBT, SMULTB, SMULTT"},
    { 0x0fe000f0, 0x00c00090, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_smull_a1, "SMULL"},
    { 0x0ff0f0b0, 0x012000a0, ARMv5TEAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_smulwb_smulwt_a1, "SMULWB, SMULWT"},
    { 0x0ff0f0d0, 0x0700f050, ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_smusd_a1, "SMUSD"},
    { 0x0fe00030, 0x06a00010, ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_ssat_a1, "SSAT"},
    { 0x0ff00ff0, 0x06a00f30, ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_ssat16_a1, "SSAT16"},
    { 0x0ff00ff0, 0x06100f50, ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_ssax_a1, "SSAX"},
    { 0x0ff00ff0, 0x06100f70, ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_ssub16_a1, "SSUB16"},
    { 0x0ff00ff0, 0x06100ff0, ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_ssub8_a1, "SSUB8"},
    { 0xfe100000, 0xfc000000, ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA2, &ARMDecoder::decode_stc_stc2_a2, "STC, STC2"},
    { 0x0e100000, 0x0c000000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_stc_stc2_a1, "STC, STC2"},
    { 0x0fd00000, 0x08800000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_stm_stmia_stmea_a1, "STM (STMIA, STMEA)"},
    { 0x0fd00000, 0x08000000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_stmda_stmed_a1, "STMDA (STMED)"},
    { 0x0fd00000, 0x09000000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_stmdb_stmfd_a1, "STMDB (STMFD)"},
    { 0x0fd00000, 0x09800000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_stmib_stmfa_a1, "STMIB (STMFA)"},
    { 0x0e500000, 0x04000000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_str_immediate_arm_a1, "STR (immediate, ARM)"},
    { 0x0e500010, 0x06000000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_str_register_a1, "STR (register)"},
    { 0x0e500000, 0x04400000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_strb_immediate_arm_a1, "STRB (immediate, ARM)"},
    { 0x0e500010, 0x06400000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_strb_register_a1, "STRB (register)"},
    { 0x0f700000, 0x04600000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_strbt_a1, "STRBT"},
    { 0x0f700010, 0x06600000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA2, &ARMDecoder::decode_strbt_a2, "STRBT"},
    { 0x0e5000f0, 0x004000f0, ARMv5TEAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_strd_immediate_a1, "STRD (immediate)"},
    { 0x0e500ff0, 0x000000f0, ARMv5TEAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_strd_register_a1, "STRD (register)"},
    { 0x0ff00ff0, 0x01800f90, ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_strex_a1, "STREX"},
    { 0x0ff00ff0, 0x01c00f90, ARMv6K | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_strexb_a1, "STREXB"},
    { 0x0ff00ff0, 0x01a00f90, ARMv6K | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_strexd_a1, "STREXD"},
    { 0x0ff00ff0, 0x01e00f90, ARMv6K | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_strexh_a1, "STREXH"},
    { 0x0e5000f0, 0x004000b0, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_strh_immediate_arm_a1, "STRH (immediate, ARM)"},
    { 0x0e500ff0, 0x000000b0, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_strh_register_a1, "STRH (register)"},
    { 0x0f7000f0, 0x006000b0, ARMv6T2 | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_strht_a1, "STRHT"},
    { 0x0f700ff0, 0x002000b0, ARMv6T2 | ARMv7, eSize32, eEncodingA2, &ARMDecoder::decode_strht_a2, "STRHT"},
    { 0x0f700000, 0x04200000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_strt_a1, "STRT"},
    { 0x0f700010, 0x06200000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA2, &ARMDecoder::decode_strt_a2, "STRT"},
    { 0x0fe00000, 0x02400000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_sub_immediate_arm_a1, "SUB (immediate, ARM)"},
    { 0x0fe00010, 0x00400000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_sub_register_a1, "SUB (register)"},
    { 0x0fe00090, 0x00400010, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_sub_register_shifted_register_a1, "SUB (register-shifted register)"},
    { 0x0fef0000, 0x024d0000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_sub_sp_minus_immediate_a1, "SUB (SP minus immediate)"},
    { 0x0fef0010, 0x004d0000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_sub_sp_minus_register_a1, "SUB (SP minus register)"},
    { 0x0f000000, 0x0f000000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_svc_a1, "SVC"},
    { 0x0fb00ff0, 0x01000090, ARMv4All | ARMv5TAll | ARMv7 | ARMv7VE, eSize32, eEncodingA1, &ARMDecoder::decode_swp_swpb_a1, "SWP, SWPB"},
    { 0x0ff003f0, 0x06a00070, ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_sxtab_a1, "SXTAB"},
    { 0x0ff003f0, 0x06800070, ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_sxtab16_a1, "SXTAB16"},
    { 0x0ff003f0, 0x06b00070, ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_sxtah_a1, "SXTAH"},
    { 0x0fff03f0, 0x06af0070, ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_sxtb_a1, "SXTB"},
    { 0x0fff03f0, 0x068f0070, ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_sxtb16_a1, "SXTB16"},
    { 0x0fff03f0, 0x06bf0070, ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_sxth_a1, "SXTH"},
    { 0x0ff0f000, 0x03300000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_teq_immediate_a1, "TEQ (immediate)"},
    { 0x0ff0f010, 0x01300000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_teq_register_a1, "TEQ (register)"},
    { 0x0ff0f090, 0x01300010, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_teq_register_shifted_register_a1, "TEQ (register-shifted register)"},
    { 0x0ff0f000, 0x03100000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_tst_immediate_a1, "TST (immediate)"},
    { 0x0ff0f010, 0x01100000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_tst_register_a1, "TST (register)"},
    { 0x0ff0f090, 0x01100010, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_tst_register_shifted_register_a1, "TST (register-shifted register)"},
    { 0x0ff00ff0, 0x06500f10, ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_uadd16_a1, "UADD16"},
    { 0x0ff00ff0, 0x06500f90, ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_uadd8_a1, "UADD8"},
    { 0x0ff00ff0, 0x06500f30, ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_uasx_a1, "UASX"},
    { 0x0fe00070, 0x07e00050, ARMv6T2 | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_ubfx_a1, "UBFX"},
    { 0xfff000f0, 0xe7f000f0, ARMv4T | ARMv5TAll | ARMv6 | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_udf_a1, "UDF"},
    { 0x0ff0f0f0, 0x0730f010, ARMv7VE, eSize32, eEncodingA1, &ARMDecoder::decode_udiv_a1, "UDIV"},
    { 0x0ff00ff0, 0x06700f10, ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_uhadd16_a1, "UHADD16"},
    { 0x0ff00ff0, 0x06700f90, ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_uhadd8_a1, "UHADD8"},
    { 0x0ff00ff0, 0x06700f30, ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_uhasx_a1, "UHASX"},
    { 0x0ff00ff0, 0x06700f50, ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_uhsax_a1, "UHSAX"},
    { 0x0ff00ff0, 0x06700f70, ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_uhsub16_a1, "UHSUB16"},
    { 0x0ff00ff0, 0x06700ff0, ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_uhsub8_a1, "UHSUB8"},
    { 0x0ff000f0, 0x00400090, ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_umaal_a1, "UMAAL"},
    { 0x0fe000f0, 0x00a00090, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_umlal_a1, "UMLAL"},
    { 0x0fe000f0, 0x00800090, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_umull_a1, "UMULL"},
    { 0x0ff00ff0, 0x06600f10, ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_uqadd16_a1, "UQADD16"},
    { 0x0ff00ff0, 0x06600f90, ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_uqadd8_a1, "UQADD8"},
    { 0x0ff00ff0, 0x06600f30, ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_uqasx_a1, "UQASX"},
    { 0x0ff00ff0, 0x06600f50, ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_uqsax_a1, "UQSAX"},
    { 0x0ff00ff0, 0x06600f70, ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_uqsub16_a1, "UQSUB16"},
    { 0x0ff00ff0, 0x06600ff0, ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_uqsub8_a1, "UQSUB8"},
    { 0x0ff0f0f0, 0x0780f010, ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_usad8_a1, "USAD8"},
    { 0x0ff000f0, 0x07800010, ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_usada8_a1, "USADA8"},
    { 0x0fe00030, 0x06e00010, ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_usat_a1, "USAT"},
    { 0x0ff00ff0, 0x06e00f30, ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_usat16_a1, "USAT16"},
    { 0x0ff00ff0, 0x06500f50, ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_usax_a1, "USAX"},
    { 0x0ff00ff0, 0x06500f70, ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_usub16_a1, "USUB16"},
    { 0x0ff00ff0, 0x06500ff0, ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_usub8_a1, "USUB8"},
    { 0x0ff003f0, 0x06e00070, ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_uxtab_a1, "UXTAB"},
    { 0x0ff003f0, 0x06c00070, ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_uxtab16_a1, "UXTAB16"},
    { 0x0ff003f0, 0x06f00070, ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_uxtah_a1, "UXTAH"},
    { 0x0fff03f0, 0x06ef0070, ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_uxtb_a1, "UXTB"},
    { 0x0fff03f0, 0x06cf0070, ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_uxtb16_a1, "UXTB16"},
    { 0x0fff03f0, 0x06ff0070, ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_uxth_a1, "UXTH"},
    { 0x0fffffff, 0x0320f002, ARMv6K | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_wfe_a1, "WFE"},
    { 0x0fffffff, 0x0320f003, ARMv6K | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_wfi_a1, "WFI"},
    { 0x0fffffff, 0x0320f001, ARMv6K | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_yield_a1, "YIELD"},
    { 0x0fffffff, 0x0160006e, ARMv7VE, eSize32, eEncodingA1, &ARMDecoder::decode_eret_a1, "ERET"},
    { 0x0ff000f0, 0x01400070, ARMv7VE, eSize32, eEncodingA1, &ARMDecoder::decode_hvc_a1, "HVC"},
    { 0x0e508000, 0x08508000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_ldm_exception_return_a1, "LDM (exception return)"},
    { 0x0e708000, 0x08500000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_ldm_user_registers_a1, "LDM (User registers)"},
    { 0x0fb00eff, 0x01000200, ARMv7VE, eSize32, eEncodingA1, &ARMDecoder::decode_mrs_banked_register_a1, "MRS (Banked register)"},
    { 0xfe5fffe0, 0xf84d0500, ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_srs_arm_a1, "SRS, ARM"},
    { 0x0e700000, 0x08400000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_stm_user_registers_a1, "STM (User registers)"},
    { 0x0e10f000, 0x0210f000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA1, &ARMDecoder::decode_subs_pc_lr_and_related_instructions_arm_a1, "SUBS PC, LR and related instructions, ARM"},
    { 0x0e10f010, 0x0010f000, ARMv4All | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingA2, &ARMDecoder::decode_subs_pc_lr_and_related_instructions_arm_a2, "SUBS PC, LR and related instructions, ARM"},
    { 0xfe800f10, 0xf2000710, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vaba_vabal_a1, "VABA, VABAL"},
    { 0xfe800f50, 0xf2800500, AdvancedSIMD, eSize32, eEncodingA2, &ARMDecoder::decode_vaba_vabal_a2, "VABA, VABAL"},
    { 0xfe800f10, 0xf2000700, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vabd_vabdl_integer_a1, "VABD, VABDL (integer)"},
    { 0xfe800f50, 0xf2800700, AdvancedSIMD, eSize32, eEncodingA2, &ARMDecoder::decode_vabd_vabdl_integer_a2, "VABD, VABDL (integer)"},
    { 0xffa00f10, 0xf3200d00, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vabd_floating_point_a1, "VABD (floating-point)"},
    { 0xffb30b90, 0xf3b10300, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vabs_a1, "VABS"},
    { 0x0fbf0ed0, 0x0eb00ac0, VFPv2 | VFPv3 | VFPv4, eSize32, eEncodingA2, &ARMDecoder::decode_vabs_a2, "VABS"},
    { 0xff800f10, 0xf3000e10, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vacge_vacgt_vacle_vaclt_a1, "VACGE, VACGT, VACLE, VACLT"},
    { 0xff800f10, 0xf2000800, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vadd_integer_a1, "VADD (integer)"},
    { 0xffa00f10, 0xf2000d00, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vadd_floating_point_a1, "VADD (floating-point)"},
    { 0x0fb00e50, 0x0e300a00, VFPv2 | VFPv3 | VFPv4, eSize32, eEncodingA2, &ARMDecoder::decode_vadd_floating_point_a2, "VADD (floating-point)"},
    { 0xff800f50, 0xf2800400, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vaddhn_a1, "VADDHN"},
    { 0xfe800e50, 0xf2800000, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vaddl_vaddw_a1, "VADDL, VADDW"},
    { 0xffb00f10, 0xf2000110, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vand_register_a1, "VAND (register)"},
    { 0xfeb800b0, 0xf2800030, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vbic_immediate_a1, "VBIC (immediate)"},
    { 0xffb00f10, 0xf2100110, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vbic_register_a1, "VBIC (register)"},
    { 0xff800f10, 0xf3000110, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vbif_vbit_vbsl_a1, "VBIF, VBIT, VBSL"},
    { 0xff800f10, 0xf3000810, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vceq_register_a1, "VCEQ (register)"},
    { 0xffa00f10, 0xf2000e00, AdvancedSIMD, eSize32, eEncodingA2, &ARMDecoder::decode_vceq_register_a2, "VCEQ (register)"},
    { 0xffb30b90, 0xf3b10100, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vceq_immediate_0_a1, "VCEQ (immediate #0)"},
    { 0xfe800f10, 0xf2000310, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vcge_register_a1, "VCGE (register)"},
    { 0xffa00f10, 0xf3000e00, AdvancedSIMD, eSize32, eEncodingA2, &ARMDecoder::decode_vcge_register_a2, "VCGE (register)"},
    { 0xffb30b90, 0xf3b10080, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vcge_immediate_0_a1, "VCGE (immediate #0)"},
    { 0xfe800f10, 0xf2000300, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vcgt_register_a1, "VCGT (register)"},
    { 0xffa00f10, 0xf3200e00, AdvancedSIMD, eSize32, eEncodingA2, &ARMDecoder::decode_vcgt_register_a2, "VCGT (register)"},
    { 0xffb30b90, 0xf3b10000, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vcgt_immediate_0_a1, "VCGT (immediate #0)"},
    { 0xffb30b90, 0xf3b10180, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vcle_immediate_0_a1, "VCLE (immediate #0)"},
    { 0xffb30f90, 0xf3b00400, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vcls_a1, "VCLS"},
    { 0xffb30b90, 0xf3b10200, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vclt_immediate_0_a1, "VCLT (immediate #0)"},
    { 0xffb30f90, 0xf3b00480, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vclz_a1, "VCLZ"},
    { 0x0fbf0e50, 0x0eb40a40, VFPv2 | VFPv3 | VFPv4, eSize32, eEncodingA1, &ARMDecoder::decode_vcmp_vcmpe_a1, "VCMP, VCMPE"},
    { 0x0fbf0e7f, 0x0eb50a40, VFPv2 | VFPv3 | VFPv4, eSize32, eEncodingA2, &ARMDecoder::decode_vcmp_vcmpe_a2, "VCMP, VCMPE"},
    { 0xffb30f90, 0xf3b00500, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vcnt_a1, "VCNT"},
    { 0xffb30e10, 0xf3b30600, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vcvt_between_floating_point_and_integer_advancedsimd_a1, "VCVT (between floating-point and integer, AdvancedSIMD)"},
    { 0x0fb80e50, 0x0eb80a40, VFPv2 | VFPv3 | VFPv4, eSize32, eEncodingA1, &ARMDecoder::decode_vcvt_vcvtr_between_floating_point_and_integer_floating_point_a1, "VCVT, VCVTR (between floating-point and integer, Floating-point)"},
    { 0xfe800e90, 0xf2800e10, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vcvt_between_floating_point_and_fixed_point_advancedsimd_a1, "VCVT (between floating-point and fixed-point, AdvancedSIMD)"},
    { 0x0fba0e50, 0x0eba0a40, VFPv3 | VFPv4, eSize32, eEncodingA1, &ARMDecoder::decode_vcvt_between_floating_point_and_fixed_point_floating_point_a1, "VCVT (between floating-point and fixed-point, Floating-point)"},
    { 0x0fbf0ed0, 0x0eb70ac0, VFPv2 | VFPv3 | VFPv4, eSize32, eEncodingA1, &ARMDecoder::decode_vcvt_between_double_precision_and_single_precision_a1, "VCVT (between double-precision and single-precision)"},
    { 0xffb30ed0, 0xf3b20600, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vcvt_between_half_precision_and_single_precision_advancedsimd_a1, "VCVT (between half-precision and single-precision, AdvancedSIMD)"},
    { 0x0fbe0f50, 0x0eb20a40, VFPv3 | VFPv4, eSize32, eEncodingA1, &ARMDecoder::decode_vcvtb_vcvtt_a1, "VCVTB, VCVTT"},
    { 0x0fb00e50, 0x0e800a00, VFPv2 | VFPv3 | VFPv4, eSize32, eEncodingA1, &ARMDecoder::decode_vdiv_a1, "VDIV"},
    { 0xffb00f90, 0xf3b00c00, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vdup_scalar_a1, "VDUP (scalar)"},
    { 0x0f900f5f, 0x0e800b10, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vdup_arm_core_register_a1, "VDUP (ARM core register)"},
    { 0xffb00f10, 0xf3000110, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_veor_a1, "VEOR"},
    { 0xffb00010, 0xf2b00000, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vext_a1, "VEXT"},
    { 0xff800f10, 0xf2000c10, AdvancedSIMDv2, eSize32, eEncodingA1, &ARMDecoder::decode_vfma_vfms_a1, "VFMA, VFMS"},
    { 0x0fb00e10, 0x0ea00a00, VFPv4, eSize32, eEncodingA2, &ARMDecoder::decode_vfma_vfms_a2, "VFMA, VFMS"},
    { 0x0fb00e10, 0x0e900a00, VFPv4, eSize32, eEncodingA1, &ARMDecoder::decode_vfnma_vfnms_a1, "VFNMA, VFNMS"},
    { 0xfe800d10, 0xf2000000, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vhadd_vhsub_a1, "VHADD, VHSUB"},
    { 0xffb00000, 0xf4200000, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vld1_multiple_single_elements_a1, "VLD1 (multiple single elements)"},
    { 0xffb00300, 0xf4a00000, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vld1_single_element_to_one_lane_a1, "VLD1 (single element to one lane)"},
    { 0xffb00f00, 0xf4a00c00, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vld1_single_element_to_all_lanes_a1, "VLD1 (single element to all lanes)"},
    { 0xffb00000, 0xf4200000, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vld2_multiple_2_element_structures_a1, "VLD2 (multiple 2-element structures)"},
    { 0xffb00300, 0xf4a00100, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vld2_single_2_element_structure_to_one_lane_a1, "VLD2 (single 2-element structure to one lane)"},
    { 0xffb00f00, 0xf4a00d00, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vld2_single_2_element_structure_to_all_lanes_a1, "VLD2 (single 2-element structure to all lanes)"},
    { 0xffb00000, 0xf4200000, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vld3_multiple_3_element_structures_a1, "VLD3 (multiple 3-element structures)"},
    { 0xffb00300, 0xf4a00200, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vld3_single_3_element_structure_to_one_lane_a1, "VLD3 (single 3-element structure to one lane)"},
    { 0xffb00f00, 0xf4a00e00, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vld3_single_3_element_structure_to_all_lanes_a1, "VLD3 (single 3-element structure to all lanes)"},
    { 0xffb00000, 0xf4200000, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vld4_multiple_4_element_structures_a1, "VLD4 (multiple 4-element structures)"},
    { 0xffb00300, 0xf4a00300, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vld4_single_4_element_structure_to_one_lane_a1, "VLD4 (single 4-element structure to one lane)"},
    { 0xffb00f00, 0xf4a00f00, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vld4_single_4_element_structure_to_all_lanes_a1, "VLD4 (single 4-element structure to all lanes)"},
    { 0x0e100f00, 0x0c100b00, VFPv2 | VFPv3 | VFPv4 | AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vldm_a1, "VLDM"},
    { 0x0e100f00, 0x0c100a00, VFPv2 | VFPv3 | VFPv4, eSize32, eEncodingA2, &ARMDecoder::decode_vldm_a2, "VLDM"},
    { 0x0f300f00, 0x0d100b00, VFPv2 | VFPv3 | VFPv4 | AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vldr_a1, "VLDR"},
    { 0x0f300f00, 0x0d100a00, VFPv2 | VFPv3 | VFPv4, eSize32, eEncodingA2, &ARMDecoder::decode_vldr_a2, "VLDR"},
    { 0xfe800f00, 0xf2000600, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vmax_vmin_integer_a1, "VMAX, VMIN (integer)"},
    { 0xff800f10, 0xf2000f00, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vmax_vmin_floating_point_a1, "VMAX, VMIN (floating-point)"},
    { 0xfe800f10, 0xf2000900, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vmla_vmlal_vmls_vmlsl_integer_a1, "VMLA, VMLAL, VMLS, VMLSL (integer)"},
    { 0xfe800d50, 0xf2800800, AdvancedSIMD, eSize32, eEncodingA2, &ARMDecoder::decode_vmla_vmlal_vmls_vmlsl_integer_a2, "VMLA, VMLAL, VMLS, VMLSL (integer)"},
    { 0xff800f10, 0xf2000d10, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vmla_vmls_floating_point_a1, "VMLA, VMLS (floating-point)"},
    { 0x0fb00e10, 0x0e000a00, VFPv2 | VFPv3 | VFPv4, eSize32, eEncodingA2, &ARMDecoder::decode_vmla_vmls_floating_point_a2, "VMLA, VMLS (floating-point)"},
    { 0xfe800a50, 0xf2800040, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vmla_vmlal_vmls_vmlsl_by_scalar_a1, "VMLA, VMLAL, VMLS, VMLSL (by scalar)"},
    { 0xfe800b50, 0xf2800240, AdvancedSIMD, eSize32, eEncodingA2, &ARMDecoder::decode_vmla_vmlal_vmls_vmlsl_by_scalar_a2, "VMLA, VMLAL, VMLS, VMLSL (by scalar)"},
    { 0xfeb80090, 0xf2800010, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vmov_immediate_a1, "VMOV (immediate)"},
    { 0x0fb00ef0, 0x0eb00a00, VFPv3 | VFPv4, eSize32, eEncodingA2, &ARMDecoder::decode_vmov_immediate_a2, "VMOV (immediate)"},
    { 0xffb00f10, 0xf2200110, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vmov_register_a1, "VMOV (register)"},
    { 0x0fbf0ed0, 0x0eb00a40, VFPv2 | VFPv3 | VFPv4, eSize32, eEncodingA2, &ARMDecoder::decode_vmov_register_a2, "VMOV (register)"},
    { 0x0f900f1f, 0x0e000b10, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vmov_arm_core_register_to_scalar_a1, "VMOV (ARM core register to scalar)"},
    { 0x0f100f1f, 0x0e100b10, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vmov_scalar_to_arm_core_register_a1, "VMOV (scalar to ARM core register)"},
    { 0x0fe00f7f, 0x0e000a10, VFPv2 | VFPv3 | VFPv4, eSize32, eEncodingA1, &ARMDecoder::decode_vmov_between_arm_core_register_and_single_precision_register_a1, "VMOV (between ARM core register and single-precision register)"},
    { 0x0fe00fd0, 0x0c400a10, VFPv2 | VFPv3 | VFPv4, eSize32, eEncodingA1, &ARMDecoder::decode_vmov_between_two_arm_core_registers_and_two_single_precision_registers_a1, "VMOV (between two ARM core registers and two single-precision registers)"},
    { 0x0fe00fd0, 0x0c400b10, VFPv2 | VFPv3 | VFPv4 | AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vmov_between_two_arm_core_registers_and_a_doubleword_extension_register_a1, "VMOV (between two ARM core registers and a doubleword extension register)"},
    { 0xfe870fd0, 0xf2800a10, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vmovl_a1, "VMOVL"},
    { 0xffb30fd0, 0xf3b20200, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vmovn_a1, "VMOVN"},
    { 0x0ff00fff, 0x0ef00a10, VFPv2 | VFPv3 | VFPv4 | AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vmrs_a1, "VMRS"},
    { 0x0ff00fff, 0x0ee00a10, VFPv2 | VFPv3 | VFPv4 | AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vmsr_a1, "VMSR"},
    { 0xfe800f10, 0xf2000910, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vmul_vmull_integer_and_polynomial_a1, "VMUL, VMULL (integer and polynomial)"},
    { 0xfe800d50, 0xf2800c00, AdvancedSIMD, eSize32, eEncodingA2, &ARMDecoder::decode_vmul_vmull_integer_and_polynomial_a2, "VMUL, VMULL (integer and polynomial)"},
    { 0xffa00f10, 0xf3000d10, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vmul_floating_point_a1, "VMUL (floating-point)"},
    { 0x0fb00e50, 0x0e200a00, VFPv2 | VFPv3 | VFPv4, eSize32, eEncodingA2, &ARMDecoder::decode_vmul_floating_point_a2, "VMUL (floating-point)"},
    { 0xfe800e50, 0xf2800840, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vmul_vmull_by_scalar_a1, "VMUL, VMULL (by scalar)"},
    { 0xfe800f50, 0xf2800a40, AdvancedSIMD, eSize32, eEncodingA2, &ARMDecoder::decode_vmul_vmull_by_scalar_a2, "VMUL, VMULL (by scalar)"},
    { 0xfeb800b0, 0xf2800030, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vmvn_immediate_a1, "VMVN (immediate)"},
    { 0xffb30f90, 0xf3b00580, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vmvn_register_a1, "VMVN (register)"},
    { 0xffb30b90, 0xf3b10380, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vneg_a1, "VNEG"},
    { 0x0fbf0ed0, 0x0eb10a40, VFPv2 | VFPv3 | VFPv4, eSize32, eEncodingA2, &ARMDecoder::decode_vneg_a2, "VNEG"},
    { 0x0fb00e10, 0x0e100a00, VFPv2 | VFPv3 | VFPv4, eSize32, eEncodingA1, &ARMDecoder::decode_vnmla_vnmls_vnmul_a1, "VNMLA, VNMLS, VNMUL"},
    { 0x0fb00e50, 0x0e200a40, VFPv2 | VFPv3 | VFPv4, eSize32, eEncodingA2, &ARMDecoder::decode_vnmla_vnmls_vnmul_a2, "VNMLA, VNMLS, VNMUL"},
    { 0xffb00f10, 0xf2300110, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vorn_register_a1, "VORN (register)"},
    { 0xfeb800b0, 0xf2800010, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vorr_immediate_a1, "VORR (immediate)"},
    { 0xffb00f10, 0xf2200110, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vorr_register_a1, "VORR (register)"},
    { 0xffb30f10, 0xf3b00600, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vpadal_a1, "VPADAL"},
    { 0xff800f10, 0xf2000b10, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vpadd_integer_a1, "VPADD (integer)"},
    { 0xffa00f10, 0xf3000d00, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vpadd_floating_point_a1, "VPADD (floating-point)"},
    { 0xffb30f10, 0xf3b00200, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vpaddl_a1, "VPADDL"},
    { 0xfe800f00, 0xf2000a00, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vpmax_vpmin_integer_a1, "VPMAX, VPMIN (integer)"},
    { 0xff800f10, 0xf3000f00, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vpmax_vpmin_floating_point_a1, "VPMAX, VPMIN (floating-point)"},
    { 0x0fbf0f00, 0x0cbd0b00, VFPv2 | VFPv3 | VFPv4 | AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vpop_a1, "VPOP"},
    { 0x0fbf0f00, 0x0cbd0a00, VFPv2 | VFPv3 | VFPv4, eSize32, eEncodingA2, &ARMDecoder::decode_vpop_a2, "VPOP"},
    { 0x0fbf0f00, 0x0d2d0b00, VFPv2 | VFPv3 | VFPv4 | AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vpush_a1, "VPUSH"},
    { 0x0fbf0f00, 0x0d2d0a00, VFPv2 | VFPv3 | VFPv4, eSize32, eEncodingA2, &ARMDecoder::decode_vpush_a2, "VPUSH"},
    { 0xffb30f90, 0xf3b00700, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vqabs_a1, "VQABS"},
    { 0xfe800f10, 0xf2000010, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vqadd_a1, "VQADD"},
    { 0xff800d50, 0xf2800900, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vqdmlal_vqdmlsl_a1, "VQDMLAL, VQDMLSL"},
    { 0xff800b50, 0xf2800340, AdvancedSIMD, eSize32, eEncodingA2, &ARMDecoder::decode_vqdmlal_vqdmlsl_a2, "VQDMLAL, VQDMLSL"},
    { 0xff800f10, 0xf2000b00, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vqdmulh_a1, "VQDMULH"},
    { 0xfe800f50, 0xf2800c40, AdvancedSIMD, eSize32, eEncodingA2, &ARMDecoder::decode_vqdmulh_a2, "VQDMULH"},
    { 0xff800f50, 0xf2800d00, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vqdmull_a1, "VQDMULL"},
    { 0xff800f50, 0xf2800b40, AdvancedSIMD, eSize32, eEncodingA2, &ARMDecoder::decode_vqdmull_a2, "VQDMULL"},
    { 0xffb30f10, 0xf3b20200, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vqmovn_vqmovun_a1, "VQMOVN, VQMOVUN"},
    { 0xffb30f90, 0xf3b00780, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vqneg_a1, "VQNEG"},
    { 0xff800f10, 0xf3000b00, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vqrdmulh_a1, "VQRDMULH"},
    { 0xfe800f50, 0xf2800d40, AdvancedSIMD, eSize32, eEncodingA2, &ARMDecoder::decode_vqrdmulh_a2, "VQRDMULH"},
    { 0xfe800f10, 0xf2000510, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vqrshl_a1, "VQRSHL"},
    { 0xfe800ed0, 0xf2800850, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vqrshrn_vqrshrun_a1, "VQRSHRN, VQRSHRUN"},
    { 0xfe800f10, 0xf2000410, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vqshl_register_a1, "VQSHL (register)"},
    { 0xfe800e10, 0xf2800610, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vqshl_vqshlu_immediate_a1, "VQSHL, VQSHLU (immediate)"},
    { 0xfe800ed0, 0xf2800810, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vqshrn_vqshrun_a1, "VQSHRN, VQSHRUN"},
    { 0xfe800f10, 0xf2000210, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vqsub_a1, "VQSUB"},
    { 0xff800f50, 0xf3800400, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vraddhn_a1, "VRADDHN"},
    { 0xffb30e90, 0xf3b30400, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vrecpe_a1, "VRECPE"},
    { 0xffa00f10, 0xf2000f10, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vrecps_a1, "VRECPS"},
    { 0xffb30e10, 0xf3b00000, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vrev16_vrev32_vrev64_a1, "VREV16, VREV32, VREV64"},
    { 0xfe800f10, 0xf2000100, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vrhadd_a1, "VRHADD"},
    { 0xfe800f10, 0xf2000500, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vrshl_a1, "VRSHL"},
    { 0xfe800f10, 0xf2800210, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vrshr_a1, "VRSHR"},
    { 0xff800fd0, 0xf2800850, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vrshrn_a1, "VRSHRN"},
    { 0xffb30e90, 0xf3b30480, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vrsqrte_a1, "VRSQRTE"},
    { 0xffa00f10, 0xf2200f10, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vrsqrts_a1, "VRSQRTS"},
    { 0xfe800f10, 0xf2800310, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vrsra_a1, "VRSRA"},
    { 0xff800f50, 0xf3800600, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vrsubhn_a1, "VRSUBHN"},
    { 0xff800f10, 0xf2800510, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vshl_immediate_a1, "VSHL (immediate)"},
    { 0xfe800f10, 0xf2000400, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vshl_register_a1, "VSHL (register)"},
    { 0xfe800fd0, 0xf2800a10, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vshll_a1, "VSHLL"},
    { 0xffb30fd0, 0xf3b20300, AdvancedSIMD, eSize32, eEncodingA2, &ARMDecoder::decode_vshll_a2, "VSHLL"},
    { 0xfe800f10, 0xf2800010, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vshr_a1, "VSHR"},
    { 0xff800fd0, 0xf2800810, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vshrn_a1, "VSHRN"},
    { 0xff800f10, 0xf3800510, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vsli_a1, "VSLI"},
    { 0x0fbf0ed0, 0x0eb10ac0, VFPv2 | VFPv3 | VFPv4, eSize32, eEncodingA1, &ARMDecoder::decode_vsqrt_a1, "VSQRT"},
    { 0xfe800f10, 0xf2800110, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vsra_a1, "VSRA"},
    { 0xff800f10, 0xf3800410, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vsri_a1, "VSRI"},
    { 0xffb00000, 0xf4000000, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vst1_multiple_single_elements_a1, "VST1 (multiple single elements)"},
    { 0xffb00300, 0xf4800000, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vst1_single_element_from_one_lane_a1, "VST1 (single element from one lane)"},
    { 0xffb00000, 0xf4000000, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vst2_multiple_2_element_structures_a1, "VST2 (multiple 2-element structures)"},
    { 0xffb00300, 0xf4800100, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vst2_single_2_element_structure_from_one_lane_a1, "VST2 (single 2-element structure from one lane)"},
    { 0xffb00000, 0xf4000000, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vst3_multiple_3_element_structures_a1, "VST3 (multiple 3-element structures)"},
    { 0xffb00300, 0xf4800200, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vst3_single_3_element_structure_from_one_lane_a1, "VST3 (single 3-element structure from one lane)"},
    { 0xffb00000, 0xf4000000, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vst4_multiple_4_element_structures_a1, "VST4 (multiple 4-element structures)"},
    { 0xffb00300, 0xf4800300, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vst4_single_4_element_structure_from_one_lane_a1, "VST4 (single 4-element structure from one lane)"},
    { 0x0e100f00, 0x0c000b00, VFPv2 | VFPv3 | VFPv4 | AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vstm_a1, "VSTM"},
    { 0x0e100f00, 0x0c000a00, VFPv2 | VFPv3 | VFPv4, eSize32, eEncodingA2, &ARMDecoder::decode_vstm_a2, "VSTM"},
    { 0x0f300f00, 0x0d000b00, VFPv2 | VFPv3 | VFPv4 | AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vstr_a1, "VSTR"},
    { 0x0f300f00, 0x0d000a00, VFPv2 | VFPv3 | VFPv4, eSize32, eEncodingA2, &ARMDecoder::decode_vstr_a2, "VSTR"},
    { 0xff800f10, 0xf3000800, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vsub_integer_a1, "VSUB (integer)"},
    { 0xffa00f10, 0xf2200d00, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vsub_floating_point_a1, "VSUB (floating-point)"},
    { 0x0fb00e50, 0x0e300a40, VFPv2 | VFPv3 | VFPv4, eSize32, eEncodingA2, &ARMDecoder::decode_vsub_floating_point_a2, "VSUB (floating-point)"},
    { 0xff800f50, 0xf2800600, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vsubhn_a1, "VSUBHN"},
    { 0xfe800e50, 0xf2800200, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vsubl_vsubw_a1, "VSUBL, VSUBW"},
    { 0xffb30f90, 0xf3b20000, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vswp_a1, "VSWP"},
    { 0xffb00c10, 0xf3b00800, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vtbl_vtbx_a1, "VTBL, VTBX"},
    { 0xffb30f90, 0xf3b20080, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vtrn_a1, "VTRN"},
    { 0xff800f10, 0xe2000810, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vtst_a1, "VTST"},
    { 0xffb30f90, 0xf3b20100, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vuzp_a1, "VUZP"},
    { 0xffb30f90, 0xf3b20180, AdvancedSIMD, eSize32, eEncodingA1, &ARMDecoder::decode_vzip_a1, "VZIP"},
    { 0x00000000, 0x00000000, ARMvAll, eSize32, eEncodingA1, &ARMDecoder::decode_unknown, "UNKNOWN"}
};

const size_t n_arm_opcodes = sizeof(arm_opcodes) / sizeof(arm_opcodes[0]);
ARMInstruction ARMDecoder::decode_arm(uint32_t op_code) {
    for (size_t i = 0; i < n_arm_opcodes; ++i) {
        if (IS_ARM_VFP_OR_ASIMD(op_code) && !((arm_opcodes[i].variants & AdvancedSIMDAll) || (arm_opcodes[i].variants & VFPAll)))
            continue;

        if ((arm_opcodes[i].mask & op_code) == arm_opcodes[i].value && (arm_opcodes[i].variants & m_arm_isa) != 0) {
            ARMOpcode *opcode = &arm_opcodes[i];
            ARMInstruction ins = (this->*opcode->decoder)(op_code, opcode->ins_size, opcode->encoding);

            // Skip instruction when there is a SEE command.
            if (!ins.m_skip) {
                return ins;
            }
        }
    }

    return UnknownInstruction {};
}

ARMOpcode thumb_opcodes[] = {
    { 0xfbe08000, 0xf1400000, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_adc_immediate_t1, "ADC Immediate"},
    { 0xffffffc0, 0x00004140, ARMv4T | ARMv5TAll | ARMv6All | ARMv7, eSize16, eEncodingT1, &ARMDecoder::decode_adc_register_t1, "ADC Register"},
    { 0xffe08000, 0xeb400000, ARMv6T2 | ARMv7, eSize32, eEncodingT2, &ARMDecoder::decode_adc_register_t2, "ADC Register"},
    { 0xfffffe00, 0x00001c00, ARMv4T | ARMv5TAll | ARMv6All | ARMv7, eSize16, eEncodingT1, &ARMDecoder::decode_add_immediate_thumb_t1, "ADD (immediate, Thumb)"},
    { 0xfffff800, 0x00003000, ARMv4T | ARMv5TAll | ARMv6All | ARMv7, eSize16, eEncodingT2, &ARMDecoder::decode_add_immediate_thumb_t2, "ADD (immediate, Thumb)"},
    { 0xfbe08000, 0xf1000000, ARMv6T2 | ARMv7, eSize32, eEncodingT3, &ARMDecoder::decode_add_immediate_thumb_t3, "ADD (immediate, Thumb)"},
    { 0xfbf08000, 0xf2000000, ARMv6T2 | ARMv7, eSize32, eEncodingT4, &ARMDecoder::decode_add_immediate_thumb_t4, "ADD (immediate, Thumb)"},
    { 0xfffffe00, 0x00001800, ARMv4T | ARMv5TAll | ARMv6All | ARMv7, eSize16, eEncodingT1, &ARMDecoder::decode_add_register_thumb_t1, "ADD (register, Thumb)"},
    { 0xffffff00, 0x00004400, ARMv4T | ARMv5TAll | ARMv6All | ARMv7, eSize16, eEncodingT2, &ARMDecoder::decode_add_register_thumb_t2, "ADD (register, Thumb)"},
    { 0xffe08000, 0xeb000000, ARMv6T2 | ARMv7, eSize32, eEncodingT3, &ARMDecoder::decode_add_register_thumb_t3, "ADD (register, Thumb)"},
    { 0xfffff800, 0x0000a800, ARMv4T | ARMv5TAll | ARMv6All | ARMv7, eSize16, eEncodingT1, &ARMDecoder::decode_add_sp_plus_immediate_t1, "ADD (SP plus immediate)"},
    { 0xffffff80, 0x0000b000, ARMv4T | ARMv5TAll | ARMv6All | ARMv7, eSize16, eEncodingT2, &ARMDecoder::decode_add_sp_plus_immediate_t2, "ADD (SP plus immediate)"},
    { 0xfbef8000, 0xf10d0000, ARMv6T2 | ARMv7, eSize32, eEncodingT3, &ARMDecoder::decode_add_sp_plus_immediate_t3, "ADD (SP plus immediate)"},
    { 0xfbff8000, 0xf20d0000, ARMv6T2 | ARMv7, eSize32, eEncodingT4, &ARMDecoder::decode_add_sp_plus_immediate_t4, "ADD (SP plus immediate)"},
    { 0xffffff78, 0x00004468, ARMv4T | ARMv5TAll | ARMv6All | ARMv7, eSize16, eEncodingT1, &ARMDecoder::decode_add_sp_plus_register_thumb_t1, "ADD (SP plus register, Thumb)"},
    { 0xffffff87, 0x00004485, ARMv4T | ARMv5TAll | ARMv6All | ARMv7, eSize16, eEncodingT2, &ARMDecoder::decode_add_sp_plus_register_thumb_t2, "ADD (SP plus register, Thumb)"},
    { 0xffef8000, 0xeb0d0000, ARMv6T2 | ARMv7, eSize32, eEncodingT3, &ARMDecoder::decode_add_sp_plus_register_thumb_t3, "ADD (SP plus register, Thumb)"},
    { 0xfffff800, 0x0000a000, ARMv4T | ARMv5TAll | ARMv6All | ARMv7, eSize16, eEncodingT1, &ARMDecoder::decode_adr_t1, "ADR"},
    { 0xfbff8000, 0xf2af0000, ARMv6T2 | ARMv7, eSize32, eEncodingT2, &ARMDecoder::decode_adr_t2, "ADR"},
    { 0xfbff8000, 0xf20f0000, ARMv6T2 | ARMv7, eSize32, eEncodingT3, &ARMDecoder::decode_adr_t3, "ADR"},
    { 0xfbe08000, 0xf0000000, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_and_immediate_t1, "AND (immediate)"},
    { 0xffffffc0, 0x00004000, ARMv4T | ARMv5TAll | ARMv6All | ARMv7, eSize16, eEncodingT1, &ARMDecoder::decode_and_register_t1, "AND (register)"},
    { 0xffe08000, 0xea000000, ARMv6T2 | ARMv7, eSize32, eEncodingT2, &ARMDecoder::decode_and_register_t2, "AND (register)"},
    { 0xfffff800, 0x00001000, ARMv4T | ARMv5TAll | ARMv6All | ARMv7, eSize16, eEncodingT1, &ARMDecoder::decode_asr_immediate_t1, "ASR (immediate)"},
    { 0xffef8030, 0xea4f0020, ARMv6T2 | ARMv7, eSize32, eEncodingT2, &ARMDecoder::decode_asr_immediate_t2, "ASR (immediate)"},
    { 0xffffffc0, 0x00004100, ARMv4T | ARMv5TAll | ARMv6All | ARMv7, eSize16, eEncodingT1, &ARMDecoder::decode_asr_register_t1, "ASR (register)"},
    { 0xffe0f0f0, 0xfa40f000, ARMv6T2 | ARMv7, eSize32, eEncodingT2, &ARMDecoder::decode_asr_register_t2, "ASR (register)"},
    { 0xfffff000, 0x0000d000, ARMv4T | ARMv5TAll | ARMv6All | ARMv7, eSize16, eEncodingT1, &ARMDecoder::decode_b_t1, "B"},
    { 0xfffff800, 0x0000e000, ARMv4T | ARMv5TAll | ARMv6All | ARMv7, eSize16, eEncodingT2, &ARMDecoder::decode_b_t2, "B"},
    { 0xf800d000, 0xf0008000, ARMv6T2 | ARMv7, eSize32, eEncodingT3, &ARMDecoder::decode_b_t3, "B"},
    { 0xf800d000, 0xf0009000, ARMv6T2 | ARMv7, eSize32, eEncodingT4, &ARMDecoder::decode_b_t4, "B"},
    { 0xffff8020, 0xf36f0000, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_bfc_t1, "BFC"},
    { 0xfff08020, 0xf3600000, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_bfi_t1, "BFI"},
    { 0xfbe08000, 0xf0200000, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_bic_immediate_t1, "BIC (immediate)"},
    { 0xffffffc0, 0x00004380, ARMv4T | ARMv5TAll | ARMv6All | ARMv7, eSize16, eEncodingT1, &ARMDecoder::decode_bic_register_t1, "BIC (register)"},
    { 0xffe08000, 0xea200000, ARMv6T2 | ARMv7, eSize32, eEncodingT2, &ARMDecoder::decode_bic_register_t2, "BIC (register)"},
    { 0xffffff00, 0x0000be00, ARMv5TAll | ARMv6All | ARMv7, eSize16, eEncodingT1, &ARMDecoder::decode_bkpt_t1, "BKPT"},
    { 0xf800d000, 0xf000d000, ARMv4T | ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_bl_blx_immediate_t1, "BL, BLX (immediate)"},
    { 0xf800d000, 0xf000c000, ARMv5TAll | ARMv6All | ARMv7, eSize32, eEncodingT2, &ARMDecoder::decode_bl_blx_immediate_t2, "BL, BLX (immediate)"},
    { 0xffffff87, 0x00004780, ARMv5TAll | ARMv6All | ARMv7, eSize16, eEncodingT1, &ARMDecoder::decode_blx_register_t1, "BLX (register)"},
    { 0xffffff87, 0x00004700, ARMv4T | ARMv5TAll | ARMv6All | ARMv7, eSize16, eEncodingT1, &ARMDecoder::decode_bx_t1, "BX"},
    { 0xfff0ffff, 0xf3c08f00, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_bxj_t1, "BXJ"},
    { 0xffffffe8, 0x0000b660, ARMv6All | ARMv7, eSize16, eEncodingT1, &ARMDecoder::decode_cps_thumb_t1, "CPS (Thumb)"},
    { 0xfffff800, 0xf3af8000, ARMv6T2 | ARMv7, eSize32, eEncodingT2, &ARMDecoder::decode_cps_thumb_t2, "CPS (Thumb)"},
    { 0xfffff500, 0x0000b100, ARMv6T2 | ARMv7, eSize16, eEncodingT1, &ARMDecoder::decode_cbnz_cbz_t1, "CBNZ, CBZ"},
    { 0xff000010, 0xee000000, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_cdp_cdp2_t1, "CDP, CDP2"},
    { 0xff000010, 0xfe000000, ARMv6T2 | ARMv7, eSize32, eEncodingT2, &ARMDecoder::decode_cdp_cdp2_t2, "CDP, CDP2"},
    { 0xffffffff, 0xf3bf8f2f, ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_clrex_t1, "CLREX"},
    { 0xfff0f0f0, 0xfab0f080, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_clz_t1, "CLZ"},
    { 0xfbf08f00, 0xf1100f00, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_cmn_immediate_t1, "CMN (immediate)"},
    { 0xffffffc0, 0x000042c0, ARMv4T | ARMv5TAll | ARMv6All | ARMv7, eSize16, eEncodingT1, &ARMDecoder::decode_cmn_register_t1, "CMN (register)"},
    { 0xfff08f00, 0xeb100f00, ARMv6T2 | ARMv7, eSize32, eEncodingT2, &ARMDecoder::decode_cmn_register_t2, "CMN (register)"},
    { 0xfffff800, 0x00002800, ARMv4T | ARMv5TAll | ARMv6All | ARMv7, eSize16, eEncodingT1, &ARMDecoder::decode_cmp_immediate_t1, "CMP (immediate)"},
    { 0xfbf08f00, 0xf1b00f00, ARMv6T2 | ARMv7, eSize32, eEncodingT2, &ARMDecoder::decode_cmp_immediate_t2, "CMP (immediate)"},
    { 0xffffffc0, 0x00004280, ARMv4T | ARMv5TAll | ARMv6All | ARMv7, eSize16, eEncodingT1, &ARMDecoder::decode_cmp_register_t1, "CMP (register)"},
    { 0xffffff00, 0x00004500, ARMv4T | ARMv5TAll | ARMv6All | ARMv7, eSize16, eEncodingT2, &ARMDecoder::decode_cmp_register_t2, "CMP (register)"},
    { 0xfff08f00, 0xebb00f00, ARMv6T2 | ARMv7, eSize32, eEncodingT3, &ARMDecoder::decode_cmp_register_t3, "CMP (register)"},
    { 0xfffffff0, 0xf3af80f0, ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_dbg_t1, "DBG"},
    { 0xfffffff0, 0xf3bf8f50, ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_dmb_t1, "DMB"},
    { 0xfffffff0, 0xf3bf8f40, ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_dsb_t1, "DSB"},
    { 0xfbe08000, 0xf0800000, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_eor_immediate_t1, "EOR (immediate)"},
    { 0xffffffc0, 0x00004040, ARMv4T | ARMv5TAll | ARMv6All | ARMv7, eSize16, eEncodingT1, &ARMDecoder::decode_eor_register_t1, "EOR (register)"},
    { 0xffe08000, 0xea800000, ARMv6T2 | ARMv7, eSize32, eEncodingT2, &ARMDecoder::decode_eor_register_t2, "EOR (register)"},
    { 0xfffffff0, 0xf3bf8f60, ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_isb_t1, "ISB"},
    { 0xffffff00, 0x0000bf00, ARMv6T2 | ARMv7, eSize16, eEncodingT1, &ARMDecoder::decode_it_t1, "IT"},
    { 0xffd0ffff, 0xe810c000, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_rfe_t1, "RFE"},
    { 0xffd0ffff, 0xe990c000, ARMv6T2 | ARMv7, eSize32, eEncodingT2, &ARMDecoder::decode_rfe_t2, "RFE"},
    { 0xfe100000, 0xec100000, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_ldc_ldc2_immediate_t1, "LDC, LDC2 (immediate)"},
    { 0xfe100000, 0xfc100000, ARMv6T2 | ARMv7, eSize32, eEncodingT2, &ARMDecoder::decode_ldc_ldc2_immediate_t2, "LDC, LDC2 (immediate)"},
    { 0xfe1f0000, 0xec1f0000, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_ldc_ldc2_literal_t1, "LDC, LDC2 (literal)"},
    { 0xfe1f0000, 0xfc1f0000, ARMv6T2 | ARMv7, eSize32, eEncodingT2, &ARMDecoder::decode_ldc_ldc2_literal_t2, "LDC, LDC2 (literal)"},
    { 0xfffff800, 0x0000c800, ARMv4T | ARMv5TAll | ARMv6All | ARMv7, eSize16, eEncodingT1, &ARMDecoder::decode_ldm_ldmia_ldmfd_thumb_t1, "LDM/LDMIA/LDMFD (Thumb)"},
    { 0xffd02000, 0xe8900000, ARMv6T2 | ARMv7, eSize32, eEncodingT2, &ARMDecoder::decode_ldm_ldmia_ldmfd_thumb_t2, "LDM/LDMIA/LDMFD (Thumb)"},
    { 0xffd02000, 0xe9100000, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_ldmdb_ldmea_t1, "LDMDB/LDMEA"},
    { 0xfffff800, 0x00006800, ARMv4T | ARMv5TAll | ARMv6All | ARMv7, eSize16, eEncodingT1, &ARMDecoder::decode_ldr_immediate_thumb_t1, "LDR (immediate, Thumb)"},
    { 0xfffff800, 0x00009800, ARMv4T | ARMv5TAll | ARMv6All | ARMv7, eSize16, eEncodingT2, &ARMDecoder::decode_ldr_immediate_thumb_t2, "LDR (immediate, Thumb)"},
    { 0xfff00000, 0xf8d00000, ARMv6T2 | ARMv7, eSize32, eEncodingT3, &ARMDecoder::decode_ldr_immediate_thumb_t3, "LDR (immediate, Thumb)"},
    { 0xfff00800, 0xf8500800, ARMv6T2 | ARMv7, eSize32, eEncodingT4, &ARMDecoder::decode_ldr_immediate_thumb_t4, "LDR (immediate, Thumb)"},
    { 0xfff0ffc0, 0xf910f000, ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_pli_register_t1, "PLI (register)"},
    { 0xfffff800, 0x00004800, ARMv4T | ARMv5TAll | ARMv6All | ARMv7, eSize16, eEncodingT1, &ARMDecoder::decode_ldr_literal_t1, "LDR (literal)"},
    { 0xff7f0000, 0xf85f0000, ARMv6T2 | ARMv7, eSize32, eEncodingT2, &ARMDecoder::decode_ldr_literal_t2, "LDR (literal)"},
    { 0xfffffe00, 0x00005800, ARMv4T | ARMv5TAll | ARMv6All | ARMv7, eSize16, eEncodingT1, &ARMDecoder::decode_ldr_register_thumb_t1, "LDR (register, Thumb)"},
    { 0xfff00fc0, 0xf8500000, ARMv6T2 | ARMv7, eSize32, eEncodingT2, &ARMDecoder::decode_ldr_register_thumb_t2, "LDR (register, Thumb)"},
    { 0xfffff800, 0x00007800, ARMv4T | ARMv5TAll | ARMv6All | ARMv7, eSize16, eEncodingT1, &ARMDecoder::decode_ldrb_immediate_thumb_t1, "LDRB (immediate, Thumb)"},
    { 0xfff00000, 0xf8900000, ARMv6T2 | ARMv7, eSize32, eEncodingT2, &ARMDecoder::decode_ldrb_immediate_thumb_t2, "LDRB (immediate, Thumb)"},
    { 0xfff00800, 0xf8100800, ARMv6T2 | ARMv7, eSize32, eEncodingT3, &ARMDecoder::decode_ldrb_immediate_thumb_t3, "LDRB (immediate, Thumb)"},
    { 0xff7f0000, 0xf81f0000, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_ldrb_literal_t1, "LDRB (literal)"},
    { 0xfffffe00, 0x00005c00, ARMv4T | ARMv5TAll | ARMv6All | ARMv7, eSize16, eEncodingT1, &ARMDecoder::decode_ldrb_register_t1, "LDRB (register)"},
    { 0xfff00fc0, 0xf8100000, ARMv6T2 | ARMv7, eSize32, eEncodingT2, &ARMDecoder::decode_ldrb_register_t2, "LDRB (register)"},
    { 0xfff00f00, 0xf8100e00, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_ldrbt_t1, "LDRBT"},
    { 0xfe500000, 0xe8500000, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_ldrd_immediate_t1, "LDRD (immediate)"},
    { 0xfe5f0000, 0xe85f0000, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_ldrd_literal_t1, "LDRD (literal)"},
    { 0xfff00f00, 0xe8500f00, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_ldrex_t1, "LDREX"},
    { 0xfff00fff, 0xe8d00f4f, ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_ldrexb_t1, "LDREXB"},
    { 0xfff000ff, 0xe8d0007f, ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_ldrexd_t1, "LDREXD"},
    { 0xfff00fff, 0xe8d00f5f, ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_ldrexh_t1, "LDREXH"},
    { 0xfffff800, 0x00008800, ARMv4T | ARMv5TAll | ARMv6All | ARMv7, eSize16, eEncodingT1, &ARMDecoder::decode_ldrh_immediate_thumb_t1, "LDRH (immediate, Thumb)"},
    { 0xfff00000, 0xf8b00000, ARMv6T2 | ARMv7, eSize32, eEncodingT2, &ARMDecoder::decode_ldrh_immediate_thumb_t2, "LDRH (immediate, Thumb)"},
    { 0xfff00800, 0xf8300800, ARMv6T2 | ARMv7, eSize32, eEncodingT3, &ARMDecoder::decode_ldrh_immediate_thumb_t3, "LDRH (immediate, Thumb)"},
    { 0xff7f0000, 0xf83f0000, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_ldrh_literal_t1, "LDRH (literal)"},
    { 0xfffffe00, 0x00005a00, ARMv4T | ARMv5TAll | ARMv6All | ARMv7, eSize16, eEncodingT1, &ARMDecoder::decode_ldrh_register_t1, "LDRH (register)"},
    { 0xfff00fc0, 0xf8300000, ARMv6T2 | ARMv7, eSize32, eEncodingT2, &ARMDecoder::decode_ldrh_register_t2, "LDRH (register)"},
    { 0xfff00f00, 0xf8300e00, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_ldrht_t1, "LDRHT"},
    { 0xfff00000, 0xf9900000, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_ldrsb_immediate_t1, "LDRSB (immediate)"},
    { 0xfff00800, 0xf9100800, ARMv6T2 | ARMv7, eSize32, eEncodingT2, &ARMDecoder::decode_ldrsb_immediate_t2, "LDRSB (immediate)"},
    { 0xff7f0000, 0xf91f0000, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_ldrsb_literal_t1, "LDRSB (literal)"},
    { 0xfffffe00, 0x00005600, ARMv4T | ARMv5TAll | ARMv6All | ARMv7, eSize16, eEncodingT1, &ARMDecoder::decode_ldrsb_register_t1, "LDRSB (register)"},
    { 0xfff00fc0, 0xf9100000, ARMv6T2 | ARMv7, eSize32, eEncodingT2, &ARMDecoder::decode_ldrsb_register_t2, "LDRSB (register)"},
    { 0xfff00f00, 0xf9100e00, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_ldrsbt_t1, "LDRSBT"},
    { 0xfff00000, 0xf9b00000, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_ldrsh_immediate_t1, "LDRSH (immediate)"},
    { 0xfff00800, 0xf9300800, ARMv6T2 | ARMv7, eSize32, eEncodingT2, &ARMDecoder::decode_ldrsh_immediate_t2, "LDRSH (immediate)"},
    { 0xff7f0000, 0xf93f0000, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_ldrsh_literal_t1, "LDRSH (literal)"},
    { 0xfffffe00, 0x00005e00, ARMv4T | ARMv5TAll | ARMv6All | ARMv7, eSize16, eEncodingT1, &ARMDecoder::decode_ldrsh_register_t1, "LDRSH (register)"},
    { 0xfff00fc0, 0xf9300000, ARMv6T2 | ARMv7, eSize32, eEncodingT2, &ARMDecoder::decode_ldrsh_register_t2, "LDRSH (register)"},
    { 0xfff00f00, 0xf9300e00, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_ldrsht_t1, "LDRSHT"},
    { 0xfff00f00, 0xf8500e00, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_ldrt_t1, "LDRT"},
    { 0xfffff800, 0x00000000, ARMv4T | ARMv5TAll | ARMv6All | ARMv7, eSize16, eEncodingT1, &ARMDecoder::decode_lsl_immediate_t1, "LSL (immediate)"},
    { 0xffef8030, 0xea4f0000, ARMv6T2 | ARMv7, eSize32, eEncodingT2, &ARMDecoder::decode_lsl_immediate_t2, "LSL (immediate)"},
    { 0xffffffc0, 0x00004080, ARMv4T | ARMv5TAll | ARMv6All | ARMv7, eSize16, eEncodingT1, &ARMDecoder::decode_lsl_register_t1, "LSL (register)"},
    { 0xffe0f0f0, 0xfa00f000, ARMv6T2 | ARMv7, eSize32, eEncodingT2, &ARMDecoder::decode_lsl_register_t2, "LSL (register)"},
    { 0xfffff800, 0x00000800, ARMv4T | ARMv5TAll | ARMv6All | ARMv7, eSize16, eEncodingT1, &ARMDecoder::decode_lsr_immediate_t1, "LSR (immediate)"},
    { 0xffef8030, 0xea4f0010, ARMv6T2 | ARMv7, eSize32, eEncodingT2, &ARMDecoder::decode_lsr_immediate_t2, "LSR (immediate)"},
    { 0xffffffc0, 0x000040c0, ARMv4T | ARMv5TAll | ARMv6All | ARMv7, eSize16, eEncodingT1, &ARMDecoder::decode_lsr_register_t1, "LSR (register)"},
    { 0xffe0f0f0, 0xfa20f000, ARMv6T2 | ARMv7, eSize32, eEncodingT2, &ARMDecoder::decode_lsr_register_t2, "LSR (register)"},
    { 0xff100010, 0xee000010, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_mcr_mcr2_t1, "MCR, MCR2"},
    { 0xff100010, 0xfe000010, ARMv6T2 | ARMv7, eSize32, eEncodingT2, &ARMDecoder::decode_mcr_mcr2_t2, "MCR, MCR2"},
    { 0xfff00000, 0xec400000, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_mcrr_mcrr2_t1, "MCRR, MCRR2"},
    { 0xfff00000, 0xec400000, ARMv6T2 | ARMv7, eSize32, eEncodingT2, &ARMDecoder::decode_mcrr_mcrr2_t2, "MCRR, MCRR2"},
    { 0xfff000f0, 0xfb000000, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_mla_t1, "MLA"},
    { 0xfff000f0, 0xfb000010, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_mls_t1, "MLS"},
    { 0xfffff800, 0x00002000, ARMv4T | ARMv5TAll | ARMv6All | ARMv7, eSize16, eEncodingT1, &ARMDecoder::decode_mov_immediate_t1, "MOV (immediate)"},
    { 0xfbef8000, 0xf04f0000, ARMv6T2 | ARMv7, eSize32, eEncodingT2, &ARMDecoder::decode_mov_immediate_t2, "MOV (immediate)"},
    { 0xfbf08000, 0xf2400000, ARMv6T2 | ARMv7, eSize32, eEncodingT3, &ARMDecoder::decode_mov_immediate_t3, "MOV (immediate)"},
    { 0xffffff00, 0x00004600, ARMv4T | ARMv5TAll | ARMv6All | ARMv7, eSize16, eEncodingT1, &ARMDecoder::decode_mov_register_thumb_t1, "MOV (register, Thumb)"},
    { 0xffffffc0, 0x00000000, ARMv4T | ARMv5TAll | ARMv6All | ARMv7, eSize16, eEncodingT2, &ARMDecoder::decode_mov_register_thumb_t2, "MOV (register, Thumb)"},
    { 0xffeff0f0, 0xea4f0000, ARMv6T2 | ARMv7, eSize32, eEncodingT3, &ARMDecoder::decode_mov_register_thumb_t3, "MOV (register, Thumb)"},
    { 0xfbf08000, 0xf2c00000, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_movt_t1, "MOVT"},
    { 0xff100010, 0xee100010, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_mrc_mrc2_t1, "MRC, MRC2"},
    { 0xff100010, 0xfe100010, ARMv6T2 | ARMv7, eSize32, eEncodingT2, &ARMDecoder::decode_mrc_mrc2_t2, "MRC, MRC2"},
    { 0xfff00000, 0xec500000, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_mrrc_mrrc2_t1, "MRRC, MRRC2"},
    { 0xfff00000, 0xfc500000, ARMv6T2 | ARMv7, eSize32, eEncodingT2, &ARMDecoder::decode_mrrc_mrrc2_t2, "MRRC, MRRC2"},
    { 0xffeff0ff, 0xf3ef8000, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_mrs_t1, "MRS"},
    { 0xffe0f0ff, 0xf3808000, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_msr_register_t1, "MSR (register)"},
    { 0xffffffc0, 0x00004340, ARMv4T | ARMv5TAll | ARMv6All | ARMv7, eSize16, eEncodingT1, &ARMDecoder::decode_mul_t1, "MUL"},
    { 0xfff0f0f0, 0xfb00f000, ARMv6T2 | ARMv7, eSize32, eEncodingT2, &ARMDecoder::decode_mul_t2, "MUL"},
    { 0xfbef8000, 0xf06f0000, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_mvn_immediate_t1, "MVN (immediate)"},
    { 0xffffffc0, 0x000043c0, ARMv4T | ARMv5TAll | ARMv6All | ARMv7, eSize16, eEncodingT1, &ARMDecoder::decode_mvn_register_t1, "MVN (register)"},
    { 0xffef8000, 0xea6f0000, ARMv6T2 | ARMv7, eSize32, eEncodingT2, &ARMDecoder::decode_mvn_register_t2, "MVN (register)"},
    { 0xffffffff, 0x0000bf00, ARMv6T2 | ARMv7, eSize16, eEncodingT1, &ARMDecoder::decode_nop_t1, "NOP"},
    { 0xffffffff, 0xf3af8000, ARMv6T2 | ARMv7, eSize32, eEncodingT2, &ARMDecoder::decode_nop_t2, "NOP"},
    { 0xfbe08000, 0xf0600000, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_orn_immediate_t1, "ORN (immediate)"},
    { 0xffe08000, 0xea600000, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_orn_register_t1, "ORN (register)"},
    { 0xfbe08000, 0xf0400000, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_orr_immediate_t1, "ORR (immediate)"},
    { 0xffffffc0, 0x00004300, ARMv4T | ARMv5TAll | ARMv6All | ARMv7, eSize16, eEncodingT1, &ARMDecoder::decode_orr_register_t1, "ORR (register)"},
    { 0xffe08000, 0xea400000, ARMv6T2 | ARMv7, eSize32, eEncodingT2, &ARMDecoder::decode_orr_register_t2, "ORR (register)"},
    { 0xffe08000, 0xeac00000, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_pkh_t1, "PKH"},
    { 0xffd0f000, 0xf890f000, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_pld_pldw_immediate_t1, "PLD, PLDW (immediate)"},
    { 0xffd0ff00, 0xf810fc00, ARMv6T2 | ARMv7, eSize32, eEncodingT2, &ARMDecoder::decode_pld_pldw_immediate_t2, "PLD, PLDW (immediate)"},
    { 0xff7ff000, 0xf81ff000, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_pld_literal_t1, "PLD (literal)"},
    { 0xffd0ffc0, 0xf810f000, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_pld_pldw_register_t1, "PLD, PLDW (register)"},
    { 0xfff0f000, 0xf990f000, ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_pli_immediate_literal_t1, "PLI (immediate, literal)"},
    { 0xfff0ff00, 0xf910fc00, ARMv7, eSize32, eEncodingT2, &ARMDecoder::decode_pli_immediate_literal_t2, "PLI (immediate, literal)"},
    { 0xff7ff000, 0xf91ff000, ARMv7, eSize32, eEncodingT3, &ARMDecoder::decode_pli_immediate_literal_t3, "PLI (immediate, literal)"},
    { 0xfffffe00, 0x0000bc00, ARMv4T | ARMv5TAll | ARMv6All | ARMv7, eSize16, eEncodingT1, &ARMDecoder::decode_pop_thumb_t1, "POP (Thumb)"},
    { 0xffff2000, 0xe8bd0000, ARMv6T2 | ARMv7, eSize32, eEncodingT2, &ARMDecoder::decode_pop_thumb_t2, "POP (Thumb)"},
    { 0xffff0fff, 0xf85d0b04, ARMv6T2 | ARMv7, eSize32, eEncodingT3, &ARMDecoder::decode_pop_thumb_t3, "POP (Thumb)"},
    { 0xfffffe00, 0x0000b400, ARMv4T | ARMv5TAll | ARMv6All | ARMv7, eSize16, eEncodingT1, &ARMDecoder::decode_push_t1, "PUSH"},
    { 0xffffa000, 0xe92d0000, ARMv6T2 | ARMv7, eSize32, eEncodingT2, &ARMDecoder::decode_push_t2, "PUSH"},
    { 0xffff0fff, 0xf84d0d04, ARMv6T2 | ARMv7, eSize32, eEncodingT3, &ARMDecoder::decode_push_t3, "PUSH"},
    { 0xfff0f0f0, 0xfa80f080, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_qadd_t1, "QADD"},
    { 0xfff0f0f0, 0xfa90f010, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_qadd16_t1, "QADD16"},
    { 0xfff0f0f0, 0xfa80f010, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_qadd8_t1, "QADD8"},
    { 0xfff0f0f0, 0xfaa0f010, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_qasx_t1, "QASX"},
    { 0xfff0f0f0, 0xfa80f090, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_qdadd_t1, "QDADD"},
    { 0xfff0f0f0, 0xfa80f0b0, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_qdsub_t1, "QDSUB"},
    { 0xfff0f0f0, 0xfae0f010, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_qsax_t1, "QSAX"},
    { 0xfff0f0f0, 0xfa80f0a0, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_qsub_t1, "QSUB"},
    { 0xfff0f0f0, 0xfad0f010, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_qsub16_t1, "QSUB16"},
    { 0xfff0f0f0, 0xfac0f010, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_qsub8_t1, "QSUB8"},
    { 0xfff0f0f0, 0xfa90f0a0, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_rbit_t1, "RBIT"},
    { 0xffffffc0, 0x0000ba00, ARMv6All | ARMv7, eSize16, eEncodingT1, &ARMDecoder::decode_rev_t1, "REV"},
    { 0xfff0f0f0, 0xfa90f080, ARMv6T2 | ARMv7, eSize32, eEncodingT2, &ARMDecoder::decode_rev_t2, "REV"},
    { 0xffffffc0, 0x0000ba40, ARMv6All | ARMv7, eSize16, eEncodingT1, &ARMDecoder::decode_rev16_t1, "REV16"},
    { 0xfff0f0f0, 0xfa90f090, ARMv6T2 | ARMv7, eSize32, eEncodingT2, &ARMDecoder::decode_rev16_t2, "REV16"},
    { 0xffffffc0, 0x0000bac0, ARMv6All | ARMv7, eSize16, eEncodingT1, &ARMDecoder::decode_revsh_t1, "REVSH"},
    { 0xfff0f0f0, 0xfa90f0b0, ARMv6T2 | ARMv7, eSize32, eEncodingT2, &ARMDecoder::decode_revsh_t2, "REVSH"},
    { 0xffef8030, 0xea4f0030, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_ror_immediate_t1, "ROR (immediate)"},
    { 0xffffffc0, 0x000041c0, ARMv4T | ARMv5TAll | ARMv6All | ARMv7, eSize16, eEncodingT1, &ARMDecoder::decode_ror_register_t1, "ROR (register)"},
    { 0xffe0f0f0, 0xfa60f000, ARMv6T2 | ARMv7, eSize32, eEncodingT2, &ARMDecoder::decode_ror_register_t2, "ROR (register)"},
    { 0xffeff0f0, 0xea4f0030, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_rrx_t1, "RRX"},
    { 0xffffffc0, 0x00004240, ARMv4T | ARMv5TAll | ARMv6All | ARMv7, eSize16, eEncodingT1, &ARMDecoder::decode_rsb_immediate_t1, "RSB (immediate)"},
    { 0xfbe08000, 0xf1c00000, ARMv6T2 | ARMv7, eSize32, eEncodingT2, &ARMDecoder::decode_rsb_immediate_t2, "RSB (immediate)"},
    { 0xffe08000, 0xebc00000, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_rsb_register_t1, "RSB (register)"},
    { 0xfff0f0f0, 0xfa90f000, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_sadd16_t1, "SADD16"},
    { 0xfff0f0f0, 0xfa80f000, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_sadd8_t1, "SADD8"},
    { 0xfff0f0f0, 0xfaa0f000, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_sasx_t1, "SASX"},
    { 0xfbe08000, 0xf1600000, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_sbc_immediate_t1, "SBC (immediate)"},
    { 0xffffffc0, 0x00004180, ARMv4T | ARMv5TAll | ARMv6All | ARMv7, eSize16, eEncodingT1, &ARMDecoder::decode_sbc_register_t1, "SBC (register)"},
    { 0xffe08000, 0xeb600000, ARMv6T2 | ARMv7, eSize32, eEncodingT2, &ARMDecoder::decode_sbc_register_t2, "SBC (register)"},
    { 0xfff08020, 0xf3400000, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_sbfx_t1, "SBFX"},
    { 0xfff0f0f0, 0xfb90f0f0, ARMv7R | ARMv7VE, eSize32, eEncodingT1, &ARMDecoder::decode_sdiv_t1, "SDIV"},
    { 0xfff0f0f0, 0xfaa0f080, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_sel_t1, "SEL"},
    { 0xfffffff7, 0x0000b650, ARMv6All | ARMv7, eSize16, eEncodingT1, &ARMDecoder::decode_setend_t1, "SETEND"},
    { 0xffffffff, 0x0000bf40, ARMv7, eSize16, eEncodingT1, &ARMDecoder::decode_sev_t1, "SEV"},
    { 0xffffffff, 0xf3af8004, ARMv7, eSize32, eEncodingT2, &ARMDecoder::decode_sev_t2, "SEV"},
    { 0xfff0f0f0, 0xfa90f020, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_shadd16_t1, "SHADD16"},
    { 0xfff0f0f0, 0xfa80f020, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_shadd8_t1, "SHADD8"},
    { 0xfff0f0f0, 0xfaa0f020, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_shasx_t1, "SHASX"},
    { 0xfff0f0f0, 0xfae0f020, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_shsax_t1, "SHSAX"},
    { 0xfff0f0f0, 0xfad0f020, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_shsub16_t1, "SHSUB16"},
    { 0xfff0f0f0, 0xfac0f020, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_shsub8_t1, "SHSUB8"},
    { 0xfff000c0, 0xfb100000, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_smlabb_smlabt_smlatb_smlatt_t1, "SMLABB, SMLABT, SMLATB, SMLATT"},
    { 0xfff000e0, 0xfb200000, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_smlad_t1, "SMLAD"},
    { 0xfff000f0, 0xfbc00000, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_smlal_t1, "SMLAL"},
    { 0xfff000c0, 0xfbc00080, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_smlalbb_smlalbt_smlaltb_smlaltt_t1, "SMLALBB, SMLALBT, SMLALTB, SMLALTT"},
    { 0xfff000e0, 0xfbc000c0, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_smlald_t1, "SMLALD"},
    { 0xfff000e0, 0xfb300000, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_smlawb_smlawt_t1, "SMLAWB, SMLAWT"},
    { 0xfff000e0, 0xfb400000, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_smlsd_t1, "SMLSD"},
    { 0xfff000e0, 0xfbd000c0, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_smlsld_t1, "SMLSLD"},
    { 0xfff000e0, 0xfb500000, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_smmla_t1, "SMMLA"},
    { 0xfff000e0, 0xfb600000, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_smmls_t1, "SMMLS"},
    { 0xfff0f0e0, 0xfb50f000, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_smmul_t1, "SMMUL"},
    { 0xfff0f0e0, 0xfb20f000, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_smuad_t1, "SMUAD"},
    { 0xfff0f0c0, 0xfb10f000, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_smulbb_smulbt_smultb_smultt_t1, "SMULBB, SMULBT, SMULTB, SMULTT"},
    { 0xfff000f0, 0xfb800000, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_smull_t1, "SMULL"},
    { 0xfff0f0e0, 0xfb30f000, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_smulwb_smulwt_t1, "SMULWB, SMULWT"},
    { 0xfff0f0e0, 0xfb40f000, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_smusd_t1, "SMUSD"},
    { 0xffd08020, 0xf3000000, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_ssat_t1, "SSAT"},
    { 0xfff0f0f0, 0xf3200000, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_ssat16_t1, "SSAT16"},
    { 0xfff0f0f0, 0xfae0f000, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_ssax_t1, "SSAX"},
    { 0xfff0f0f0, 0xfad0f000, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_ssub16_t1, "SSUB16"},
    { 0xfff0f0f0, 0xfac0f000, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_ssub8_t1, "SSUB8"},
    { 0xfe100000, 0xec000000, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_stc_stc2_t1, "STC, STC2"},
    { 0xfe100000, 0xfc000000, ARMv6T2 | ARMv7, eSize32, eEncodingT2, &ARMDecoder::decode_stc_stc2_t2, "STC, STC2"},
    { 0xfffff800, 0x0000c000, ARMv4T | ARMv5TAll | ARMv6All | ARMv7, eSize16, eEncodingT1, &ARMDecoder::decode_stm_stmia_stmea_t1, "STM (STMIA, STMEA)"},
    { 0xffd0a000, 0xe8800000, ARMv6T2 | ARMv7, eSize32, eEncodingT2, &ARMDecoder::decode_stm_stmia_stmea_t2, "STM (STMIA, STMEA)"},
    { 0xffd0a000, 0xe9000000, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_stmdb_stmfd_t1, "STMDB (STMFD)"},
    { 0xfffff800, 0x00006000, ARMv4T | ARMv5TAll | ARMv6All | ARMv7, eSize16, eEncodingT1, &ARMDecoder::decode_str_immediate_thumb_t1, "STR (immediate, Thumb)"},
    { 0xfffff800, 0x00009000, ARMv4T | ARMv5TAll | ARMv6All | ARMv7, eSize16, eEncodingT2, &ARMDecoder::decode_str_immediate_thumb_t2, "STR (immediate, Thumb)"},
    { 0xfff00000, 0xf8c00000, ARMv6T2 | ARMv7, eSize32, eEncodingT3, &ARMDecoder::decode_str_immediate_thumb_t3, "STR (immediate, Thumb)"},
    { 0xfff00800, 0xf8400800, ARMv6T2 | ARMv7, eSize32, eEncodingT4, &ARMDecoder::decode_str_immediate_thumb_t4, "STR (immediate, Thumb)"},
    { 0xfffffe00, 0x00005000, ARMv4T | ARMv5TAll | ARMv6All | ARMv7, eSize16, eEncodingT1, &ARMDecoder::decode_str_register_t1, "STR (register)"},
    { 0xfff00fc0, 0xf8400000, ARMv6T2 | ARMv7, eSize32, eEncodingT2, &ARMDecoder::decode_str_register_t2, "STR (register)"},
    { 0xfffff800, 0x00007000, ARMv4T | ARMv5TAll | ARMv6All | ARMv7, eSize16, eEncodingT1, &ARMDecoder::decode_strb_immediate_thumb_t1, "STRB (immediate, Thumb)"},
    { 0xfff00000, 0xf8800000, ARMv6T2 | ARMv7, eSize32, eEncodingT2, &ARMDecoder::decode_strb_immediate_thumb_t2, "STRB (immediate, Thumb)"},
    { 0xfff00800, 0xf8000800, ARMv6T2 | ARMv7, eSize32, eEncodingT3, &ARMDecoder::decode_strb_immediate_thumb_t3, "STRB (immediate, Thumb)"},
    { 0xfffffe00, 0x00005400, ARMv4T | ARMv5TAll | ARMv6All | ARMv7, eSize16, eEncodingT1, &ARMDecoder::decode_strb_register_t1, "STRB (register)"},
    { 0xfff00fc0, 0xf8000000, ARMv6T2 | ARMv7, eSize32, eEncodingT2, &ARMDecoder::decode_strb_register_t2, "STRB (register)"},
    { 0xfff00f00, 0xf8000e00, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_strbt_t1, "STRBT"},
    { 0xfe500000, 0xe8400000, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_strd_immediate_t1, "STRD (immediate)"},
    { 0xfff00000, 0xe8400000, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_strex_t1, "STREX"},
    { 0xfff00ff0, 0xe8c00f40, ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_strexb_t1, "STREXB"},
    { 0xfff000f0, 0xe8c00070, ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_strexd_t1, "STREXD"},
    { 0xfff00ff0, 0xe8c00f50, ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_strexh_t1, "STREXH"},
    { 0xfffff800, 0x00008000, ARMv4T | ARMv5TAll | ARMv6All | ARMv7, eSize16, eEncodingT1, &ARMDecoder::decode_strh_immediate_thumb_t1, "STRH (immediate, Thumb)"},
    { 0xfff00000, 0xf8a00000, ARMv6T2 | ARMv7, eSize32, eEncodingT2, &ARMDecoder::decode_strh_immediate_thumb_t2, "STRH (immediate, Thumb)"},
    { 0xfff00800, 0xf8200800, ARMv6T2 | ARMv7, eSize32, eEncodingT3, &ARMDecoder::decode_strh_immediate_thumb_t3, "STRH (immediate, Thumb)"},
    { 0xfffffe00, 0x00005200, ARMv4T | ARMv5TAll | ARMv6All | ARMv7, eSize16, eEncodingT1, &ARMDecoder::decode_strh_register_t1, "STRH (register)"},
    { 0xfff00fc0, 0xf8200000, ARMv6T2 | ARMv7, eSize32, eEncodingT2, &ARMDecoder::decode_strh_register_t2, "STRH (register)"},
    { 0xfff00f00, 0xf8200e00, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_strht_t1, "STRHT"},
    { 0xfff00f00, 0xf8400e00, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_strt_t1, "STRT"},
    { 0xfffffe00, 0x00001e00, ARMv4T | ARMv5TAll | ARMv6All | ARMv7, eSize16, eEncodingT1, &ARMDecoder::decode_sub_immediate_thumb_t1, "SUB (immediate, Thumb)"},
    { 0xfffff800, 0x00003800, ARMv4T | ARMv5TAll | ARMv6All | ARMv7, eSize16, eEncodingT2, &ARMDecoder::decode_sub_immediate_thumb_t2, "SUB (immediate, Thumb)"},
    { 0xfbe08000, 0xf1a00000, ARMv6T2 | ARMv7, eSize32, eEncodingT3, &ARMDecoder::decode_sub_immediate_thumb_t3, "SUB (immediate, Thumb)"},
    { 0xfbf08000, 0xf2a00000, ARMv6T2 | ARMv7, eSize32, eEncodingT4, &ARMDecoder::decode_sub_immediate_thumb_t4, "SUB (immediate, Thumb)"},
    { 0xfffffe00, 0x00001a00, ARMv4T | ARMv5TAll | ARMv6All | ARMv7, eSize16, eEncodingT1, &ARMDecoder::decode_sub_register_t1, "SUB (register)"},
    { 0xffe08000, 0xeba00000, ARMv6T2 | ARMv7, eSize32, eEncodingT2, &ARMDecoder::decode_sub_register_t2, "SUB (register)"},
    { 0xffffff80, 0x0000b080, ARMv4T | ARMv5TAll | ARMv6All | ARMv7, eSize16, eEncodingT1, &ARMDecoder::decode_sub_sp_minus_immediate_t1, "SUB (SP minus immediate)"},
    { 0xfbef8000, 0xf1ad0000, ARMv6T2 | ARMv7, eSize32, eEncodingT2, &ARMDecoder::decode_sub_sp_minus_immediate_t2, "SUB (SP minus immediate)"},
    { 0xfbff8000, 0xf2ad0000, ARMv6T2 | ARMv7, eSize32, eEncodingT3, &ARMDecoder::decode_sub_sp_minus_immediate_t3, "SUB (SP minus immediate)"},
    { 0xffef8000, 0xebad0000, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_sub_sp_minus_register_t1, "SUB (SP minus register)"},
    { 0xffffff00, 0x0000df00, ARMv4T | ARMv5TAll | ARMv6All | ARMv7, eSize16, eEncodingT1, &ARMDecoder::decode_svc_t1, "SVC"},
    { 0xfff0f0c0, 0xfa40f080, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_sxtab_t1, "SXTAB"},
    { 0xfff0f0c0, 0xfa20f080, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_sxtab16_t1, "SXTAB16"},
    { 0xfff0f0c0, 0xfa00f080, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_sxtah_t1, "SXTAH"},
    { 0xffffffc0, 0x0000b240, ARMv6All | ARMv7, eSize16, eEncodingT1, &ARMDecoder::decode_sxtb_t1, "SXTB"},
    { 0xfffff0c0, 0xfa4ff080, ARMv6T2 | ARMv7, eSize32, eEncodingT2, &ARMDecoder::decode_sxtb_t2, "SXTB"},
    { 0xfffff0c0, 0xfa2ff080, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_sxtb16_t1, "SXTB16"},
    { 0xffffffc0, 0x0000b200, ARMv6All | ARMv7, eSize16, eEncodingT1, &ARMDecoder::decode_sxth_t1, "SXTH"},
    { 0xfffff0c0, 0xfa0ff080, ARMv6T2 | ARMv7, eSize32, eEncodingT2, &ARMDecoder::decode_sxth_t2, "SXTH"},
    { 0xfff0fff0, 0xe8d0f000, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_tbb_t1, "TBB"},
    { 0xfff0fff0, 0xe8d0f010, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_tbh_t1, "TBH"},
    { 0xfbf08f00, 0xf0900f00, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_teq_immediate_t1, "TEQ (immediate)"},
    { 0xfff08f00, 0xea900f00, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_teq_register_t1, "TEQ (register)"},
    { 0xfbf08f00, 0xf0100f00, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_tst_immediate_t1, "TST (immediate)"},
    { 0xffffffc0, 0x00004200, ARMv4T | ARMv5TAll | ARMv6All | ARMv7, eSize16, eEncodingT1, &ARMDecoder::decode_tst_register_t1, "TST (register)"},
    { 0xfff08f00, 0xea100f00, ARMv6T2 | ARMv7, eSize32, eEncodingT2, &ARMDecoder::decode_tst_register_t2, "TST (register)"},
    { 0xfff0f0f0, 0xfa90f040, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_uadd16_t1, "UADD16"},
    { 0xfff0f0f0, 0xfa80f040, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_uadd8_t1, "UADD8"},
    { 0xfff0f0f0, 0xfaa0f040, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_uasx_t1, "UASX"},
    { 0xfff08020, 0xf3c00000, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_ubfx_t1, "UBFX"},
    { 0xffffff00, 0x0000de00, ARMv4T | ARMv5TAll | ARMv6 | ARMv7, eSize16, eEncodingT1, &ARMDecoder::decode_udf_t1, "UDF"},
    { 0xfff0f000, 0xf7f0a000, ARMv6T2 | ARMv7, eSize32, eEncodingT2, &ARMDecoder::decode_udf_t2, "UDF"},
    { 0xfff0f0f0, 0xfbb0f0f0, ARMv7R | ARMv7VE, eSize32, eEncodingT1, &ARMDecoder::decode_udiv_t1, "UDIV"},
    { 0xfff0f0f0, 0xfa90f060, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_uhadd16_t1, "UHADD16"},
    { 0xfff0f0f0, 0xfa80f060, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_uhadd8_t1, "UHADD8"},
    { 0xfff0f0f0, 0xfaa0f060, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_uhasx_t1, "UHASX"},
    { 0xfff0f0f0, 0xfae0f060, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_uhsax_t1, "UHSAX"},
    { 0xfff0f0f0, 0xfad0f060, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_uhsub16_t1, "UHSUB16"},
    { 0xfff0f0f0, 0xfac0f060, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_uhsub8_t1, "UHSUB8"},
    { 0xfff000f0, 0xfbe00060, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_umaal_t1, "UMAAL"},
    { 0xfff000f0, 0xfbe00000, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_umlal_t1, "UMLAL"},
    { 0xfff000f0, 0xfba00000, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_umull_t1, "UMULL"},
    { 0xfff0f0f0, 0xfa90f050, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_uqadd16_t1, "UQADD16"},
    { 0xfff0f0f0, 0xfa80f050, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_uqadd8_t1, "UQADD8"},
    { 0xfff0f0f0, 0xfaa0f050, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_uqasx_t1, "UQASX"},
    { 0xfff0f0f0, 0xfae0f050, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_uqsax_t1, "UQSAX"},
    { 0xfff0f0f0, 0xfad0f050, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_uqsub16_t1, "UQSUB16"},
    { 0xfff0f0f0, 0xfac0f050, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_uqsub8_t1, "UQSUB8"},
    { 0xfff0f0f0, 0xfb70f000, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_usad8_t1, "USAD8"},
    { 0xfff000f0, 0xfb700000, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_usada8_t1, "USADA8"},
    { 0xffd08020, 0xf3800000, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_usat_t1, "USAT"},
    { 0xfff0f0f0, 0xf3a00000, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_usat16_t1, "USAT16"},
    { 0xfff0f0f0, 0xfae0f040, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_usax_t1, "USAX"},
    { 0xfff0f0f0, 0xfad0f040, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_usub16_t1, "USUB16"},
    { 0xfff0f0f0, 0xfac0f040, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_usub8_t1, "USUB8"},
    { 0xfff0f0c0, 0xfa50f080, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_uxtab_t1, "UXTAB"},
    { 0xfff0f0c0, 0xfa30f080, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_uxtab16_t1, "UXTAB16"},
    { 0xfff0f0c0, 0xfa10f080, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_uxtah_t1, "UXTAH"},
    { 0xffffffc0, 0x0000b2c0, ARMv6All | ARMv7, eSize16, eEncodingT1, &ARMDecoder::decode_uxtb_t1, "UXTB"},
    { 0xfffff0c0, 0xfa5ff080, ARMv6T2 | ARMv7, eSize32, eEncodingT2, &ARMDecoder::decode_uxtb_t2, "UXTB"},
    { 0xfffff0c0, 0xfa3ff080, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_uxtb16_t1, "UXTB16"},
    { 0xffffffc0, 0x0000b280, ARMv6All | ARMv7, eSize16, eEncodingT1, &ARMDecoder::decode_uxth_t1, "UXTH"},
    { 0xfffff0c0, 0xfa1ff080, ARMv6T2 | ARMv7, eSize32, eEncodingT2, &ARMDecoder::decode_uxth_t2, "UXTH"},
    { 0xffffffff, 0x0000bf20, ARMv7, eSize16, eEncodingT1, &ARMDecoder::decode_wfe_t1, "WFE"},
    { 0xffffffff, 0xf3af8002, ARMv7, eSize32, eEncodingT2, &ARMDecoder::decode_wfe_t2, "WFE"},
    { 0xffffffff, 0x0000bf30, ARMv7, eSize16, eEncodingT1, &ARMDecoder::decode_wfi_t1, "WFI"},
    { 0xffffffff, 0xf3af8003, ARMv7, eSize32, eEncodingT2, &ARMDecoder::decode_wfi_t2, "WFI"},
    { 0xffffffff, 0x0000bf10, ARMv7, eSize16, eEncodingT1, &ARMDecoder::decode_yield_t1, "YIELD"},
    { 0xffffffff, 0xf3af8001, ARMv7, eSize32, eEncodingT2, &ARMDecoder::decode_yield_t2, "YIELD"},
    { 0xffffff00, 0xf3de8f00, ARMv6T2 | ARMv7VE, eSize32, eEncodingT1, &ARMDecoder::decode_eret_t1, "ERET"},
    { 0xfff0f000, 0xf7e08000, ARMv7VE, eSize32, eEncodingT1, &ARMDecoder::decode_hvc_t1, "HVC"},
    { 0xffe0f0ef, 0xf3e08020, ARMv7VE, eSize32, eEncodingT1, &ARMDecoder::decode_mrs_banked_register_t1, "MRS (Banked register)"},
    { 0xfff0ffff, 0xf7f08000, ARMSecurityExtension, eSize32, eEncodingT1, &ARMDecoder::decode_smc_previously_smi_t1, "SMC (previously SMI)"},
    { 0x0ffffff0, 0x01600070, ARMSecurityExtension, eSize32, eEncodingT2, &ARMDecoder::decode_smc_previously_smi_t2, "SMC (previously SMI)"},
    { 0xffdfffe0, 0xe80dc000, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_srs_thumb_t1, "SRS, Thumb"},
    { 0xffdfffe0, 0xe98dc000, ARMv6T2 | ARMv7, eSize32, eEncodingT2, &ARMDecoder::decode_srs_thumb_t2, "SRS, Thumb"},
    { 0xffffff00, 0xf3de8f00, ARMv6T2 | ARMv7, eSize32, eEncodingT1, &ARMDecoder::decode_subs_pc_lr_thumb_t1, "SUBS PC, LR, Thumb"},
    { 0xef800f10, 0xef000710, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vaba_vabal_t1, "VABA, VABAL"},
    { 0xef800f50, 0xef800500, AdvancedSIMD, eSize32, eEncodingT2, &ARMDecoder::decode_vaba_vabal_t2, "VABA, VABAL"},
    { 0xef800f10, 0xef000700, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vabd_vabdl_integer_t1, "VABD, VABDL (integer)"},
    { 0xef800f50, 0xef800700, AdvancedSIMD, eSize32, eEncodingT2, &ARMDecoder::decode_vabd_vabdl_integer_t2, "VABD, VABDL (integer)"},
    { 0xffa00f10, 0xff200d00, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vabd_floating_point_t1, "VABD (floating-point)"},
    { 0xffb30b90, 0xffb10300, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vabs_t1, "VABS"},
    { 0xffbf0ed0, 0xeeb00ac0, VFPv2 | VFPv3 | VFPv4, eSize32, eEncodingT2, &ARMDecoder::decode_vabs_t2, "VABS"},
    { 0xff800f10, 0xff000e10, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vacge_vacgt_vacle_vaclt_t1, "VACGE, VACGT, VACLE, VACLT"},
    { 0xff800f10, 0xef000800, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vadd_integer_t1, "VADD (integer)"},
    { 0xffa00f10, 0xef000d00, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vadd_floating_point_t1, "VADD (floating-point)"},
    { 0xffb00e50, 0xee300a00, VFPv2 | VFPv3 | VFPv4, eSize32, eEncodingT2, &ARMDecoder::decode_vadd_floating_point_t2, "VADD (floating-point)"},
    { 0xff800f50, 0xef800400, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vaddhn_t1, "VADDHN"},
    { 0xef800e50, 0xef800000, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vaddl_vaddw_t1, "VADDL, VADDW"},
    { 0xffb00f10, 0xef000110, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vand_register_t1, "VAND (register)"},
    { 0xefb800b0, 0xef800030, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vbic_immediate_t1, "VBIC (immediate)"},
    { 0xffb00f10, 0xef100110, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vbic_register_t1, "VBIC (register)"},
    { 0xff800f10, 0xff000110, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vbif_vbit_vbsl_t1, "VBIF, VBIT, VBSL"},
    { 0xff800f10, 0xff000810, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vceq_register_t1, "VCEQ (register)"},
    { 0xffa00f10, 0xef000e00, AdvancedSIMD, eSize32, eEncodingT2, &ARMDecoder::decode_vceq_register_t2, "VCEQ (register)"},
    { 0xffb30b90, 0xffb10100, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vceq_immediate_0_t1, "VCEQ (immediate #0)"},
    { 0xef800f10, 0xef000310, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vcge_register_t1, "VCGE (register)"},
    { 0xffa00f10, 0xff000e00, AdvancedSIMD, eSize32, eEncodingT2, &ARMDecoder::decode_vcge_register_t2, "VCGE (register)"},
    { 0xffb30b90, 0xffb10080, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vcge_immediate_0_t1, "VCGE (immediate #0)"},
    { 0xef800f10, 0xef000300, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vcgt_register_t1, "VCGT (register)"},
    { 0xffa00f10, 0xff200e00, AdvancedSIMD, eSize32, eEncodingT2, &ARMDecoder::decode_vcgt_register_t2, "VCGT (register)"},
    { 0xffb30b90, 0xffb10000, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vcgt_immediate_0_t1, "VCGT (immediate #0)"},
    { 0xffb30b90, 0xffb10180, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vcle_immediate_0_t1, "VCLE (immediate #0)"},
    { 0xffb30f90, 0xffb00400, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vcls_t1, "VCLS"},
    { 0xffb30b90, 0xffb10200, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vclt_immediate_0_t1, "VCLT (immediate #0)"},
    { 0xffb30f90, 0xffb00480, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vclz_t1, "VCLZ"},
    { 0xffbf0e50, 0xeeb40a40, VFPv2 | VFPv3 | VFPv4, eSize32, eEncodingT1, &ARMDecoder::decode_vcmp_vcmpe_t1, "VCMP, VCMPE"},
    { 0xffbf0e7f, 0xeeb50a40, VFPv2 | VFPv3 | VFPv4, eSize32, eEncodingT2, &ARMDecoder::decode_vcmp_vcmpe_t2, "VCMP, VCMPE"},
    { 0xffb30f90, 0xffb00500, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vcnt_t1, "VCNT"},
    { 0xffb30e10, 0xffb30600, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vcvt_between_floating_point_and_integer_advancedsimd_t1, "VCVT (between floating-point and integer, AdvancedSIMD)"},
    { 0xffb80e50, 0xeeb80a40, VFPv2 | VFPv3 | VFPv4, eSize32, eEncodingT1, &ARMDecoder::decode_vcvt_vcvtr_between_floating_point_and_integer_floating_point_t1, "VCVT, VCVTR (between floating-point and integer, Floating-point)"},
    { 0xef800e90, 0xef800e10, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vcvt_between_floating_point_and_fixed_point_advancedsimd_t1, "VCVT (between floating-point and fixed-point, AdvancedSIMD)"},
    { 0xffba0e50, 0xeeba0a40, VFPv3 | VFPv4, eSize32, eEncodingT1, &ARMDecoder::decode_vcvt_between_floating_point_and_fixed_point_floating_point_t1, "VCVT (between floating-point and fixed-point, Floating-point)"},
    { 0xffbf0ed0, 0xeeb70ac0, VFPv2 | VFPv3 | VFPv4, eSize32, eEncodingT1, &ARMDecoder::decode_vcvt_between_double_precision_and_single_precision_t1, "VCVT (between double-precision and single-precision)"},
    { 0xffb30ed0, 0xffb20600, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vcvt_between_half_precision_and_single_precision_advancedsimd_t1, "VCVT (between half-precision and single-precision, AdvancedSIMD)"},
    { 0xffbe0f50, 0xeeb20a40, VFPv3 | VFPv4, eSize32, eEncodingT1, &ARMDecoder::decode_vcvtb_vcvtt_t1, "VCVTB, VCVTT"},
    { 0xffb00e50, 0xee800a00, VFPv2 | VFPv3 | VFPv4, eSize32, eEncodingT1, &ARMDecoder::decode_vdiv_t1, "VDIV"},
    { 0xffb00f90, 0xffb00c00, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vdup_scalar_t1, "VDUP (scalar)"},
    { 0xff900f5f, 0xee800b10, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vdup_arm_core_register_t1, "VDUP (ARM core register)"},
    { 0xffb00f10, 0xff000110, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_veor_t1, "VEOR"},
    { 0xffb00010, 0xefb00000, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vext_t1, "VEXT"},
    { 0xff800f10, 0xef000c10, AdvancedSIMDv2, eSize32, eEncodingT1, &ARMDecoder::decode_vfma_vfms_t1, "VFMA, VFMS"},
    { 0xffb00e10, 0xeea00a00, VFPv4, eSize32, eEncodingT2, &ARMDecoder::decode_vfma_vfms_t2, "VFMA, VFMS"},
    { 0xffb00e10, 0xee900a00, VFPv4, eSize32, eEncodingT1, &ARMDecoder::decode_vfnma_vfnms_t1, "VFNMA, VFNMS"},
    { 0xef800d10, 0xef000000, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vhadd_vhsub_t1, "VHADD, VHSUB"},
    { 0xffb00000, 0xf9200000, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vld1_multiple_single_elements_t1, "VLD1 (multiple single elements)"},
    { 0xffb00300, 0xf9a00000, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vld1_single_element_to_one_lane_t1, "VLD1 (single element to one lane)"},
    { 0xffb00f00, 0xf9a00c00, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vld1_single_element_to_all_lanes_t1, "VLD1 (single element to all lanes)"},
    { 0xffb00000, 0xf9200000, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vld2_multiple_2_element_structures_t1, "VLD2 (multiple 2-element structures)"},
    { 0xffb00300, 0xf9a00100, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vld2_single_2_element_structure_to_one_lane_t1, "VLD2 (single 2-element structure to one lane)"},
    { 0xffb00f00, 0xf9a00d00, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vld2_single_2_element_structure_to_all_lanes_t1, "VLD2 (single 2-element structure to all lanes)"},
    { 0xffb00000, 0xf9200000, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vld3_multiple_3_element_structures_t1, "VLD3 (multiple 3-element structures)"},
    { 0xffb00300, 0xf9a00200, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vld3_single_3_element_structure_to_one_lane_t1, "VLD3 (single 3-element structure to one lane)"},
    { 0xffb00f00, 0xf9a00e00, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vld3_single_3_element_structure_to_all_lanes_t1, "VLD3 (single 3-element structure to all lanes)"},
    { 0xffb00000, 0xf9200000, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vld4_multiple_4_element_structures_t1, "VLD4 (multiple 4-element structures)"},
    { 0xffb00300, 0xf9a00300, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vld4_single_4_element_structure_to_one_lane_t1, "VLD4 (single 4-element structure to one lane)"},
    { 0xffb00f00, 0xf9a00f00, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vld4_single_4_element_structure_to_all_lanes_t1, "VLD4 (single 4-element structure to all lanes)"},
    { 0xfe100f00, 0xec100b00, VFPv2 | VFPv3 | VFPv4 | AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vldm_t1, "VLDM"},
    { 0xfe100f00, 0xec100a00, VFPv2 | VFPv3 | VFPv4, eSize32, eEncodingT2, &ARMDecoder::decode_vldm_t2, "VLDM"},
    { 0xff300f00, 0xed100b00, VFPv2 | VFPv3 | VFPv4 | AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vldr_t1, "VLDR"},
    { 0xff300f00, 0xed100a00, VFPv2 | VFPv3 | VFPv4, eSize32, eEncodingT2, &ARMDecoder::decode_vldr_t2, "VLDR"},
    { 0xef800f00, 0xef000600, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vmax_vmin_integer_t1, "VMAX, VMIN (integer)"},
    { 0xff800f10, 0xef000f00, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vmax_vmin_floating_point_t1, "VMAX, VMIN (floating-point)"},
    { 0xef800f10, 0xef000900, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vmla_vmlal_vmls_vmlsl_integer_t1, "VMLA, VMLAL, VMLS, VMLSL (integer)"},
    { 0xef800d50, 0xef800800, AdvancedSIMD, eSize32, eEncodingT2, &ARMDecoder::decode_vmla_vmlal_vmls_vmlsl_integer_t2, "VMLA, VMLAL, VMLS, VMLSL (integer)"},
    { 0xff800f10, 0xef000d10, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vmla_vmls_floating_point_t1, "VMLA, VMLS (floating-point)"},
    { 0xffb00e10, 0xee000a00, VFPv2 | VFPv3 | VFPv4, eSize32, eEncodingT2, &ARMDecoder::decode_vmla_vmls_floating_point_t2, "VMLA, VMLS (floating-point)"},
    { 0xef800a50, 0xef800040, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vmla_vmlal_vmls_vmlsl_by_scalar_t1, "VMLA, VMLAL, VMLS, VMLSL (by scalar)"},
    { 0xef800b50, 0xef800240, AdvancedSIMD, eSize32, eEncodingT2, &ARMDecoder::decode_vmla_vmlal_vmls_vmlsl_by_scalar_t2, "VMLA, VMLAL, VMLS, VMLSL (by scalar)"},
    { 0xefb80090, 0xef800010, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vmov_immediate_t1, "VMOV (immediate)"},
    { 0xffb00ef0, 0xeeb00a00, VFPv3 | VFPv4, eSize32, eEncodingT2, &ARMDecoder::decode_vmov_immediate_t2, "VMOV (immediate)"},
    { 0xffb00f10, 0xef200110, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vmov_register_t1, "VMOV (register)"},
    { 0xffbf0ed0, 0xeeb00a40, VFPv2 | VFPv3 | VFPv4, eSize32, eEncodingT2, &ARMDecoder::decode_vmov_register_t2, "VMOV (register)"},
    { 0xff900f1f, 0xee000b10, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vmov_arm_core_register_to_scalar_t1, "VMOV (ARM core register to scalar)"},
    { 0xff100f1f, 0xee100b10, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vmov_scalar_to_arm_core_register_t1, "VMOV (scalar to ARM core register)"},
    { 0xffe00f7f, 0xee000a10, VFPv2 | VFPv3 | VFPv4, eSize32, eEncodingT1, &ARMDecoder::decode_vmov_between_arm_core_register_and_single_precision_register_t1, "VMOV (between ARM core register and single-precision register)"},
    { 0xffe00fd0, 0xec400a10, VFPv2 | VFPv3 | VFPv4, eSize32, eEncodingT1, &ARMDecoder::decode_vmov_between_two_arm_core_registers_and_two_single_precision_registers_t1, "VMOV (between two ARM core registers and two single-precision registers)"},
    { 0xffe00fd0, 0xec400b10, VFPv2 | VFPv3 | VFPv4 | AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vmov_between_two_arm_core_registers_and_a_doubleword_extension_register_t1, "VMOV (between two ARM core registers and a doubleword extension register)"},
    { 0xef870fd0, 0xef800a10, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vmovl_t1, "VMOVL"},
    { 0xffb30fd0, 0xffb20200, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vmovn_t1, "VMOVN"},
    { 0xfff00fff, 0xeef00a10, VFPv2 | VFPv3 | VFPv4 | AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vmrs_t1, "VMRS"},
    { 0xfff00fff, 0xeee00a10, VFPv2 | VFPv3 | VFPv4 | AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vmsr_t1, "VMSR"},
    { 0xef800f10, 0xef000910, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vmul_vmull_integer_and_polynomial_t1, "VMUL, VMULL (integer and polynomial)"},
    { 0xef800d50, 0xef800c00, AdvancedSIMD, eSize32, eEncodingT2, &ARMDecoder::decode_vmul_vmull_integer_and_polynomial_t2, "VMUL, VMULL (integer and polynomial)"},
    { 0xffa00f10, 0xff000d10, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vmul_floating_point_t1, "VMUL (floating-point)"},
    { 0xffb00e50, 0xee200a00, VFPv2 | VFPv3 | VFPv4, eSize32, eEncodingT2, &ARMDecoder::decode_vmul_floating_point_t2, "VMUL (floating-point)"},
    { 0xef800e50, 0xef800840, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vmul_vmull_by_scalar_t1, "VMUL, VMULL (by scalar)"},
    { 0xef800f50, 0xef800a40, AdvancedSIMD, eSize32, eEncodingT2, &ARMDecoder::decode_vmul_vmull_by_scalar_t2, "VMUL, VMULL (by scalar)"},
    { 0xefb800b0, 0xef800030, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vmvn_immediate_t1, "VMVN (immediate)"},
    { 0xffb30f90, 0xffb00580, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vmvn_register_t1, "VMVN (register)"},
    { 0xffb30b90, 0xffb10380, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vneg_t1, "VNEG"},
    { 0xffbf0ed0, 0xeeb10a40, VFPv2 | VFPv3 | VFPv4, eSize32, eEncodingT2, &ARMDecoder::decode_vneg_t2, "VNEG"},
    { 0xffb00e10, 0xee100a00, VFPv2 | VFPv3 | VFPv4, eSize32, eEncodingT1, &ARMDecoder::decode_vnmla_vnmls_vnmul_t1, "VNMLA, VNMLS, VNMUL"},
    { 0xffb00e50, 0xee200a40, VFPv2 | VFPv3 | VFPv4, eSize32, eEncodingT2, &ARMDecoder::decode_vnmla_vnmls_vnmul_t2, "VNMLA, VNMLS, VNMUL"},
    { 0xffb00f10, 0xef300110, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vorn_register_t1, "VORN (register)"},
    { 0xefb800b0, 0xef800010, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vorr_immediate_t1, "VORR (immediate)"},
    { 0xffb00f10, 0xef200110, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vorr_register_t1, "VORR (register)"},
    { 0xffb30f10, 0xffb00600, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vpadal_t1, "VPADAL"},
    { 0xff800f10, 0xef000b10, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vpadd_integer_t1, "VPADD (integer)"},
    { 0xffa00f10, 0xff000d00, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vpadd_floating_point_t1, "VPADD (floating-point)"},
    { 0xffb30f10, 0xffb00200, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vpaddl_t1, "VPADDL"},
    { 0xef800f00, 0xef000a00, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vpmax_vpmin_integer_t1, "VPMAX, VPMIN (integer)"},
    { 0xff800f10, 0xff000f00, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vpmax_vpmin_floating_point_t1, "VPMAX, VPMIN (floating-point)"},
    { 0xffbf0f00, 0xecbd0b00, VFPv2 | VFPv3 | VFPv4 | AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vpop_t1, "VPOP"},
    { 0xffbf0f00, 0xecbd0a00, VFPv2 | VFPv3 | VFPv4, eSize32, eEncodingT2, &ARMDecoder::decode_vpop_t2, "VPOP"},
    { 0xffbf0f00, 0xed2d0b00, VFPv2 | VFPv3 | VFPv4 | AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vpush_t1, "VPUSH"},
    { 0xffbf0f00, 0xed2d0a00, VFPv2 | VFPv3 | VFPv4, eSize32, eEncodingT2, &ARMDecoder::decode_vpush_t2, "VPUSH"},
    { 0xffb30f90, 0xffb00700, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vqabs_t1, "VQABS"},
    { 0xef800f10, 0xef000010, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vqadd_t1, "VQADD"},
    { 0xff800d50, 0xef800900, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vqdmlal_vqdmlsl_t1, "VQDMLAL, VQDMLSL"},
    { 0xff800b50, 0xef800340, AdvancedSIMD, eSize32, eEncodingT2, &ARMDecoder::decode_vqdmlal_vqdmlsl_t2, "VQDMLAL, VQDMLSL"},
    { 0xff800f10, 0xef000b00, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vqdmulh_t1, "VQDMULH"},
    { 0xef800f50, 0xef800c40, AdvancedSIMD, eSize32, eEncodingT2, &ARMDecoder::decode_vqdmulh_t2, "VQDMULH"},
    { 0xff800f50, 0xef800d00, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vqdmull_t1, "VQDMULL"},
    { 0xff800f50, 0xef800b40, AdvancedSIMD, eSize32, eEncodingT2, &ARMDecoder::decode_vqdmull_t2, "VQDMULL"},
    { 0xffb30f10, 0xffb20200, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vqmovn_vqmovun_t1, "VQMOVN, VQMOVUN"},
    { 0xffb30f90, 0xffb00780, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vqneg_t1, "VQNEG"},
    { 0xff800f10, 0xff000b00, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vqrdmulh_t1, "VQRDMULH"},
    { 0xef800f50, 0xef800d40, AdvancedSIMD, eSize32, eEncodingT2, &ARMDecoder::decode_vqrdmulh_t2, "VQRDMULH"},
    { 0xef800f10, 0xef000510, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vqrshl_t1, "VQRSHL"},
    { 0xef800ed0, 0xef800850, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vqrshrn_vqrshrun_t1, "VQRSHRN, VQRSHRUN"},
    { 0xef800f10, 0xef000410, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vqshl_register_t1, "VQSHL (register)"},
    { 0xef800e10, 0xef800610, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vqshl_vqshlu_immediate_t1, "VQSHL, VQSHLU (immediate)"},
    { 0xef800ed0, 0xef800810, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vqshrn_vqshrun_t1, "VQSHRN, VQSHRUN"},
    { 0xef800f10, 0xef000210, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vqsub_t1, "VQSUB"},
    { 0xff800f50, 0xff800400, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vraddhn_t1, "VRADDHN"},
    { 0xffb30e90, 0xffb30400, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vrecpe_t1, "VRECPE"},
    { 0xffa00f10, 0xef000f10, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vrecps_t1, "VRECPS"},
    { 0xffb30e10, 0xffb00000, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vrev16_vrev32_vrev64_t1, "VREV16, VREV32, VREV64"},
    { 0xef800f10, 0xef000100, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vrhadd_t1, "VRHADD"},
    { 0xef800f10, 0xef000500, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vrshl_t1, "VRSHL"},
    { 0xef800f10, 0xef800210, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vrshr_t1, "VRSHR"},
    { 0xff800fd0, 0xef800850, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vrshrn_t1, "VRSHRN"},
    { 0xffb30e90, 0xffb30480, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vrsqrte_t1, "VRSQRTE"},
    { 0xffa00f10, 0xef200f10, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vrsqrts_t1, "VRSQRTS"},
    { 0xef800f10, 0xef800310, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vrsra_t1, "VRSRA"},
    { 0xff800f50, 0xff800600, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vrsubhn_t1, "VRSUBHN"},
    { 0xff800f10, 0xef800510, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vshl_immediate_t1, "VSHL (immediate)"},
    { 0xef800f10, 0xef000400, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vshl_register_t1, "VSHL (register)"},
    { 0xef800fd0, 0xef800a10, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vshll_t1, "VSHLL"},
    { 0xffb30fd0, 0xffb20300, AdvancedSIMD, eSize32, eEncodingT2, &ARMDecoder::decode_vshll_t2, "VSHLL"},
    { 0xef800f10, 0xef800010, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vshr_t1, "VSHR"},
    { 0xff800fd0, 0xef800810, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vshrn_t1, "VSHRN"},
    { 0xff800f10, 0xff800510, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vsli_t1, "VSLI"},
    { 0xffbf0ed0, 0xeeb10ac0, VFPv2 | VFPv3 | VFPv4, eSize32, eEncodingT1, &ARMDecoder::decode_vsqrt_t1, "VSQRT"},
    { 0xef800f10, 0xef800110, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vsra_t1, "VSRA"},
    { 0xff800f10, 0xff800410, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vsri_t1, "VSRI"},
    { 0xffb00000, 0xf9000000, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vst1_multiple_single_elements_t1, "VST1 (multiple single elements)"},
    { 0xffb00300, 0xf9800000, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vst1_single_element_from_one_lane_t1, "VST1 (single element from one lane)"},
    { 0xffb00000, 0xf9000000, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vst2_multiple_2_element_structures_t1, "VST2 (multiple 2-element structures)"},
    { 0xffb00300, 0xf9800100, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vst2_single_2_element_structure_from_one_lane_t1, "VST2 (single 2-element structure from one lane)"},
    { 0xffb00000, 0xf9000000, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vst3_multiple_3_element_structures_t1, "VST3 (multiple 3-element structures)"},
    { 0xffb00300, 0xf9800200, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vst3_single_3_element_structure_from_one_lane_t1, "VST3 (single 3-element structure from one lane)"},
    { 0xffb00000, 0xf9000000, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vst4_multiple_4_element_structures_t1, "VST4 (multiple 4-element structures)"},
    { 0xffb00300, 0xf9800300, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vst4_single_4_element_structure_from_one_lane_t1, "VST4 (single 4-element structure from one lane)"},
    { 0xfe100f00, 0xec000b00, VFPv2 | VFPv3 | VFPv4 | AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vstm_t1, "VSTM"},
    { 0xfe100f00, 0xec000a00, VFPv2 | VFPv3 | VFPv4, eSize32, eEncodingT2, &ARMDecoder::decode_vstm_t2, "VSTM"},
    { 0xff300f00, 0xed000b00, VFPv2 | VFPv3 | VFPv4 | AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vstr_t1, "VSTR"},
    { 0xff300f00, 0xed000a00, VFPv2 | VFPv3 | VFPv4, eSize32, eEncodingT2, &ARMDecoder::decode_vstr_t2, "VSTR"},
    { 0xff800f10, 0xff000800, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vsub_integer_t1, "VSUB (integer)"},
    { 0xffa00f10, 0xef200d00, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vsub_floating_point_t1, "VSUB (floating-point)"},
    { 0xffb00e50, 0xee300a40, VFPv2 | VFPv3 | VFPv4, eSize32, eEncodingT2, &ARMDecoder::decode_vsub_floating_point_t2, "VSUB (floating-point)"},
    { 0xff800f50, 0xef800600, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vsubhn_t1, "VSUBHN"},
    { 0xef800e50, 0xef800200, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vsubl_vsubw_t1, "VSUBL, VSUBW"},
    { 0xffb30f90, 0xffb20000, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vswp_t1, "VSWP"},
    { 0xffb00c10, 0xffb00800, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vtbl_vtbx_t1, "VTBL, VTBX"},
    { 0xffb30f90, 0xffb20080, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vtrn_t1, "VTRN"},
    { 0xff800f10, 0xef000810, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vtst_t1, "VTST"},
    { 0xffb30f90, 0xffb20100, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vuzp_t1, "VUZP"},
    { 0xffb30f90, 0xffb20180, AdvancedSIMD, eSize32, eEncodingT1, &ARMDecoder::decode_vzip_t1, "VZIP"},
    { 0x00000000, 0x00000000, ARMvAll, eSize32, eEncodingA1, &ARMDecoder::decode_unknown, "UNKNOWN"}
};

ARMInstruction ARMDecoder::decode_unknown(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    return UnknownInstruction {};
}

const size_t n_thumb_opcodes = sizeof(thumb_opcodes) / sizeof(thumb_opcodes[0]);
ARMInstruction ARMDecoder::decode_thumb(uint32_t op_code) {
    for (size_t i = 0; i < n_thumb_opcodes; ++i) {
        if (IS_THUMB_VFP_OR_ASIMD(op_code) && !((thumb_opcodes[i].variants & AdvancedSIMDAll) || (thumb_opcodes[i].variants & VFPAll)))
            continue;

        if ((thumb_opcodes[i].mask & op_code) == thumb_opcodes[i].value && (thumb_opcodes[i].variants & m_arm_isa) != 0) {
            ARMOpcode *opcode = &thumb_opcodes[i];
            ARMInstruction ins = (this->*opcode->decoder)(op_code, opcode->ins_size, opcode->encoding);

            // Skip instruction when there is a SEE command.
            if (!ins.m_skip) {
                return ins;
            }
        }
    }

    return UnknownInstruction {};
}

ARMInstruction ARMDecoder::decode_adc_immediate_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     i = get_bit(opcode, 26);
    int     S = get_bit(opcode, 20);
    int    Rn = get_bits(opcode, 19, 16);
    int  imm3 = get_bits(opcode, 14, 12);
    int    Rd = get_bits(opcode, 11,  8);
    int  imm8 = get_bits(opcode,  7,  0);
    int setflags = 0;
    int imm32 = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    setflags = (S == 1);
    imm32 = ThumbExpandImm(Concatenate(Concatenate(i, imm3, 3), imm8, 8));
    if (unlikely(((d == 13 || d == 15) || (n == 13 || n == 15)))) {
        return UnpredictableInstruction("Reason: ((d == 13 || d == 15) || (n == 13 || n == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = adc_immediate;
    ins.m_to_string = decode_adc_immediate_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_adc_immediate_t1";
    ins.encoding = encoding;
    ins.setflags = setflags;
    ins.imm32 = imm32;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_adc_immediate_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     S = get_bit(opcode, 20);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int imm12 = get_bits(opcode, 11,  0);
    int setflags = 0;
    int imm32 = 0;
    int d = 0;
    int n = 0;

    if (unlikely(((Rd == 15) && (S == 1)))) {
        return SeeInstruction("SUBS PC, LR and related instructions");
    }
    d = UInt(Rd);
    n = UInt(Rn);
    setflags = (S == 1);
    imm32 = ARMExpandImm(imm12);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = adc_immediate;
    ins.m_to_string = decode_adc_immediate_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_adc_immediate_a1";
    ins.encoding = encoding;
    ins.setflags = setflags;
    ins.imm32 = imm32;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_adc_register_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rm = get_bits(opcode,  5,  3);
    int   Rdn = get_bits(opcode,  2,  0);
    int shift_t = 0;
    int d = 0;
    int m = 0;
    int n = 0;
    int shift_n = 0;
    int setflags = 0;

    d = UInt(Rdn);
    n = UInt(Rdn);
    m = UInt(Rm);
    setflags = !InITBlock();
    shift_t = SRType_LSL, shift_n = 0;
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = adc_register;
    ins.m_to_string = decode_adc_register_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_adc_register_t1";
    ins.encoding = encoding;
    ins.shift_t = shift_t;
    ins.d = d;
    ins.m = m;
    ins.n = n;
    ins.shift_n = shift_n;
    ins.setflags = setflags;

    return ins;
}

ARMInstruction ARMDecoder::decode_adc_register_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     S = get_bit(opcode, 20);
    int    Rn = get_bits(opcode, 19, 16);
    int  imm3 = get_bits(opcode, 14, 12);
    int    Rd = get_bits(opcode, 11,  8);
    int  imm2 = get_bits(opcode,  7,  6);
    int  type = get_bits(opcode,  5,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int shift_t = 0;
    int d = 0;
    int m = 0;
    int n = 0;
    int shift_n = 0;
    int setflags = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    setflags = (S == 1);
    std::tie(shift_t, shift_n) = DecodeImmShift(type, Concatenate(imm3, imm2, 2));
    if (unlikely((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = adc_register;
    ins.m_to_string = decode_adc_register_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_adc_register_t2";
    ins.encoding = encoding;
    ins.shift_t = shift_t;
    ins.d = d;
    ins.m = m;
    ins.n = n;
    ins.shift_n = shift_n;
    ins.setflags = setflags;
    ins.type = type;

    return ins;
}

ARMInstruction ARMDecoder::decode_adc_register_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     S = get_bit(opcode, 20);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int  imm5 = get_bits(opcode, 11,  7);
    int  type = get_bits(opcode,  6,  5);
    int    Rm = get_bits(opcode,  3,  0);
    int shift_t = 0;
    int d = 0;
    int m = 0;
    int n = 0;
    int shift_n = 0;
    int setflags = 0;

    if (unlikely(((Rd == 15) && (S == 1)))) {
        return SeeInstruction("SUBS PC, LR and related instructions");
    }
    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    setflags = (S == 1);
    std::tie(shift_t, shift_n) = DecodeImmShift(type, imm5);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = adc_register;
    ins.m_to_string = decode_adc_register_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_adc_register_a1";
    ins.encoding = encoding;
    ins.shift_t = shift_t;
    ins.d = d;
    ins.m = m;
    ins.n = n;
    ins.shift_n = shift_n;
    ins.setflags = setflags;
    ins.cond = cond;
    ins.type = type;

    return ins;
}

ARMInstruction ARMDecoder::decode_adc_register_shifted_register_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     S = get_bit(opcode, 20);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int    Rs = get_bits(opcode, 11,  8);
    int  type = get_bits(opcode,  6,  5);
    int    Rm = get_bits(opcode,  3,  0);
    int shift_t = 0;
    int d = 0;
    int m = 0;
    int n = 0;
    int s = 0;
    int setflags = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    s = UInt(Rs);
    setflags = (S == 1);
    shift_t = DecodeRegShift(type);
    if (unlikely(((((d == 15) || (n == 15)) || (m == 15)) || (s == 15)))) {
        return UnpredictableInstruction("Reason: ((((d == 15) || (n == 15)) || (m == 15)) || (s == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = adc_register_shifted_register;
    ins.m_to_string = decode_adc_register_shifted_register_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_adc_register_shifted_register_a1";
    ins.encoding = encoding;
    ins.shift_t = shift_t;
    ins.d = d;
    ins.m = m;
    ins.n = n;
    ins.s = s;
    ins.setflags = setflags;
    ins.cond = cond;
    ins.type = type;

    return ins;
}

ARMInstruction ARMDecoder::decode_add_immediate_thumb_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  imm3 = get_bits(opcode,  8,  6);
    int    Rn = get_bits(opcode,  5,  3);
    int    Rd = get_bits(opcode,  2,  0);
    int setflags = 0;
    int imm32 = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    setflags = !InITBlock();
    imm32 = ZeroExtend(imm3, 32);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = add_immediate_thumb;
    ins.m_to_string = decode_add_immediate_thumb_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_add_immediate_thumb_t1";
    ins.encoding = encoding;
    ins.setflags = setflags;
    ins.imm32 = imm32;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_add_immediate_thumb_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int   Rdn = get_bits(opcode, 10,  8);
    int  imm8 = get_bits(opcode,  7,  0);
    int setflags = 0;
    int imm32 = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rdn);
    n = UInt(Rdn);
    setflags = !InITBlock();
    imm32 = ZeroExtend(imm8, 32);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = add_immediate_thumb;
    ins.m_to_string = decode_add_immediate_thumb_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_add_immediate_thumb_t2";
    ins.encoding = encoding;
    ins.setflags = setflags;
    ins.imm32 = imm32;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_add_immediate_thumb_t3(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     i = get_bit(opcode, 26);
    int     S = get_bit(opcode, 20);
    int    Rn = get_bits(opcode, 19, 16);
    int  imm3 = get_bits(opcode, 14, 12);
    int    Rd = get_bits(opcode, 11,  8);
    int  imm8 = get_bits(opcode,  7,  0);
    int setflags = 0;
    int imm32 = 0;
    int d = 0;
    int n = 0;

    if (unlikely(((Rd == 15) && (S == 1)))) {
        return SeeInstruction("CMN (immediate)");
    }
    if (unlikely((Rn == 13))) {
        return SeeInstruction("ADD (SP plus immediate)");
    }
    d = UInt(Rd);
    n = UInt(Rn);
    setflags = (S == 1);
    imm32 = ThumbExpandImm(Concatenate(Concatenate(i, imm3, 3), imm8, 8));
    if (unlikely((((d == 13) || ((d == 15) && (S == 0))) || (n == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 13) || ((d == 15) && (S == 0))) || (n == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = add_immediate_thumb;
    ins.m_to_string = decode_add_immediate_thumb_t3_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_add_immediate_thumb_t3";
    ins.encoding = encoding;
    ins.setflags = setflags;
    ins.imm32 = imm32;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_add_immediate_thumb_t4(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     i = get_bit(opcode, 26);
    int    Rn = get_bits(opcode, 19, 16);
    int  imm3 = get_bits(opcode, 14, 12);
    int    Rd = get_bits(opcode, 11,  8);
    int  imm8 = get_bits(opcode,  7,  0);
    int setflags = 0;
    int imm32 = 0;
    int d = 0;
    int n = 0;

    if (unlikely((Rn == 15))) {
        return SeeInstruction("ADR");
    }
    if (unlikely((Rn == 13))) {
        return SeeInstruction("ADD (SP plus immediate)");
    }
    d = UInt(Rd);
    n = UInt(Rn);
    setflags = false;
    imm32 = ZeroExtend(Concatenate(Concatenate(i, imm3, 3), imm8, 8), 32);
    if (unlikely((d == 13 || d == 15))) {
        return UnpredictableInstruction("Reason: (d == 13 || d == 15)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = add_immediate_thumb;
    ins.m_to_string = decode_add_immediate_thumb_t4_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_add_immediate_thumb_t4";
    ins.encoding = encoding;
    ins.setflags = setflags;
    ins.imm32 = imm32;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_add_immediate_arm_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     S = get_bit(opcode, 20);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int imm12 = get_bits(opcode, 11,  0);
    int setflags = 0;
    int imm32 = 0;
    int d = 0;
    int n = 0;

    if (unlikely(((Rn == 15) && (S == 0)))) {
        return SeeInstruction("ADR");
    }
    if (unlikely((Rn == 13))) {
        return SeeInstruction("ADD (SP plus immediate)");
    }
    if (unlikely(((Rd == 15) && (S == 1)))) {
        return SeeInstruction("SUBS PC, LR and related instructions");
    }
    d = UInt(Rd);
    n = UInt(Rn);
    setflags = (S == 1);
    imm32 = ARMExpandImm(imm12);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = add_immediate_arm;
    ins.m_to_string = decode_add_immediate_arm_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_add_immediate_arm_a1";
    ins.encoding = encoding;
    ins.setflags = setflags;
    ins.imm32 = imm32;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_add_register_thumb_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rm = get_bits(opcode,  8,  6);
    int    Rn = get_bits(opcode,  5,  3);
    int    Rd = get_bits(opcode,  2,  0);
    int shift_t = 0;
    int d = 0;
    int m = 0;
    int n = 0;
    int shift_n = 0;
    int setflags = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    setflags = !InITBlock();
    shift_t = SRType_LSL, shift_n = 0;
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = add_register_thumb;
    ins.m_to_string = decode_add_register_thumb_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_add_register_thumb_t1";
    ins.encoding = encoding;
    ins.shift_t = shift_t;
    ins.d = d;
    ins.m = m;
    ins.n = n;
    ins.shift_n = shift_n;
    ins.setflags = setflags;

    return ins;
}

ARMInstruction ARMDecoder::decode_add_register_thumb_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    DN = get_bit(opcode,  7);
    int    Rm = get_bits(opcode,  6,  3);
    int   Rdn = get_bits(opcode,  2,  0);
    int shift_t = 0;
    int d = 0;
    int m = 0;
    int n = 0;
    int shift_n = 0;
    int setflags = 0;

    if (unlikely(((Concatenate(DN, Rdn, 3) == 13) || (Rm == 13)))) {
        return SeeInstruction("ADD (SP plus register, Thumb)");
    }
    d = UInt(Concatenate(DN, Rdn, 3));
    n = d;
    m = UInt(Rm);
    setflags = false;
    shift_t = SRType_LSL, shift_n = 0;
    if (unlikely(((n == 15) && (m == 15)))) {
        return UnpredictableInstruction("Reason: ((n == 15) && (m == 15))");
    }
    if (unlikely((((d == 15) && InITBlock()) && !LastInITBlock()))) {
        return UnpredictableInstruction("Reason: (((d == 15) && InITBlock()) && !LastInITBlock())");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = add_register_thumb;
    ins.m_to_string = decode_add_register_thumb_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_add_register_thumb_t2";
    ins.encoding = encoding;
    ins.shift_t = shift_t;
    ins.d = d;
    ins.m = m;
    ins.n = n;
    ins.shift_n = shift_n;
    ins.setflags = setflags;

    return ins;
}

ARMInstruction ARMDecoder::decode_add_register_thumb_t3(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     S = get_bit(opcode, 20);
    int    Rn = get_bits(opcode, 19, 16);
    int  imm3 = get_bits(opcode, 14, 12);
    int    Rd = get_bits(opcode, 11,  8);
    int  imm2 = get_bits(opcode,  7,  6);
    int  type = get_bits(opcode,  5,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int shift_t = 0;
    int d = 0;
    int m = 0;
    int n = 0;
    int shift_n = 0;
    int setflags = 0;

    if (unlikely(((Rd == 15) && (S == 1)))) {
        return SeeInstruction("CMN (register)");
    }
    if (unlikely((Rn == 13))) {
        return SeeInstruction("ADD (SP plus register, Thumb)");
    }
    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    setflags = (S == 1);
    std::tie(shift_t, shift_n) = DecodeImmShift(type, Concatenate(imm3, imm2, 2));
    if (unlikely(((((d == 13) || ((d == 15) && (S == 0))) || (n == 15)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: ((((d == 13) || ((d == 15) && (S == 0))) || (n == 15)) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = add_register_thumb;
    ins.m_to_string = decode_add_register_thumb_t3_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_add_register_thumb_t3";
    ins.encoding = encoding;
    ins.shift_t = shift_t;
    ins.d = d;
    ins.m = m;
    ins.n = n;
    ins.shift_n = shift_n;
    ins.setflags = setflags;
    ins.type = type;

    return ins;
}

ARMInstruction ARMDecoder::decode_add_register_arm_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     S = get_bit(opcode, 20);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int  imm5 = get_bits(opcode, 11,  7);
    int  type = get_bits(opcode,  6,  5);
    int    Rm = get_bits(opcode,  3,  0);
    int shift_t = 0;
    int d = 0;
    int m = 0;
    int n = 0;
    int shift_n = 0;
    int setflags = 0;

    if (unlikely(((Rd == 15) && (S == 1)))) {
        return SeeInstruction("SUBS PC, LR and related instructions");
    }
    if (unlikely((Rn == 13))) {
        return SeeInstruction("ADD (SP plus register, ARM)");
    }
    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    setflags = (S == 1);
    std::tie(shift_t, shift_n) = DecodeImmShift(type, imm5);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = add_register_arm;
    ins.m_to_string = decode_add_register_arm_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_add_register_arm_a1";
    ins.encoding = encoding;
    ins.shift_t = shift_t;
    ins.d = d;
    ins.m = m;
    ins.n = n;
    ins.shift_n = shift_n;
    ins.setflags = setflags;
    ins.cond = cond;
    ins.type = type;

    return ins;
}

ARMInstruction ARMDecoder::decode_add_register_shifted_register_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     S = get_bit(opcode, 20);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int    Rs = get_bits(opcode, 11,  8);
    int  type = get_bits(opcode,  6,  5);
    int    Rm = get_bits(opcode,  3,  0);
    int shift_t = 0;
    int d = 0;
    int m = 0;
    int n = 0;
    int s = 0;
    int setflags = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    s = UInt(Rs);
    setflags = (S == 1);
    shift_t = DecodeRegShift(type);
    if (unlikely(((((d == 15) || (n == 15)) || (m == 15)) || (s == 15)))) {
        return UnpredictableInstruction("Reason: ((((d == 15) || (n == 15)) || (m == 15)) || (s == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = add_register_shifted_register;
    ins.m_to_string = decode_add_register_shifted_register_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_add_register_shifted_register_a1";
    ins.encoding = encoding;
    ins.shift_t = shift_t;
    ins.d = d;
    ins.m = m;
    ins.n = n;
    ins.s = s;
    ins.setflags = setflags;
    ins.cond = cond;
    ins.type = type;

    return ins;
}

ARMInstruction ARMDecoder::decode_add_sp_plus_immediate_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rd = get_bits(opcode, 10,  8);
    int  imm8 = get_bits(opcode,  7,  0);
    int setflags = 0;
    int d = 0;
    int imm32 = 0;

    d = UInt(Rd);
    setflags = false;
    imm32 = ZeroExtend(Concatenate(imm8, 0, 2), 32);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = add_sp_plus_immediate;
    ins.m_to_string = decode_add_sp_plus_immediate_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_add_sp_plus_immediate_t1";
    ins.encoding = encoding;
    ins.setflags = setflags;
    ins.d = d;
    ins.imm32 = imm32;

    return ins;
}

ARMInstruction ARMDecoder::decode_add_sp_plus_immediate_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  imm7 = get_bits(opcode,  6,  0);
    int setflags = 0;
    int d = 0;
    int imm32 = 0;

    d = 13;
    setflags = false;
    imm32 = ZeroExtend(Concatenate(imm7, 0, 2), 32);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = add_sp_plus_immediate;
    ins.m_to_string = decode_add_sp_plus_immediate_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_add_sp_plus_immediate_t2";
    ins.encoding = encoding;
    ins.setflags = setflags;
    ins.d = d;
    ins.imm32 = imm32;

    return ins;
}

ARMInstruction ARMDecoder::decode_add_sp_plus_immediate_t3(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     i = get_bit(opcode, 26);
    int     S = get_bit(opcode, 20);
    int  imm3 = get_bits(opcode, 14, 12);
    int    Rd = get_bits(opcode, 11,  8);
    int  imm8 = get_bits(opcode,  7,  0);
    int setflags = 0;
    int d = 0;
    int imm32 = 0;

    if (unlikely(((Rd == 15) && (S == 1)))) {
        return SeeInstruction("CMN (immediate)");
    }
    d = UInt(Rd);
    setflags = (S == 1);
    imm32 = ThumbExpandImm(Concatenate(Concatenate(i, imm3, 3), imm8, 8));
    if (unlikely(((d == 15) && (S == 0)))) {
        return UnpredictableInstruction("Reason: ((d == 15) && (S == 0))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = add_sp_plus_immediate;
    ins.m_to_string = decode_add_sp_plus_immediate_t3_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_add_sp_plus_immediate_t3";
    ins.encoding = encoding;
    ins.setflags = setflags;
    ins.d = d;
    ins.imm32 = imm32;

    return ins;
}

ARMInstruction ARMDecoder::decode_add_sp_plus_immediate_t4(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     i = get_bit(opcode, 26);
    int  imm3 = get_bits(opcode, 14, 12);
    int    Rd = get_bits(opcode, 11,  8);
    int  imm8 = get_bits(opcode,  7,  0);
    int setflags = 0;
    int d = 0;
    int imm32 = 0;

    d = UInt(Rd);
    setflags = false;
    imm32 = ZeroExtend(Concatenate(Concatenate(i, imm3, 3), imm8, 8), 32);
    if (unlikely((d == 15))) {
        return UnpredictableInstruction("Reason: (d == 15)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = add_sp_plus_immediate;
    ins.m_to_string = decode_add_sp_plus_immediate_t4_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_add_sp_plus_immediate_t4";
    ins.encoding = encoding;
    ins.setflags = setflags;
    ins.d = d;
    ins.imm32 = imm32;

    return ins;
}

ARMInstruction ARMDecoder::decode_add_sp_plus_immediate_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     S = get_bit(opcode, 20);
    int    Rd = get_bits(opcode, 15, 12);
    int imm12 = get_bits(opcode, 11,  0);
    int setflags = 0;
    int d = 0;
    int imm32 = 0;

    if (unlikely(((Rd == 15) && (S == 1)))) {
        return SeeInstruction("SUBS PC, LR and related instructions");
    }
    d = UInt(Rd);
    setflags = (S == 1);
    imm32 = ARMExpandImm(imm12);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = add_sp_plus_immediate;
    ins.m_to_string = decode_add_sp_plus_immediate_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_add_sp_plus_immediate_a1";
    ins.encoding = encoding;
    ins.setflags = setflags;
    ins.d = d;
    ins.imm32 = imm32;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_add_sp_plus_register_thumb_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    DM = get_bit(opcode,  7);
    int   Rdm = get_bits(opcode,  2,  0);
    int shift_n = 0;
    int setflags = 0;
    int shift_t = 0;
    int m = 0;
    int d = 0;

    d = UInt(Concatenate(DM, Rdm, 3));
    m = UInt(Concatenate(DM, Rdm, 3));
    setflags = false;
    if (unlikely((((d == 15) && InITBlock()) && !LastInITBlock()))) {
        return UnpredictableInstruction("Reason: (((d == 15) && InITBlock()) && !LastInITBlock())");
    }
    shift_t = SRType_LSL, shift_n = 0;
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = add_sp_plus_register_thumb;
    ins.m_to_string = decode_add_sp_plus_register_thumb_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_add_sp_plus_register_thumb_t1";
    ins.encoding = encoding;
    ins.shift_n = shift_n;
    ins.setflags = setflags;
    ins.shift_t = shift_t;
    ins.m = m;
    ins.d = d;

    return ins;
}

ARMInstruction ARMDecoder::decode_add_sp_plus_register_thumb_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rm = get_bits(opcode,  6,  3);
    int shift_n = 0;
    int setflags = 0;
    int shift_t = 0;
    int m = 0;
    int d = 0;

    if (unlikely((Rm == 13))) {
        return SeeInstruction("encoding T1");
    }
    d = 13;
    m = UInt(Rm);
    setflags = false;
    shift_t = SRType_LSL, shift_n = 0;
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = add_sp_plus_register_thumb;
    ins.m_to_string = decode_add_sp_plus_register_thumb_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_add_sp_plus_register_thumb_t2";
    ins.encoding = encoding;
    ins.shift_n = shift_n;
    ins.setflags = setflags;
    ins.shift_t = shift_t;
    ins.m = m;
    ins.d = d;

    return ins;
}

ARMInstruction ARMDecoder::decode_add_sp_plus_register_thumb_t3(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     S = get_bit(opcode, 20);
    int  imm3 = get_bits(opcode, 14, 12);
    int    Rd = get_bits(opcode, 11,  8);
    int  imm2 = get_bits(opcode,  7,  6);
    int  type = get_bits(opcode,  5,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int shift_n = 0;
    int setflags = 0;
    int shift_t = 0;
    int m = 0;
    int d = 0;

    if (unlikely(((Rd == 15) && (S == 1)))) {
        return SeeInstruction("CMN (register)");
    }
    d = UInt(Rd);
    m = UInt(Rm);
    setflags = (S == 1);
    std::tie(shift_t, shift_n) = DecodeImmShift(type, Concatenate(imm3, imm2, 2));
    if (unlikely(((d == 13) && ((shift_t != SRType_LSL) || (shift_n > 3))))) {
        return UnpredictableInstruction("Reason: ((d == 13) && ((shift_t != SRType_LSL) || (shift_n > 3)))");
    }
    if (unlikely((((d == 15) && (S == 0)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 15) && (S == 0)) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = add_sp_plus_register_thumb;
    ins.m_to_string = decode_add_sp_plus_register_thumb_t3_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_add_sp_plus_register_thumb_t3";
    ins.encoding = encoding;
    ins.shift_n = shift_n;
    ins.setflags = setflags;
    ins.shift_t = shift_t;
    ins.m = m;
    ins.d = d;
    ins.type = type;

    return ins;
}

ARMInstruction ARMDecoder::decode_add_sp_plus_register_arm_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     S = get_bit(opcode, 20);
    int    Rd = get_bits(opcode, 15, 12);
    int  imm5 = get_bits(opcode, 11,  7);
    int  type = get_bits(opcode,  6,  5);
    int    Rm = get_bits(opcode,  3,  0);
    int shift_n = 0;
    int setflags = 0;
    int shift_t = 0;
    int m = 0;
    int d = 0;

    if (unlikely(((Rd == 15) && (S == 1)))) {
        return SeeInstruction("SUBS PC, LR and related instructions");
    }
    d = UInt(Rd);
    m = UInt(Rm);
    setflags = (S == 1);
    std::tie(shift_t, shift_n) = DecodeImmShift(type, imm5);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = add_sp_plus_register_arm;
    ins.m_to_string = decode_add_sp_plus_register_arm_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_add_sp_plus_register_arm_a1";
    ins.encoding = encoding;
    ins.shift_n = shift_n;
    ins.setflags = setflags;
    ins.shift_t = shift_t;
    ins.m = m;
    ins.d = d;
    ins.cond = cond;
    ins.type = type;

    return ins;
}

ARMInstruction ARMDecoder::decode_adr_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rd = get_bits(opcode, 10,  8);
    int  imm8 = get_bits(opcode,  7,  0);
    int add = 0;
    int d = 0;
    int imm32 = 0;

    d = UInt(Rd);
    imm32 = ZeroExtend(Concatenate(imm8, 0, 2), 32);
    add = true;
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = adr;
    ins.m_to_string = decode_adr_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_adr_t1";
    ins.encoding = encoding;
    ins.add = add;
    ins.d = d;
    ins.imm32 = imm32;

    return ins;
}

ARMInstruction ARMDecoder::decode_adr_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     i = get_bit(opcode, 26);
    int  imm3 = get_bits(opcode, 14, 12);
    int    Rd = get_bits(opcode, 11,  8);
    int  imm8 = get_bits(opcode,  7,  0);
    int add = 0;
    int d = 0;
    int imm32 = 0;

    d = UInt(Rd);
    imm32 = ZeroExtend(Concatenate(Concatenate(i, imm3, 3), imm8, 8), 32);
    add = false;
    if (unlikely((d == 13 || d == 15))) {
        return UnpredictableInstruction("Reason: (d == 13 || d == 15)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = adr;
    ins.m_to_string = decode_adr_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_adr_t2";
    ins.encoding = encoding;
    ins.add = add;
    ins.d = d;
    ins.imm32 = imm32;

    return ins;
}

ARMInstruction ARMDecoder::decode_adr_t3(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     i = get_bit(opcode, 26);
    int  imm3 = get_bits(opcode, 14, 12);
    int    Rd = get_bits(opcode, 11,  8);
    int  imm8 = get_bits(opcode,  7,  0);
    int add = 0;
    int d = 0;
    int imm32 = 0;

    d = UInt(Rd);
    imm32 = ZeroExtend(Concatenate(Concatenate(i, imm3, 3), imm8, 8), 32);
    add = true;
    if (unlikely((d == 13 || d == 15))) {
        return UnpredictableInstruction("Reason: (d == 13 || d == 15)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = adr;
    ins.m_to_string = decode_adr_t3_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_adr_t3";
    ins.encoding = encoding;
    ins.add = add;
    ins.d = d;
    ins.imm32 = imm32;

    return ins;
}

ARMInstruction ARMDecoder::decode_adr_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rd = get_bits(opcode, 15, 12);
    int imm12 = get_bits(opcode, 11,  0);
    int add = 0;
    int d = 0;
    int imm32 = 0;

    d = UInt(Rd);
    imm32 = ARMExpandImm(imm12);
    add = true;
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = adr;
    ins.m_to_string = decode_adr_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_adr_a1";
    ins.encoding = encoding;
    ins.add = add;
    ins.d = d;
    ins.imm32 = imm32;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_adr_a2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rd = get_bits(opcode, 15, 12);
    int imm12 = get_bits(opcode, 11,  0);
    int add = 0;
    int d = 0;
    int imm32 = 0;

    d = UInt(Rd);
    imm32 = ARMExpandImm(imm12);
    add = false;
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = adr;
    ins.m_to_string = decode_adr_a2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_adr_a2";
    ins.encoding = encoding;
    ins.add = add;
    ins.d = d;
    ins.imm32 = imm32;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_and_immediate_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     i = get_bit(opcode, 26);
    int     S = get_bit(opcode, 20);
    int    Rn = get_bits(opcode, 19, 16);
    int  imm3 = get_bits(opcode, 14, 12);
    int    Rd = get_bits(opcode, 11,  8);
    int  imm8 = get_bits(opcode,  7,  0);
    int setflags = 0;
    int imm32 = 0;
    int imm12 = 0;
    int d = 0;
    int n = 0;

    if (unlikely(((Rd == 15) && (S == 1)))) {
        return SeeInstruction("TST (immediate)");
    }
    d = UInt(Rd);
    n = UInt(Rn);
    setflags = (S == 1);
    imm12 = Concatenate(Concatenate(i, imm3, 3), imm8, 8);
    imm32 = ThumbExpandImm(imm12);
    if (unlikely((((d == 13) || ((d == 15) && (S == 0))) || (n == 13 || n == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 13) || ((d == 15) && (S == 0))) || (n == 13 || n == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = and_immediate;
    ins.m_to_string = decode_and_immediate_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_and_immediate_t1";
    ins.encoding = encoding;
    ins.setflags = setflags;
    ins.imm32 = imm32;
    ins.imm12 = imm12;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_and_immediate_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     S = get_bit(opcode, 20);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int imm12 = get_bits(opcode, 11,  0);
    int setflags = 0;
    int imm32 = 0;
    int d = 0;
    int n = 0;

    if (unlikely(((Rd == 15) && (S == 1)))) {
        return SeeInstruction("SUBS PC, LR and related instructions");
    }
    d = UInt(Rd);
    n = UInt(Rn);
    setflags = (S == 1);
    imm32 = ARMExpandImm(imm12);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = and_immediate;
    ins.m_to_string = decode_and_immediate_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_and_immediate_a1";
    ins.encoding = encoding;
    ins.setflags = setflags;
    ins.imm32 = imm32;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_and_register_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rm = get_bits(opcode,  5,  3);
    int   Rdn = get_bits(opcode,  2,  0);
    int shift_t = 0;
    int d = 0;
    int m = 0;
    int n = 0;
    int shift_n = 0;
    int setflags = 0;

    d = UInt(Rdn);
    n = UInt(Rdn);
    m = UInt(Rm);
    setflags = !InITBlock();
    shift_t = SRType_LSL, shift_n = 0;
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = and_register;
    ins.m_to_string = decode_and_register_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_and_register_t1";
    ins.encoding = encoding;
    ins.shift_t = shift_t;
    ins.d = d;
    ins.m = m;
    ins.n = n;
    ins.shift_n = shift_n;
    ins.setflags = setflags;

    return ins;
}

ARMInstruction ARMDecoder::decode_and_register_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     S = get_bit(opcode, 20);
    int    Rn = get_bits(opcode, 19, 16);
    int  imm3 = get_bits(opcode, 14, 12);
    int    Rd = get_bits(opcode, 11,  8);
    int  imm2 = get_bits(opcode,  7,  6);
    int  type = get_bits(opcode,  5,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int shift_t = 0;
    int d = 0;
    int m = 0;
    int n = 0;
    int shift_n = 0;
    int setflags = 0;

    if (unlikely(((Rd == 15) && (S == 1)))) {
        return SeeInstruction("TST (register)");
    }
    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    setflags = (S == 1);
    std::tie(shift_t, shift_n) = DecodeImmShift(type, Concatenate(imm3, imm2, 2));
    if (unlikely(((((d == 13) || ((d == 15) && (S == 0))) || (n == 13 || n == 15)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: ((((d == 13) || ((d == 15) && (S == 0))) || (n == 13 || n == 15)) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = and_register;
    ins.m_to_string = decode_and_register_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_and_register_t2";
    ins.encoding = encoding;
    ins.shift_t = shift_t;
    ins.d = d;
    ins.m = m;
    ins.n = n;
    ins.shift_n = shift_n;
    ins.setflags = setflags;
    ins.type = type;

    return ins;
}

ARMInstruction ARMDecoder::decode_and_register_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     S = get_bit(opcode, 20);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int  imm5 = get_bits(opcode, 11,  7);
    int  type = get_bits(opcode,  6,  5);
    int    Rm = get_bits(opcode,  3,  0);
    int shift_t = 0;
    int d = 0;
    int m = 0;
    int n = 0;
    int shift_n = 0;
    int setflags = 0;

    if (unlikely(((Rd == 15) && (S == 1)))) {
        return SeeInstruction("SUBS PC, LR and related instructions");
    }
    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    setflags = (S == 1);
    std::tie(shift_t, shift_n) = DecodeImmShift(type, imm5);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = and_register;
    ins.m_to_string = decode_and_register_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_and_register_a1";
    ins.encoding = encoding;
    ins.shift_t = shift_t;
    ins.d = d;
    ins.m = m;
    ins.n = n;
    ins.shift_n = shift_n;
    ins.setflags = setflags;
    ins.cond = cond;
    ins.type = type;

    return ins;
}

ARMInstruction ARMDecoder::decode_and_register_shifted_register_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     S = get_bit(opcode, 20);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int    Rs = get_bits(opcode, 11,  8);
    int  type = get_bits(opcode,  6,  5);
    int    Rm = get_bits(opcode,  3,  0);
    int shift_t = 0;
    int d = 0;
    int m = 0;
    int n = 0;
    int s = 0;
    int setflags = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    s = UInt(Rs);
    setflags = (S == 1);
    shift_t = DecodeRegShift(type);
    if (unlikely(((((d == 15) || (n == 15)) || (m == 15)) || (s == 15)))) {
        return UnpredictableInstruction("Reason: ((((d == 15) || (n == 15)) || (m == 15)) || (s == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = and_register_shifted_register;
    ins.m_to_string = decode_and_register_shifted_register_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_and_register_shifted_register_a1";
    ins.encoding = encoding;
    ins.shift_t = shift_t;
    ins.d = d;
    ins.m = m;
    ins.n = n;
    ins.s = s;
    ins.setflags = setflags;
    ins.cond = cond;
    ins.type = type;

    return ins;
}

ARMInstruction ARMDecoder::decode_asr_immediate_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  imm5 = get_bits(opcode, 10,  6);
    int    Rm = get_bits(opcode,  5,  3);
    int    Rd = get_bits(opcode,  2,  0);
    int shift_n = 0;
    int setflags = 0;
    int m = 0;
    int d = 0;
    int ignored_0 = 0;

    d = UInt(Rd);
    m = UInt(Rm);
    setflags = !InITBlock();
    std::tie(ignored_0, shift_n) = DecodeImmShift(2, imm5);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = asr_immediate;
    ins.m_to_string = decode_asr_immediate_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_asr_immediate_t1";
    ins.encoding = encoding;
    ins.shift_n = shift_n;
    ins.setflags = setflags;
    ins.m = m;
    ins.d = d;

    return ins;
}

ARMInstruction ARMDecoder::decode_asr_immediate_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     S = get_bit(opcode, 20);
    int  imm3 = get_bits(opcode, 14, 12);
    int    Rd = get_bits(opcode, 11,  8);
    int  imm2 = get_bits(opcode,  7,  6);
    int    Rm = get_bits(opcode,  3,  0);
    int shift_n = 0;
    int setflags = 0;
    int m = 0;
    int d = 0;
    int ignored_0 = 0;

    d = UInt(Rd);
    m = UInt(Rm);
    setflags = (S == 1);
    std::tie(ignored_0, shift_n) = DecodeImmShift(2, Concatenate(imm3, imm2, 2));
    if (unlikely(((d == 13 || d == 15) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: ((d == 13 || d == 15) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = asr_immediate;
    ins.m_to_string = decode_asr_immediate_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_asr_immediate_t2";
    ins.encoding = encoding;
    ins.shift_n = shift_n;
    ins.setflags = setflags;
    ins.m = m;
    ins.d = d;

    return ins;
}

ARMInstruction ARMDecoder::decode_asr_immediate_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     S = get_bit(opcode, 20);
    int    Rd = get_bits(opcode, 15, 12);
    int  imm5 = get_bits(opcode, 11,  7);
    int    Rm = get_bits(opcode,  3,  0);
    int shift_n = 0;
    int setflags = 0;
    int m = 0;
    int d = 0;
    int ignored_0 = 0;

    if (unlikely(((Rd == 15) && (S == 1)))) {
        return SeeInstruction("SUBS PC, LR and related instructions");
    }
    d = UInt(Rd);
    m = UInt(Rm);
    setflags = (S == 1);
    std::tie(ignored_0, shift_n) = DecodeImmShift(2, imm5);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = asr_immediate;
    ins.m_to_string = decode_asr_immediate_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_asr_immediate_a1";
    ins.encoding = encoding;
    ins.shift_n = shift_n;
    ins.setflags = setflags;
    ins.m = m;
    ins.d = d;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_asr_register_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rm = get_bits(opcode,  5,  3);
    int   Rdn = get_bits(opcode,  2,  0);
    int setflags = 0;
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rdn);
    n = UInt(Rdn);
    m = UInt(Rm);
    setflags = !InITBlock();
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = asr_register;
    ins.m_to_string = decode_asr_register_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_asr_register_t1";
    ins.encoding = encoding;
    ins.setflags = setflags;
    ins.m = m;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_asr_register_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     S = get_bit(opcode, 20);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 11,  8);
    int    Rm = get_bits(opcode,  3,  0);
    int setflags = 0;
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    setflags = (S == 1);
    if (unlikely((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = asr_register;
    ins.m_to_string = decode_asr_register_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_asr_register_t2";
    ins.encoding = encoding;
    ins.setflags = setflags;
    ins.m = m;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_asr_register_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     S = get_bit(opcode, 20);
    int    Rd = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode, 11,  8);
    int    Rn = get_bits(opcode,  3,  0);
    int setflags = 0;
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    setflags = (S == 1);
    if (unlikely((((d == 15) || (n == 15)) || (m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 15) || (n == 15)) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = asr_register;
    ins.m_to_string = decode_asr_register_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_asr_register_a1";
    ins.encoding = encoding;
    ins.setflags = setflags;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_b_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 11,  8);
    int  imm8 = get_bits(opcode,  7,  0);
    int imm32 = 0;

    if (unlikely((cond == 14))) {
        return UndefinedInstruction("Reason: (cond == 14)");
    }
    if (unlikely((cond == 15))) {
        return SeeInstruction("SVC");
    }
    imm32 = SignExtend(Concatenate(imm8, 0, 1), 9);
    if (unlikely(InITBlock())) {
        return UnpredictableInstruction("Reason: InITBlock()");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = b;
    ins.m_to_string = decode_b_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_b_t1";
    ins.encoding = encoding;
    ins.imm32 = imm32;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_b_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int imm11 = get_bits(opcode, 10,  0);
    int imm32 = 0;

    imm32 = SignExtend(Concatenate(imm11, 0, 1), 12);
    if (unlikely((InITBlock() && !LastInITBlock()))) {
        return UnpredictableInstruction("Reason: (InITBlock() && !LastInITBlock())");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = b;
    ins.m_to_string = decode_b_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_b_t2";
    ins.encoding = encoding;
    ins.imm32 = imm32;

    return ins;
}

ARMInstruction ARMDecoder::decode_b_t3(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     S = get_bit(opcode, 26);
    int  cond = get_bits(opcode, 25, 22);
    int  imm6 = get_bits(opcode, 21, 16);
    int    J1 = get_bit(opcode, 13);
    int    J2 = get_bit(opcode, 11);
    int imm11 = get_bits(opcode, 10,  0);
    int imm32 = 0;

    if (unlikely((get_bits(cond, 3, 1) == 7))) {
        return SeeInstruction("Related encodings");
    }
    imm32 = SignExtend(Concatenate(Concatenate(Concatenate(Concatenate(Concatenate(S, J2, 1), J1, 1), imm6, 6), imm11, 11), 0, 1), 21);
    if (unlikely(InITBlock())) {
        return UnpredictableInstruction("Reason: InITBlock()");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = b;
    ins.m_to_string = decode_b_t3_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_b_t3";
    ins.encoding = encoding;
    ins.imm32 = imm32;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_b_t4(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     S = get_bit(opcode, 26);
    int imm10 = get_bits(opcode, 25, 16);
    int    J1 = get_bit(opcode, 13);
    int    J2 = get_bit(opcode, 11);
    int imm11 = get_bits(opcode, 10,  0);
    int I1 = 0;
    int I2 = 0;
    int imm32 = 0;

    I1 = NOT((J1 ^ S), 1);
    I2 = NOT((J2 ^ S), 1);
    imm32 = SignExtend(Concatenate(Concatenate(Concatenate(Concatenate(Concatenate(S, I1, 1), I2, 1), imm10, 10), imm11, 11), 0, 1), 25);
    if (unlikely((InITBlock() && !LastInITBlock()))) {
        return UnpredictableInstruction("Reason: (InITBlock() && !LastInITBlock())");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = b;
    ins.m_to_string = decode_b_t4_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_b_t4";
    ins.encoding = encoding;
    ins.I1 = I1;
    ins.I2 = I2;
    ins.imm32 = imm32;

    return ins;
}

ARMInstruction ARMDecoder::decode_bfc_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  imm3 = get_bits(opcode, 14, 12);
    int    Rd = get_bits(opcode, 11,  8);
    int  imm2 = get_bits(opcode,  7,  6);
    int   msb = get_bits(opcode,  4,  0);
    int msbit = 0;
    int d = 0;
    int lsbit = 0;

    d = UInt(Rd);
    msbit = UInt(msb);
    lsbit = UInt(Concatenate(imm3, imm2, 2));
    if (unlikely((d == 13 || d == 15))) {
        return UnpredictableInstruction("Reason: (d == 13 || d == 15)");
    }
    if (unlikely((msbit < lsbit))) {
        return UnpredictableInstruction("Reason: (msbit < lsbit)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = bfc;
    ins.m_to_string = decode_bfc_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_bfc_t1";
    ins.encoding = encoding;
    ins.msbit = msbit;
    ins.d = d;
    ins.lsbit = lsbit;

    return ins;
}

ARMInstruction ARMDecoder::decode_bfc_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int   msb = get_bits(opcode, 20, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int   lsb = get_bits(opcode, 11,  7);
    int msbit = 0;
    int d = 0;
    int lsbit = 0;

    d = UInt(Rd);
    msbit = UInt(msb);
    lsbit = UInt(lsb);
    if (unlikely((d == 15))) {
        return UnpredictableInstruction("Reason: (d == 15)");
    }
    if (unlikely((msbit < lsbit))) {
        return UnpredictableInstruction("Reason: (msbit < lsbit)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = bfc;
    ins.m_to_string = decode_bfc_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_bfc_a1";
    ins.encoding = encoding;
    ins.msbit = msbit;
    ins.d = d;
    ins.lsbit = lsbit;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_bfi_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int  imm3 = get_bits(opcode, 14, 12);
    int    Rd = get_bits(opcode, 11,  8);
    int  imm2 = get_bits(opcode,  7,  6);
    int   msb = get_bits(opcode,  4,  0);
    int msbit = 0;
    int d = 0;
    int lsbit = 0;
    int n = 0;

    if (unlikely((Rn == 15))) {
        return SeeInstruction("BFC");
    }
    d = UInt(Rd);
    n = UInt(Rn);
    msbit = UInt(msb);
    lsbit = UInt(Concatenate(imm3, imm2, 2));
    if (unlikely(((d == 13 || d == 15) || (n == 13)))) {
        return UnpredictableInstruction("Reason: ((d == 13 || d == 15) || (n == 13))");
    }
    if (unlikely((msbit < lsbit))) {
        return UnpredictableInstruction("Reason: (msbit < lsbit)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = bfi;
    ins.m_to_string = decode_bfi_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_bfi_t1";
    ins.encoding = encoding;
    ins.msbit = msbit;
    ins.d = d;
    ins.lsbit = lsbit;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_bfi_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int   msb = get_bits(opcode, 20, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int   lsb = get_bits(opcode, 11,  7);
    int    Rn = get_bits(opcode,  3,  0);
    int msbit = 0;
    int d = 0;
    int lsbit = 0;
    int n = 0;

    if (unlikely((Rn == 15))) {
        return SeeInstruction("BFC");
    }
    d = UInt(Rd);
    n = UInt(Rn);
    msbit = UInt(msb);
    lsbit = UInt(lsb);
    if (unlikely((d == 15))) {
        return UnpredictableInstruction("Reason: (d == 15)");
    }
    if (unlikely((msbit < lsbit))) {
        return UnpredictableInstruction("Reason: (msbit < lsbit)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = bfi;
    ins.m_to_string = decode_bfi_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_bfi_a1";
    ins.encoding = encoding;
    ins.msbit = msbit;
    ins.d = d;
    ins.lsbit = lsbit;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_bic_immediate_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     i = get_bit(opcode, 26);
    int     S = get_bit(opcode, 20);
    int    Rn = get_bits(opcode, 19, 16);
    int  imm3 = get_bits(opcode, 14, 12);
    int    Rd = get_bits(opcode, 11,  8);
    int  imm8 = get_bits(opcode,  7,  0);
    int setflags = 0;
    int imm32 = 0;
    int imm12 = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    setflags = (S == 1);
    imm12 = Concatenate(Concatenate(i, imm3, 3), imm8, 8);
    imm32 = ThumbExpandImm(imm12);
    if (unlikely(((d == 13 || d == 15) || (n == 13 || n == 15)))) {
        return UnpredictableInstruction("Reason: ((d == 13 || d == 15) || (n == 13 || n == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = bic_immediate;
    ins.m_to_string = decode_bic_immediate_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_bic_immediate_t1";
    ins.encoding = encoding;
    ins.setflags = setflags;
    ins.imm32 = imm32;
    ins.imm12 = imm12;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_bic_immediate_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     S = get_bit(opcode, 20);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int imm12 = get_bits(opcode, 11,  0);
    int setflags = 0;
    int imm32 = 0;
    int d = 0;
    int n = 0;

    if (unlikely(((Rd == 15) && (S == 1)))) {
        return SeeInstruction("SUBS PC, LR and related instructions");
    }
    d = UInt(Rd);
    n = UInt(Rn);
    setflags = (S == 1);
    imm32 = ARMExpandImm(imm12);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = bic_immediate;
    ins.m_to_string = decode_bic_immediate_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_bic_immediate_a1";
    ins.encoding = encoding;
    ins.setflags = setflags;
    ins.imm32 = imm32;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_bic_register_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rm = get_bits(opcode,  5,  3);
    int   Rdn = get_bits(opcode,  2,  0);
    int shift_t = 0;
    int d = 0;
    int m = 0;
    int n = 0;
    int shift_n = 0;
    int setflags = 0;

    d = UInt(Rdn);
    n = UInt(Rdn);
    m = UInt(Rm);
    setflags = !InITBlock();
    shift_t = SRType_LSL, shift_n = 0;
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = bic_register;
    ins.m_to_string = decode_bic_register_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_bic_register_t1";
    ins.encoding = encoding;
    ins.shift_t = shift_t;
    ins.d = d;
    ins.m = m;
    ins.n = n;
    ins.shift_n = shift_n;
    ins.setflags = setflags;

    return ins;
}

ARMInstruction ARMDecoder::decode_bic_register_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     S = get_bit(opcode, 20);
    int    Rn = get_bits(opcode, 19, 16);
    int  imm3 = get_bits(opcode, 14, 12);
    int    Rd = get_bits(opcode, 11,  8);
    int  imm2 = get_bits(opcode,  7,  6);
    int  type = get_bits(opcode,  5,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int shift_t = 0;
    int d = 0;
    int m = 0;
    int n = 0;
    int shift_n = 0;
    int setflags = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    setflags = (S == 1);
    std::tie(shift_t, shift_n) = DecodeImmShift(type, Concatenate(imm3, imm2, 2));
    if (unlikely((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = bic_register;
    ins.m_to_string = decode_bic_register_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_bic_register_t2";
    ins.encoding = encoding;
    ins.shift_t = shift_t;
    ins.d = d;
    ins.m = m;
    ins.n = n;
    ins.shift_n = shift_n;
    ins.setflags = setflags;
    ins.type = type;

    return ins;
}

ARMInstruction ARMDecoder::decode_bic_register_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     S = get_bit(opcode, 20);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int  imm5 = get_bits(opcode, 11,  7);
    int  type = get_bits(opcode,  6,  5);
    int    Rm = get_bits(opcode,  3,  0);
    int shift_t = 0;
    int d = 0;
    int m = 0;
    int n = 0;
    int shift_n = 0;
    int setflags = 0;

    if (unlikely(((Rd == 15) && (S == 1)))) {
        return SeeInstruction("SUBS PC, LR and related instructions");
    }
    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    setflags = (S == 1);
    std::tie(shift_t, shift_n) = DecodeImmShift(type, imm5);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = bic_register;
    ins.m_to_string = decode_bic_register_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_bic_register_a1";
    ins.encoding = encoding;
    ins.shift_t = shift_t;
    ins.d = d;
    ins.m = m;
    ins.n = n;
    ins.shift_n = shift_n;
    ins.setflags = setflags;
    ins.cond = cond;
    ins.type = type;

    return ins;
}

ARMInstruction ARMDecoder::decode_bic_register_shifted_register_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     S = get_bit(opcode, 20);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int    Rs = get_bits(opcode, 11,  8);
    int  type = get_bits(opcode,  6,  5);
    int    Rm = get_bits(opcode,  3,  0);
    int shift_t = 0;
    int d = 0;
    int m = 0;
    int n = 0;
    int s = 0;
    int setflags = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    s = UInt(Rs);
    setflags = (S == 1);
    shift_t = DecodeRegShift(type);
    if (unlikely(((((d == 15) || (n == 15)) || (m == 15)) || (s == 15)))) {
        return UnpredictableInstruction("Reason: ((((d == 15) || (n == 15)) || (m == 15)) || (s == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = bic_register_shifted_register;
    ins.m_to_string = decode_bic_register_shifted_register_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_bic_register_shifted_register_a1";
    ins.encoding = encoding;
    ins.shift_t = shift_t;
    ins.d = d;
    ins.m = m;
    ins.n = n;
    ins.s = s;
    ins.setflags = setflags;
    ins.cond = cond;
    ins.type = type;

    return ins;
}

ARMInstruction ARMDecoder::decode_bkpt_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  imm8 = get_bits(opcode,  7,  0);
    int imm32 = 0;

    imm32 = ZeroExtend(imm8, 32);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = bkpt;
    ins.m_to_string = decode_bkpt_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_bkpt_t1";
    ins.encoding = encoding;
    ins.imm32 = imm32;

    return ins;
}

ARMInstruction ARMDecoder::decode_bkpt_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int imm12 = get_bits(opcode, 19,  8);
    int  imm4 = get_bits(opcode,  3,  0);
    int imm32 = 0;

    imm32 = ZeroExtend(Concatenate(imm12, imm4, 4), 32);
    if (unlikely((cond != 14))) {
        return UnpredictableInstruction("Reason: (cond != 14)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = bkpt;
    ins.m_to_string = decode_bkpt_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_bkpt_a1";
    ins.encoding = encoding;
    ins.imm32 = imm32;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_bl_blx_immediate_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     S = get_bit(opcode, 26);
    int imm10 = get_bits(opcode, 25, 16);
    int    J1 = get_bit(opcode, 13);
    int    J2 = get_bit(opcode, 11);
    int imm11 = get_bits(opcode, 10,  0);
    int I1 = 0;
    int I2 = 0;
    int imm32 = 0;

    I1 = NOT((J1 ^ S), 1);
    I2 = NOT((J2 ^ S), 1);
    imm32 = SignExtend(Concatenate(Concatenate(Concatenate(Concatenate(Concatenate(S, I1, 1), I2, 1), imm10, 10), imm11, 11), 0, 1), 25);
    if (unlikely((InITBlock() && !LastInITBlock()))) {
        return UnpredictableInstruction("Reason: (InITBlock() && !LastInITBlock())");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = bl_blx_immediate;
    ins.m_to_string = decode_bl_blx_immediate_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_bl_blx_immediate_t1";
    ins.encoding = encoding;
    ins.I1 = I1;
    ins.I2 = I2;
    ins.imm32 = imm32;

    return ins;
}

ARMInstruction ARMDecoder::decode_bl_blx_immediate_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     S = get_bit(opcode, 26);
    int imm10H = get_bits(opcode, 25, 16);
    int    J1 = get_bit(opcode, 13);
    int    J2 = get_bit(opcode, 11);
    int imm10L = get_bits(opcode, 10,  1);
    int     H = get_bit(opcode,  0);
    int I1 = 0;
    int I2 = 0;
    int imm32 = 0;
    int targetInstrSet = 0;

    if (unlikely(((CurrentInstrSet() == InstrSet_ThumbEE) || (H == 1)))) {
        return UndefinedInstruction("Reason: ((CurrentInstrSet() == InstrSet_ThumbEE) || (H == 1))");
    }
    I1 = NOT((J1 ^ S), 1);
    I2 = NOT((J2 ^ S), 1);
    imm32 = SignExtend(Concatenate(Concatenate(Concatenate(Concatenate(Concatenate(S, I1, 1), I2, 1), imm10H, 10), imm10L, 10), 0, 2), 25);
    targetInstrSet = InstrSet_ARM;
    if (unlikely((InITBlock() && !LastInITBlock()))) {
        return UnpredictableInstruction("Reason: (InITBlock() && !LastInITBlock())");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = bl_blx_immediate;
    ins.m_to_string = decode_bl_blx_immediate_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_bl_blx_immediate_t2";
    ins.encoding = encoding;
    ins.I1 = I1;
    ins.I2 = I2;
    ins.imm32 = imm32;
    ins.targetInstrSet = targetInstrSet;

    return ins;
}

ARMInstruction ARMDecoder::decode_bl_blx_immediate_a2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     H = get_bit(opcode, 24);
    int imm24 = get_bits(opcode, 23,  0);
    int imm32 = 0;
    int targetInstrSet = 0;

    imm32 = SignExtend(Concatenate(Concatenate(imm24, H, 1), 0, 1), 26);
    targetInstrSet = InstrSet_Thumb;
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = bl_blx_immediate;
    ins.m_to_string = decode_bl_blx_immediate_a2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_bl_blx_immediate_a2";
    ins.encoding = encoding;
    ins.imm32 = imm32;
    ins.targetInstrSet = targetInstrSet;

    return ins;
}

ARMInstruction ARMDecoder::decode_bl_blx_immediate_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int imm24 = get_bits(opcode, 23,  0);
    int imm32 = 0;
    int targetInstrSet = 0;

    imm32 = SignExtend(Concatenate(imm24, 0, 2), 26);
    targetInstrSet = InstrSet_ARM;
    if (unlikely((cond == 15))) {
        return SeeInstruction("BL, BLX (immediate)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = bl_blx_immediate;
    ins.m_to_string = decode_bl_blx_immediate_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_bl_blx_immediate_a1";
    ins.encoding = encoding;
    ins.imm32 = imm32;
    ins.targetInstrSet = targetInstrSet;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_b_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int imm24 = get_bits(opcode, 23,  0);
    int imm32 = 0;

    imm32 = SignExtend(Concatenate(imm24, 0, 2), 26);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = b;
    ins.m_to_string = decode_b_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_b_a1";
    ins.encoding = encoding;
    ins.imm32 = imm32;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_blx_register_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rm = get_bits(opcode,  6,  3);
    int m = 0;

    m = UInt(Rm);
    if (unlikely((m == 15))) {
        return UnpredictableInstruction("Reason: (m == 15)");
    }
    if (unlikely((InITBlock() && !LastInITBlock()))) {
        return UnpredictableInstruction("Reason: (InITBlock() && !LastInITBlock())");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = blx_register;
    ins.m_to_string = decode_blx_register_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_blx_register_t1";
    ins.encoding = encoding;
    ins.m = m;

    return ins;
}

ARMInstruction ARMDecoder::decode_blx_register_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;

    m = UInt(Rm);
    if (unlikely((m == 15))) {
        return UnpredictableInstruction("Reason: (m == 15)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = blx_register;
    ins.m_to_string = decode_blx_register_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_blx_register_a1";
    ins.encoding = encoding;
    ins.m = m;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_bx_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rm = get_bits(opcode,  6,  3);
    int m = 0;

    m = UInt(Rm);
    if (unlikely((InITBlock() && !LastInITBlock()))) {
        return UnpredictableInstruction("Reason: (InITBlock() && !LastInITBlock())");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = bx;
    ins.m_to_string = decode_bx_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_bx_t1";
    ins.encoding = encoding;
    ins.m = m;

    return ins;
}

ARMInstruction ARMDecoder::decode_bx_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;

    m = UInt(Rm);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = bx;
    ins.m_to_string = decode_bx_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_bx_a1";
    ins.encoding = encoding;
    ins.m = m;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_bxj_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rm = get_bits(opcode, 19, 16);
    int m = 0;

    m = UInt(Rm);
    if (unlikely((m == 13 || m == 15))) {
        return UnpredictableInstruction("Reason: (m == 13 || m == 15)");
    }
    if (unlikely((InITBlock() && !LastInITBlock()))) {
        return UnpredictableInstruction("Reason: (InITBlock() && !LastInITBlock())");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = bxj;
    ins.m_to_string = decode_bxj_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_bxj_t1";
    ins.encoding = encoding;
    ins.m = m;

    return ins;
}

ARMInstruction ARMDecoder::decode_bxj_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;

    m = UInt(Rm);
    if (unlikely((m == 15))) {
        return UnpredictableInstruction("Reason: (m == 15)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = bxj;
    ins.m_to_string = decode_bxj_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_bxj_a1";
    ins.encoding = encoding;
    ins.m = m;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_cps_thumb_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    im = get_bit(opcode,  4);
    int     A = get_bit(opcode,  2);
    int     I = get_bit(opcode,  1);
    int     F = get_bit(opcode,  0);
    int changemode = 0;
    int enable = 0;
    int disable = 0;
    int affectI = 0;
    int affectA = 0;
    int affectF = 0;

    if (unlikely((Concatenate(Concatenate(A, I, 1), F, 1) == 0))) {
        return UnpredictableInstruction("Reason: (Concatenate(Concatenate(A, I, 1), F, 1) == 0)");
    }
    enable = (im == 0);
    disable = (im == 1);
    changemode = false;
    affectA = (A == 1);
    affectI = (I == 1);
    affectF = (F == 1);
    if (unlikely(InITBlock())) {
        return UnpredictableInstruction("Reason: InITBlock()");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = cps_thumb;
    ins.m_to_string = decode_cps_thumb_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_cps_thumb_t1";
    ins.encoding = encoding;
    ins.changemode = changemode;
    ins.enable = enable;
    ins.disable = disable;
    ins.affectI = affectI;
    ins.affectA = affectA;
    ins.affectF = affectF;

    return ins;
}

ARMInstruction ARMDecoder::decode_cps_thumb_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  imod = get_bits(opcode, 10,  9);
    int     M = get_bit(opcode,  8);
    int     A = get_bit(opcode,  7);
    int     I = get_bit(opcode,  6);
    int     F = get_bit(opcode,  5);
    int  mode = get_bits(opcode,  4,  0);
    int changemode = 0;
    int enable = 0;
    int disable = 0;
    int affectI = 0;
    int affectA = 0;
    int affectF = 0;

    if (unlikely(((imod == 0) && (M == 0)))) {
        return SeeInstruction("Hint instructions");
    }
    if (unlikely(((mode != 0) && (M == 0)))) {
        return UnpredictableInstruction("Reason: ((mode != 0) && (M == 0))");
    }
    if (unlikely((((get_bit(imod, 1) == 1) && (Concatenate(Concatenate(A, I, 1), F, 1) == 0)) || ((get_bit(imod, 1) == 0) && (Concatenate(Concatenate(A, I, 1), F, 1) != 0))))) {
        return UnpredictableInstruction("Reason: (((get_bit(imod, 1) == 1) && (Concatenate(Concatenate(A, I, 1), F, 1) == 0)) || ((get_bit(imod, 1) == 0) && (Concatenate(Concatenate(A, I, 1), F, 1) != 0)))");
    }
    enable = (imod == 2);
    disable = (imod == 3);
    changemode = (M == 1);
    affectA = (A == 1);
    affectI = (I == 1);
    affectF = (F == 1);
    if (unlikely(((imod == 1) || InITBlock()))) {
        return UnpredictableInstruction("Reason: ((imod == 1) || InITBlock())");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = cps_thumb;
    ins.m_to_string = decode_cps_thumb_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_cps_thumb_t2";
    ins.encoding = encoding;
    ins.changemode = changemode;
    ins.enable = enable;
    ins.disable = disable;
    ins.affectI = affectI;
    ins.affectA = affectA;
    ins.affectF = affectF;
    ins.mode = mode;

    return ins;
}

ARMInstruction ARMDecoder::decode_cps_arm_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  imod = get_bits(opcode, 19, 18);
    int     M = get_bit(opcode, 17);
    int     A = get_bit(opcode,  8);
    int     I = get_bit(opcode,  7);
    int     F = get_bit(opcode,  6);
    int  mode = get_bits(opcode,  4,  0);
    int changemode = 0;
    int enable = 0;
    int disable = 0;
    int affectI = 0;
    int affectA = 0;
    int affectF = 0;

    if (unlikely(((mode != 0) && (M == 0)))) {
        return UnpredictableInstruction("Reason: ((mode != 0) && (M == 0))");
    }
    if (unlikely((((get_bit(imod, 1) == 1) && (Concatenate(Concatenate(A, I, 1), F, 1) == 0)) || ((get_bit(imod, 1) == 0) && (Concatenate(Concatenate(A, I, 1), F, 1) != 0))))) {
        return UnpredictableInstruction("Reason: (((get_bit(imod, 1) == 1) && (Concatenate(Concatenate(A, I, 1), F, 1) == 0)) || ((get_bit(imod, 1) == 0) && (Concatenate(Concatenate(A, I, 1), F, 1) != 0)))");
    }
    enable = (imod == 2);
    disable = (imod == 3);
    changemode = (M == 1);
    affectA = (A == 1);
    affectI = (I == 1);
    affectF = (F == 1);
    if (unlikely((((imod == 0) && (M == 0)) || (imod == 1)))) {
        return UnpredictableInstruction("Reason: (((imod == 0) && (M == 0)) || (imod == 1))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = cps_arm;
    ins.m_to_string = decode_cps_arm_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_cps_arm_a1";
    ins.encoding = encoding;
    ins.changemode = changemode;
    ins.enable = enable;
    ins.disable = disable;
    ins.affectI = affectI;
    ins.affectA = affectA;
    ins.affectF = affectF;
    ins.mode = mode;

    return ins;
}

ARMInstruction ARMDecoder::decode_cbnz_cbz_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    op = get_bit(opcode, 11);
    int     i = get_bit(opcode,  9);
    int  imm5 = get_bits(opcode,  7,  3);
    int    Rn = get_bits(opcode,  2,  0);
    int nonzero = 0;
    int imm32 = 0;
    int n = 0;

    n = UInt(Rn);
    imm32 = ZeroExtend(Concatenate(Concatenate(i, imm5, 5), 0, 1), 32);
    nonzero = (op == 1);
    if (unlikely(InITBlock())) {
        return UnpredictableInstruction("Reason: InITBlock()");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = cbnz_cbz;
    ins.m_to_string = decode_cbnz_cbz_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_cbnz_cbz_t1";
    ins.encoding = encoding;
    ins.nonzero = nonzero;
    ins.imm32 = imm32;
    ins.n = n;
    ins.op = op;

    return ins;
}

ARMInstruction ARMDecoder::decode_cdp_cdp2_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  opc1 = get_bits(opcode, 23, 20);
    int   CRn = get_bits(opcode, 19, 16);
    int   CRd = get_bits(opcode, 15, 12);
    int coproc = get_bits(opcode, 11,  8);
    int  opc2 = get_bits(opcode,  7,  5);
    int   CRm = get_bits(opcode,  3,  0);
    int cp = 0;

    if (unlikely((coproc >= 10 && coproc <= 11))) {
        return SeeInstruction("Floating-point instructions");
    }
    cp = UInt(coproc);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = cdp_cdp2;
    ins.m_to_string = decode_cdp_cdp2_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_cdp_cdp2_t1";
    ins.encoding = encoding;
    ins.cp = cp;
    ins.opc1 = opc1;
    ins.CRn = CRn;
    ins.CRd = CRd;
    ins.coproc = coproc;
    ins.opc2 = opc2;
    ins.CRm = CRm;

    return ins;
}

ARMInstruction ARMDecoder::decode_cdp_cdp2_a2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  opc1 = get_bits(opcode, 23, 20);
    int   CRn = get_bits(opcode, 19, 16);
    int   CRd = get_bits(opcode, 15, 12);
    int coproc = get_bits(opcode, 11,  8);
    int  opc2 = get_bits(opcode,  7,  5);
    int   CRm = get_bits(opcode,  3,  0);
    int cp = 0;

    cp = UInt(coproc);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = cdp_cdp2;
    ins.m_to_string = decode_cdp_cdp2_a2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_cdp_cdp2_a2";
    ins.encoding = encoding;
    ins.cp = cp;
    ins.opc1 = opc1;
    ins.CRn = CRn;
    ins.CRd = CRd;
    ins.coproc = coproc;
    ins.opc2 = opc2;
    ins.CRm = CRm;

    return ins;
}

ARMInstruction ARMDecoder::decode_cdp_cdp2_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int  opc1 = get_bits(opcode, 23, 20);
    int   CRn = get_bits(opcode, 19, 16);
    int   CRd = get_bits(opcode, 15, 12);
    int coproc = get_bits(opcode, 11,  8);
    int  opc2 = get_bits(opcode,  7,  5);
    int   CRm = get_bits(opcode,  3,  0);
    int cp = 0;

    if (unlikely((coproc >= 10 && coproc <= 11))) {
        return SeeInstruction("Floating-point instructions");
    }
    cp = UInt(coproc);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = cdp_cdp2;
    ins.m_to_string = decode_cdp_cdp2_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_cdp_cdp2_a1";
    ins.encoding = encoding;
    ins.cp = cp;
    ins.cond = cond;
    ins.opc1 = opc1;
    ins.CRn = CRn;
    ins.CRd = CRd;
    ins.coproc = coproc;
    ins.opc2 = opc2;
    ins.CRm = CRm;

    return ins;
}

ARMInstruction ARMDecoder::decode_cdp_cdp2_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  opc1 = get_bits(opcode, 23, 20);
    int   CRn = get_bits(opcode, 19, 16);
    int   CRd = get_bits(opcode, 15, 12);
    int coproc = get_bits(opcode, 11,  8);
    int  opc2 = get_bits(opcode,  7,  5);
    int   CRm = get_bits(opcode,  3,  0);
    int cp = 0;

    cp = UInt(coproc);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = cdp_cdp2;
    ins.m_to_string = decode_cdp_cdp2_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_cdp_cdp2_t2";
    ins.encoding = encoding;
    ins.cp = cp;
    ins.opc1 = opc1;
    ins.CRn = CRn;
    ins.CRd = CRd;
    ins.coproc = coproc;
    ins.opc2 = opc2;
    ins.CRm = CRm;

    return ins;
}

ARMInstruction ARMDecoder::decode_clrex_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {

    NOP();
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = clrex;
    ins.m_to_string = decode_clrex_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_clrex_t1";
    ins.encoding = encoding;

    return ins;
}

ARMInstruction ARMDecoder::decode_clrex_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {

    NOP();
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = clrex;
    ins.m_to_string = decode_clrex_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_clrex_a1";
    ins.encoding = encoding;

    return ins;
}

ARMInstruction ARMDecoder::decode_clz_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int   Rm_ = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 11,  8);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;

    if (unlikely(!(Rm == Rm_))) {
        return UnpredictableInstruction("Reason: !(Rm == Rm_)");
    }
    d = UInt(Rd);
    m = UInt(Rm);
    if (unlikely(((d == 13 || d == 15) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: ((d == 13 || d == 15) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = clz;
    ins.m_to_string = decode_clz_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_clz_t1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;

    return ins;
}

ARMInstruction ARMDecoder::decode_clz_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rd = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;

    d = UInt(Rd);
    m = UInt(Rm);
    if (unlikely(((d == 15) || (m == 15)))) {
        return UnpredictableInstruction("Reason: ((d == 15) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = clz;
    ins.m_to_string = decode_clz_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_clz_a1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_cmn_immediate_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     i = get_bit(opcode, 26);
    int    Rn = get_bits(opcode, 19, 16);
    int  imm3 = get_bits(opcode, 14, 12);
    int  imm8 = get_bits(opcode,  7,  0);
    int imm32 = 0;
    int n = 0;

    n = UInt(Rn);
    imm32 = ThumbExpandImm(Concatenate(Concatenate(i, imm3, 3), imm8, 8));
    if (unlikely((n == 15))) {
        return UnpredictableInstruction("Reason: (n == 15)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = cmn_immediate;
    ins.m_to_string = decode_cmn_immediate_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_cmn_immediate_t1";
    ins.encoding = encoding;
    ins.imm32 = imm32;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_cmn_immediate_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rn = get_bits(opcode, 19, 16);
    int imm12 = get_bits(opcode, 11,  0);
    int imm32 = 0;
    int n = 0;

    n = UInt(Rn);
    imm32 = ARMExpandImm(imm12);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = cmn_immediate;
    ins.m_to_string = decode_cmn_immediate_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_cmn_immediate_a1";
    ins.encoding = encoding;
    ins.imm32 = imm32;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_cmn_register_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rm = get_bits(opcode,  5,  3);
    int    Rn = get_bits(opcode,  2,  0);
    int shift_n = 0;
    int shift_t = 0;
    int m = 0;
    int n = 0;

    n = UInt(Rn);
    m = UInt(Rm);
    shift_t = SRType_LSL, shift_n = 0;
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = cmn_register;
    ins.m_to_string = decode_cmn_register_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_cmn_register_t1";
    ins.encoding = encoding;
    ins.shift_n = shift_n;
    ins.shift_t = shift_t;
    ins.m = m;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_cmn_register_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int  imm3 = get_bits(opcode, 14, 12);
    int  imm2 = get_bits(opcode,  7,  6);
    int  type = get_bits(opcode,  5,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int shift_n = 0;
    int shift_t = 0;
    int m = 0;
    int n = 0;

    n = UInt(Rn);
    m = UInt(Rm);
    std::tie(shift_t, shift_n) = DecodeImmShift(type, Concatenate(imm3, imm2, 2));
    if (unlikely(((n == 15) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: ((n == 15) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = cmn_register;
    ins.m_to_string = decode_cmn_register_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_cmn_register_t2";
    ins.encoding = encoding;
    ins.shift_n = shift_n;
    ins.shift_t = shift_t;
    ins.m = m;
    ins.n = n;
    ins.type = type;

    return ins;
}

ARMInstruction ARMDecoder::decode_cmn_register_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rn = get_bits(opcode, 19, 16);
    int  imm5 = get_bits(opcode, 11,  7);
    int  type = get_bits(opcode,  6,  5);
    int    Rm = get_bits(opcode,  3,  0);
    int shift_n = 0;
    int shift_t = 0;
    int m = 0;
    int n = 0;

    n = UInt(Rn);
    m = UInt(Rm);
    std::tie(shift_t, shift_n) = DecodeImmShift(type, imm5);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = cmn_register;
    ins.m_to_string = decode_cmn_register_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_cmn_register_a1";
    ins.encoding = encoding;
    ins.shift_n = shift_n;
    ins.shift_t = shift_t;
    ins.m = m;
    ins.n = n;
    ins.cond = cond;
    ins.type = type;

    return ins;
}

ARMInstruction ARMDecoder::decode_cmn_register_shifted_register_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rs = get_bits(opcode, 11,  8);
    int  type = get_bits(opcode,  6,  5);
    int    Rm = get_bits(opcode,  3,  0);
    int s = 0;
    int m = 0;
    int shift_t = 0;
    int n = 0;

    n = UInt(Rn);
    m = UInt(Rm);
    s = UInt(Rs);
    shift_t = DecodeRegShift(type);
    if (unlikely((((n == 15) || (m == 15)) || (s == 15)))) {
        return UnpredictableInstruction("Reason: (((n == 15) || (m == 15)) || (s == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = cmn_register_shifted_register;
    ins.m_to_string = decode_cmn_register_shifted_register_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_cmn_register_shifted_register_a1";
    ins.encoding = encoding;
    ins.s = s;
    ins.m = m;
    ins.shift_t = shift_t;
    ins.n = n;
    ins.cond = cond;
    ins.type = type;

    return ins;
}

ARMInstruction ARMDecoder::decode_cmp_immediate_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 10,  8);
    int  imm8 = get_bits(opcode,  7,  0);
    int imm32 = 0;
    int n = 0;

    n = UInt(Rn);
    imm32 = ZeroExtend(imm8, 32);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = cmp_immediate;
    ins.m_to_string = decode_cmp_immediate_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_cmp_immediate_t1";
    ins.encoding = encoding;
    ins.imm32 = imm32;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_cmp_immediate_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     i = get_bit(opcode, 26);
    int    Rn = get_bits(opcode, 19, 16);
    int  imm3 = get_bits(opcode, 14, 12);
    int  imm8 = get_bits(opcode,  7,  0);
    int imm32 = 0;
    int n = 0;

    n = UInt(Rn);
    imm32 = ThumbExpandImm(Concatenate(Concatenate(i, imm3, 3), imm8, 8));
    if (unlikely((n == 15))) {
        return UnpredictableInstruction("Reason: (n == 15)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = cmp_immediate;
    ins.m_to_string = decode_cmp_immediate_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_cmp_immediate_t2";
    ins.encoding = encoding;
    ins.imm32 = imm32;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_cmp_immediate_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rn = get_bits(opcode, 19, 16);
    int imm12 = get_bits(opcode, 11,  0);
    int imm32 = 0;
    int n = 0;

    n = UInt(Rn);
    imm32 = ARMExpandImm(imm12);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = cmp_immediate;
    ins.m_to_string = decode_cmp_immediate_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_cmp_immediate_a1";
    ins.encoding = encoding;
    ins.imm32 = imm32;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_cmp_register_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rm = get_bits(opcode,  5,  3);
    int    Rn = get_bits(opcode,  2,  0);
    int shift_n = 0;
    int shift_t = 0;
    int m = 0;
    int n = 0;

    n = UInt(Rn);
    m = UInt(Rm);
    shift_t = SRType_LSL, shift_n = 0;
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = cmp_register;
    ins.m_to_string = decode_cmp_register_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_cmp_register_t1";
    ins.encoding = encoding;
    ins.shift_n = shift_n;
    ins.shift_t = shift_t;
    ins.m = m;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_cmp_register_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     N = get_bit(opcode,  7);
    int    Rm = get_bits(opcode,  6,  3);
    int    Rn = get_bits(opcode,  2,  0);
    int shift_n = 0;
    int shift_t = 0;
    int m = 0;
    int n = 0;

    n = UInt(Concatenate(N, Rn, 3));
    m = UInt(Rm);
    shift_t = SRType_LSL, shift_n = 0;
    if (unlikely(((n < 8) && (m < 8)))) {
        return UnpredictableInstruction("Reason: ((n < 8) && (m < 8))");
    }
    if (unlikely(((n == 15) || (m == 15)))) {
        return UnpredictableInstruction("Reason: ((n == 15) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = cmp_register;
    ins.m_to_string = decode_cmp_register_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_cmp_register_t2";
    ins.encoding = encoding;
    ins.shift_n = shift_n;
    ins.shift_t = shift_t;
    ins.m = m;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_cmp_register_t3(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int  imm3 = get_bits(opcode, 14, 12);
    int  imm2 = get_bits(opcode,  7,  6);
    int  type = get_bits(opcode,  5,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int shift_n = 0;
    int shift_t = 0;
    int m = 0;
    int n = 0;

    n = UInt(Rn);
    m = UInt(Rm);
    std::tie(shift_t, shift_n) = DecodeImmShift(type, Concatenate(imm3, imm2, 2));
    if (unlikely(((n == 15) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: ((n == 15) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = cmp_register;
    ins.m_to_string = decode_cmp_register_t3_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_cmp_register_t3";
    ins.encoding = encoding;
    ins.shift_n = shift_n;
    ins.shift_t = shift_t;
    ins.m = m;
    ins.n = n;
    ins.type = type;

    return ins;
}

ARMInstruction ARMDecoder::decode_cmp_register_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rn = get_bits(opcode, 19, 16);
    int  imm5 = get_bits(opcode, 11,  7);
    int  type = get_bits(opcode,  6,  5);
    int    Rm = get_bits(opcode,  3,  0);
    int shift_n = 0;
    int shift_t = 0;
    int m = 0;
    int n = 0;

    n = UInt(Rn);
    m = UInt(Rm);
    std::tie(shift_t, shift_n) = DecodeImmShift(type, imm5);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = cmp_register;
    ins.m_to_string = decode_cmp_register_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_cmp_register_a1";
    ins.encoding = encoding;
    ins.shift_n = shift_n;
    ins.shift_t = shift_t;
    ins.m = m;
    ins.n = n;
    ins.cond = cond;
    ins.type = type;

    return ins;
}

ARMInstruction ARMDecoder::decode_cmp_register_shifted_register_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rs = get_bits(opcode, 11,  8);
    int  type = get_bits(opcode,  6,  5);
    int    Rm = get_bits(opcode,  3,  0);
    int s = 0;
    int m = 0;
    int shift_t = 0;
    int n = 0;

    n = UInt(Rn);
    m = UInt(Rm);
    s = UInt(Rs);
    shift_t = DecodeRegShift(type);
    if (unlikely((((n == 15) || (m == 15)) || (s == 15)))) {
        return UnpredictableInstruction("Reason: (((n == 15) || (m == 15)) || (s == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = cmp_register_shifted_register;
    ins.m_to_string = decode_cmp_register_shifted_register_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_cmp_register_shifted_register_a1";
    ins.encoding = encoding;
    ins.s = s;
    ins.m = m;
    ins.shift_t = shift_t;
    ins.n = n;
    ins.cond = cond;
    ins.type = type;

    return ins;
}

ARMInstruction ARMDecoder::decode_dbg_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int option = get_bits(opcode,  3,  0);

    NOP();
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = dbg;
    ins.m_to_string = decode_dbg_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_dbg_t1";
    ins.encoding = encoding;
    ins.option = option;

    return ins;
}

ARMInstruction ARMDecoder::decode_dbg_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int option = get_bits(opcode,  3,  0);

    NOP();
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = dbg;
    ins.m_to_string = decode_dbg_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_dbg_a1";
    ins.encoding = encoding;
    ins.cond = cond;
    ins.option = option;

    return ins;
}

ARMInstruction ARMDecoder::decode_dmb_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int option = get_bits(opcode,  3,  0);

    NOP();
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = dmb;
    ins.m_to_string = decode_dmb_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_dmb_t1";
    ins.encoding = encoding;
    ins.option = option;

    return ins;
}

ARMInstruction ARMDecoder::decode_dmb_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int option = get_bits(opcode,  3,  0);

    NOP();
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = dmb;
    ins.m_to_string = decode_dmb_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_dmb_a1";
    ins.encoding = encoding;
    ins.option = option;

    return ins;
}

ARMInstruction ARMDecoder::decode_dsb_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int option = get_bits(opcode,  3,  0);

    NOP();
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = dsb;
    ins.m_to_string = decode_dsb_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_dsb_t1";
    ins.encoding = encoding;
    ins.option = option;

    return ins;
}

ARMInstruction ARMDecoder::decode_dsb_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int option = get_bits(opcode,  3,  0);

    NOP();
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = dsb;
    ins.m_to_string = decode_dsb_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_dsb_a1";
    ins.encoding = encoding;
    ins.option = option;

    return ins;
}

ARMInstruction ARMDecoder::decode_eor_immediate_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     i = get_bit(opcode, 26);
    int     S = get_bit(opcode, 20);
    int    Rn = get_bits(opcode, 19, 16);
    int  imm3 = get_bits(opcode, 14, 12);
    int    Rd = get_bits(opcode, 11,  8);
    int  imm8 = get_bits(opcode,  7,  0);
    int setflags = 0;
    int imm32 = 0;
    int imm12 = 0;
    int d = 0;
    int n = 0;

    if (unlikely(((Rd == 15) && (S == 1)))) {
        return SeeInstruction("TEQ (immediate)");
    }
    d = UInt(Rd);
    n = UInt(Rn);
    setflags = (S == 1);
    imm12 = Concatenate(Concatenate(i, imm3, 3), imm8, 8);
    imm32 = ThumbExpandImm(imm12);
    if (unlikely((((d == 13) || ((d == 15) && (S == 0))) || (n == 13 || n == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 13) || ((d == 15) && (S == 0))) || (n == 13 || n == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = eor_immediate;
    ins.m_to_string = decode_eor_immediate_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_eor_immediate_t1";
    ins.encoding = encoding;
    ins.setflags = setflags;
    ins.imm32 = imm32;
    ins.imm12 = imm12;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_eor_immediate_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     S = get_bit(opcode, 20);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int imm12 = get_bits(opcode, 11,  0);
    int setflags = 0;
    int imm32 = 0;
    int d = 0;
    int n = 0;

    if (unlikely(((Rd == 15) && (S == 1)))) {
        return SeeInstruction("SUBS PC, LR and related instructions");
    }
    d = UInt(Rd);
    n = UInt(Rn);
    setflags = (S == 1);
    imm32 = ARMExpandImm(imm12);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = eor_immediate;
    ins.m_to_string = decode_eor_immediate_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_eor_immediate_a1";
    ins.encoding = encoding;
    ins.setflags = setflags;
    ins.imm32 = imm32;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_eor_register_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rm = get_bits(opcode,  5,  3);
    int   Rdn = get_bits(opcode,  2,  0);
    int shift_t = 0;
    int d = 0;
    int m = 0;
    int n = 0;
    int shift_n = 0;
    int setflags = 0;

    d = UInt(Rdn);
    n = UInt(Rdn);
    m = UInt(Rm);
    setflags = !InITBlock();
    shift_t = SRType_LSL, shift_n = 0;
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = eor_register;
    ins.m_to_string = decode_eor_register_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_eor_register_t1";
    ins.encoding = encoding;
    ins.shift_t = shift_t;
    ins.d = d;
    ins.m = m;
    ins.n = n;
    ins.shift_n = shift_n;
    ins.setflags = setflags;

    return ins;
}

ARMInstruction ARMDecoder::decode_eor_register_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     S = get_bit(opcode, 20);
    int    Rn = get_bits(opcode, 19, 16);
    int  imm3 = get_bits(opcode, 14, 12);
    int    Rd = get_bits(opcode, 11,  8);
    int  imm2 = get_bits(opcode,  7,  6);
    int  type = get_bits(opcode,  5,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int shift_t = 0;
    int d = 0;
    int m = 0;
    int n = 0;
    int shift_n = 0;
    int setflags = 0;

    if (unlikely(((Rd == 15) && (S == 1)))) {
        return SeeInstruction("TEQ (register)");
    }
    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    setflags = (S == 1);
    std::tie(shift_t, shift_n) = DecodeImmShift(type, Concatenate(imm3, imm2, 2));
    if (unlikely(((((d == 13) || ((d == 15) && (S == 0))) || (n == 13 || n == 15)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: ((((d == 13) || ((d == 15) && (S == 0))) || (n == 13 || n == 15)) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = eor_register;
    ins.m_to_string = decode_eor_register_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_eor_register_t2";
    ins.encoding = encoding;
    ins.shift_t = shift_t;
    ins.d = d;
    ins.m = m;
    ins.n = n;
    ins.shift_n = shift_n;
    ins.setflags = setflags;
    ins.type = type;

    return ins;
}

ARMInstruction ARMDecoder::decode_eor_register_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     S = get_bit(opcode, 20);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int  imm5 = get_bits(opcode, 11,  7);
    int  type = get_bits(opcode,  6,  5);
    int    Rm = get_bits(opcode,  3,  0);
    int shift_t = 0;
    int d = 0;
    int m = 0;
    int n = 0;
    int shift_n = 0;
    int setflags = 0;

    if (unlikely(((Rd == 15) && (S == 1)))) {
        return SeeInstruction("SUBS PC, LR and related instructions");
    }
    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    setflags = (S == 1);
    std::tie(shift_t, shift_n) = DecodeImmShift(type, imm5);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = eor_register;
    ins.m_to_string = decode_eor_register_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_eor_register_a1";
    ins.encoding = encoding;
    ins.shift_t = shift_t;
    ins.d = d;
    ins.m = m;
    ins.n = n;
    ins.shift_n = shift_n;
    ins.setflags = setflags;
    ins.cond = cond;
    ins.type = type;

    return ins;
}

ARMInstruction ARMDecoder::decode_eor_register_shifted_register_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     S = get_bit(opcode, 20);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int    Rs = get_bits(opcode, 11,  8);
    int  type = get_bits(opcode,  6,  5);
    int    Rm = get_bits(opcode,  3,  0);
    int shift_t = 0;
    int d = 0;
    int m = 0;
    int n = 0;
    int s = 0;
    int setflags = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    s = UInt(Rs);
    setflags = (S == 1);
    shift_t = DecodeRegShift(type);
    if (unlikely(((((d == 15) || (n == 15)) || (m == 15)) || (s == 15)))) {
        return UnpredictableInstruction("Reason: ((((d == 15) || (n == 15)) || (m == 15)) || (s == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = eor_register_shifted_register;
    ins.m_to_string = decode_eor_register_shifted_register_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_eor_register_shifted_register_a1";
    ins.encoding = encoding;
    ins.shift_t = shift_t;
    ins.d = d;
    ins.m = m;
    ins.n = n;
    ins.s = s;
    ins.setflags = setflags;
    ins.cond = cond;
    ins.type = type;

    return ins;
}

ARMInstruction ARMDecoder::decode_isb_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int option = get_bits(opcode,  3,  0);

    NOP();
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = isb;
    ins.m_to_string = decode_isb_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_isb_t1";
    ins.encoding = encoding;
    ins.option = option;

    return ins;
}

ARMInstruction ARMDecoder::decode_isb_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int option = get_bits(opcode,  3,  0);

    NOP();
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = isb;
    ins.m_to_string = decode_isb_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_isb_a1";
    ins.encoding = encoding;
    ins.option = option;

    return ins;
}

ARMInstruction ARMDecoder::decode_it_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int firstcond = get_bits(opcode,  7,  4);
    int  mask = get_bits(opcode,  3,  0);

    if (unlikely((mask == 0))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely(((firstcond == 15) || ((firstcond == 14) && (BitCount(mask) != 1))))) {
        return UnpredictableInstruction("Reason: ((firstcond == 15) || ((firstcond == 14) && (BitCount(mask) != 1)))");
    }
    if (unlikely(InITBlock())) {
        return UnpredictableInstruction("Reason: InITBlock()");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = it;
    ins.m_to_string = decode_it_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_it_t1";
    ins.encoding = encoding;
    ins.firstcond = firstcond;
    ins.mask = mask;

    return ins;
}

ARMInstruction ARMDecoder::decode_rfe_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     W = get_bit(opcode, 21);
    int    Rn = get_bits(opcode, 19, 16);
    int wordhigher = 0;
    int wback = 0;
    int increment = 0;
    int n = 0;

    if (unlikely((CurrentInstrSet() == InstrSet_ThumbEE))) {
        return UnpredictableInstruction("Reason: (CurrentInstrSet() == InstrSet_ThumbEE)");
    }
    n = UInt(Rn);
    wback = (W == 1);
    increment = false;
    wordhigher = false;
    if (unlikely((n == 15))) {
        return UnpredictableInstruction("Reason: (n == 15)");
    }
    if (unlikely((InITBlock() && !LastInITBlock()))) {
        return UnpredictableInstruction("Reason: (InITBlock() && !LastInITBlock())");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = rfe;
    ins.m_to_string = decode_rfe_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_rfe_t1";
    ins.encoding = encoding;
    ins.wordhigher = wordhigher;
    ins.wback = wback;
    ins.increment = increment;
    ins.n = n;
    ins.W = W;

    return ins;
}

ARMInstruction ARMDecoder::decode_rfe_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     W = get_bit(opcode, 21);
    int    Rn = get_bits(opcode, 19, 16);
    int wordhigher = 0;
    int wback = 0;
    int increment = 0;
    int n = 0;

    if (unlikely((CurrentInstrSet() == InstrSet_ThumbEE))) {
        return UnpredictableInstruction("Reason: (CurrentInstrSet() == InstrSet_ThumbEE)");
    }
    n = UInt(Rn);
    wback = (W == 1);
    increment = true;
    wordhigher = false;
    if (unlikely((n == 15))) {
        return UnpredictableInstruction("Reason: (n == 15)");
    }
    if (unlikely((InITBlock() && !LastInITBlock()))) {
        return UnpredictableInstruction("Reason: (InITBlock() && !LastInITBlock())");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = rfe;
    ins.m_to_string = decode_rfe_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_rfe_t2";
    ins.encoding = encoding;
    ins.wordhigher = wordhigher;
    ins.wback = wback;
    ins.increment = increment;
    ins.n = n;
    ins.W = W;

    return ins;
}

ARMInstruction ARMDecoder::decode_rfe_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     P = get_bit(opcode, 24);
    int     U = get_bit(opcode, 23);
    int     W = get_bit(opcode, 21);
    int    Rn = get_bits(opcode, 19, 16);
    int wordhigher = 0;
    int wback = 0;
    int inc = 0;
    int n = 0;

    n = UInt(Rn);
    wback = (W == 1);
    inc = (U == 1);
    wordhigher = (P == U);
    if (unlikely((n == 15))) {
        return UnpredictableInstruction("Reason: (n == 15)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = rfe;
    ins.m_to_string = decode_rfe_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_rfe_a1";
    ins.encoding = encoding;
    ins.wordhigher = wordhigher;
    ins.wback = wback;
    ins.inc = inc;
    ins.n = n;
    ins.P = P;
    ins.U = U;
    ins.W = W;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldc_ldc2_immediate_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     P = get_bit(opcode, 24);
    int     U = get_bit(opcode, 23);
    int     D = get_bit(opcode, 22);
    int     W = get_bit(opcode, 21);
    int    Rn = get_bits(opcode, 19, 16);
    int   CRd = get_bits(opcode, 15, 12);
    int coproc = get_bits(opcode, 11,  8);
    int  imm8 = get_bits(opcode,  7,  0);
    int index = 0;
    int imm32 = 0;
    int n = 0;
    int add = 0;
    int wback = 0;
    int cp = 0;

    if (unlikely((Rn == 15))) {
        return SeeInstruction("LDC, LDC2 (literal)");
    }
    if (unlikely(((((P == 0) && (U == 0)) && (D == 0)) && (W == 0)))) {
        return UndefinedInstruction("Reason: ((((P == 0) && (U == 0)) && (D == 0)) && (W == 0))");
    }
    if (unlikely(((((P == 0) && (U == 0)) && (D == 1)) && (W == 0)))) {
        return SeeInstruction("MRRC, MRRC2");
    }
    if (unlikely((coproc >= 10 && coproc <= 11))) {
        return SeeInstruction("AdvancedSIMD and Floating-point");
    }
    n = UInt(Rn);
    cp = UInt(coproc);
    imm32 = ZeroExtend(Concatenate(imm8, 0, 2), 32);
    index = (P == 1);
    add = (U == 1);
    wback = (W == 1);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldc_ldc2_immediate;
    ins.m_to_string = decode_ldc_ldc2_immediate_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldc_ldc2_immediate_t1";
    ins.encoding = encoding;
    ins.index = index;
    ins.imm32 = imm32;
    ins.n = n;
    ins.add = add;
    ins.wback = wback;
    ins.cp = cp;
    ins.P = P;
    ins.U = U;
    ins.D = D;
    ins.W = W;
    ins.CRd = CRd;
    ins.coproc = coproc;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldc_ldc2_immediate_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     P = get_bit(opcode, 24);
    int     U = get_bit(opcode, 23);
    int     D = get_bit(opcode, 22);
    int     W = get_bit(opcode, 21);
    int    Rn = get_bits(opcode, 19, 16);
    int   CRd = get_bits(opcode, 15, 12);
    int coproc = get_bits(opcode, 11,  8);
    int  imm8 = get_bits(opcode,  7,  0);
    int index = 0;
    int imm32 = 0;
    int n = 0;
    int add = 0;
    int wback = 0;
    int cp = 0;

    if (unlikely((Rn == 15))) {
        return SeeInstruction("LDC, LDC2 (literal)");
    }
    if (unlikely(((((P == 0) && (U == 0)) && (D == 0)) && (W == 0)))) {
        return UndefinedInstruction("Reason: ((((P == 0) && (U == 0)) && (D == 0)) && (W == 0))");
    }
    if (unlikely(((((P == 0) && (U == 0)) && (D == 1)) && (W == 0)))) {
        return SeeInstruction("MRRC, MRRC2");
    }
    if (unlikely((coproc >= 10 && coproc <= 11))) {
        return UndefinedInstruction("Reason: (coproc >= 10 && coproc <= 11)");
    }
    n = UInt(Rn);
    cp = UInt(coproc);
    imm32 = ZeroExtend(Concatenate(imm8, 0, 2), 32);
    index = (P == 1);
    add = (U == 1);
    wback = (W == 1);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldc_ldc2_immediate;
    ins.m_to_string = decode_ldc_ldc2_immediate_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldc_ldc2_immediate_t2";
    ins.encoding = encoding;
    ins.index = index;
    ins.imm32 = imm32;
    ins.n = n;
    ins.add = add;
    ins.wback = wback;
    ins.cp = cp;
    ins.P = P;
    ins.U = U;
    ins.D = D;
    ins.W = W;
    ins.CRd = CRd;
    ins.coproc = coproc;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldc_ldc2_immediate_a2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     P = get_bit(opcode, 24);
    int     U = get_bit(opcode, 23);
    int     D = get_bit(opcode, 22);
    int     W = get_bit(opcode, 21);
    int    Rn = get_bits(opcode, 19, 16);
    int   CRd = get_bits(opcode, 15, 12);
    int coproc = get_bits(opcode, 11,  8);
    int  imm8 = get_bits(opcode,  7,  0);
    int index = 0;
    int imm32 = 0;
    int n = 0;
    int add = 0;
    int wback = 0;
    int cp = 0;

    if (unlikely((Rn == 15))) {
        return SeeInstruction("LDC, LDC2 (literal)");
    }
    if (unlikely(((((P == 0) && (U == 0)) && (D == 0)) && (W == 0)))) {
        return UndefinedInstruction("Reason: ((((P == 0) && (U == 0)) && (D == 0)) && (W == 0))");
    }
    if (unlikely(((((P == 0) && (U == 0)) && (D == 1)) && (W == 0)))) {
        return SeeInstruction("MRRC, MRRC2");
    }
    if (unlikely((coproc >= 10 && coproc <= 11))) {
        return UndefinedInstruction("Reason: (coproc >= 10 && coproc <= 11)");
    }
    n = UInt(Rn);
    cp = UInt(coproc);
    imm32 = ZeroExtend(Concatenate(imm8, 0, 2), 32);
    index = (P == 1);
    add = (U == 1);
    wback = (W == 1);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldc_ldc2_immediate;
    ins.m_to_string = decode_ldc_ldc2_immediate_a2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldc_ldc2_immediate_a2";
    ins.encoding = encoding;
    ins.index = index;
    ins.imm32 = imm32;
    ins.n = n;
    ins.add = add;
    ins.wback = wback;
    ins.cp = cp;
    ins.P = P;
    ins.U = U;
    ins.D = D;
    ins.W = W;
    ins.CRd = CRd;
    ins.coproc = coproc;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldc_ldc2_immediate_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     P = get_bit(opcode, 24);
    int     U = get_bit(opcode, 23);
    int     D = get_bit(opcode, 22);
    int     W = get_bit(opcode, 21);
    int    Rn = get_bits(opcode, 19, 16);
    int   CRd = get_bits(opcode, 15, 12);
    int coproc = get_bits(opcode, 11,  8);
    int  imm8 = get_bits(opcode,  7,  0);
    int index = 0;
    int imm32 = 0;
    int n = 0;
    int add = 0;
    int wback = 0;
    int cp = 0;

    if (unlikely((Rn == 15))) {
        return SeeInstruction("LDC, LDC2 (literal)");
    }
    if (unlikely(((((P == 0) && (U == 0)) && (D == 0)) && (W == 0)))) {
        return UndefinedInstruction("Reason: ((((P == 0) && (U == 0)) && (D == 0)) && (W == 0))");
    }
    if (unlikely(((((P == 0) && (U == 0)) && (D == 1)) && (W == 0)))) {
        return SeeInstruction("MRRC, MRRC2");
    }
    if (unlikely((coproc >= 10 && coproc <= 11))) {
        return SeeInstruction("AdvancedSIMD and Floating-point");
    }
    n = UInt(Rn);
    cp = UInt(coproc);
    imm32 = ZeroExtend(Concatenate(imm8, 0, 2), 32);
    index = (P == 1);
    add = (U == 1);
    wback = (W == 1);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldc_ldc2_immediate;
    ins.m_to_string = decode_ldc_ldc2_immediate_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldc_ldc2_immediate_a1";
    ins.encoding = encoding;
    ins.index = index;
    ins.imm32 = imm32;
    ins.n = n;
    ins.add = add;
    ins.wback = wback;
    ins.cp = cp;
    ins.cond = cond;
    ins.P = P;
    ins.U = U;
    ins.D = D;
    ins.W = W;
    ins.CRd = CRd;
    ins.coproc = coproc;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldc_ldc2_literal_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     P = get_bit(opcode, 24);
    int     U = get_bit(opcode, 23);
    int     D = get_bit(opcode, 22);
    int     W = get_bit(opcode, 21);
    int   CRd = get_bits(opcode, 15, 12);
    int coproc = get_bits(opcode, 11,  8);
    int  imm8 = get_bits(opcode,  7,  0);
    int index = 0;
    int add = 0;
    int cp = 0;
    int imm32 = 0;

    if (unlikely(((((P == 0) && (U == 0)) && (D == 0)) && (W == 0)))) {
        return UndefinedInstruction("Reason: ((((P == 0) && (U == 0)) && (D == 0)) && (W == 0))");
    }
    if (unlikely(((((P == 0) && (U == 0)) && (D == 1)) && (W == 0)))) {
        return SeeInstruction("MRRC, MRRC2");
    }
    if (unlikely((coproc >= 10 && coproc <= 11))) {
        return SeeInstruction("AdvancedSIMD and Floating-point");
    }
    index = (P == 1);
    add = (U == 1);
    cp = UInt(coproc);
    imm32 = ZeroExtend(Concatenate(imm8, 0, 2), 32);
    if (unlikely(((W == 1) || ((P == 0) && (CurrentInstrSet() != InstrSet_ARM))))) {
        return UnpredictableInstruction("Reason: ((W == 1) || ((P == 0) && (CurrentInstrSet() != InstrSet_ARM)))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldc_ldc2_literal;
    ins.m_to_string = decode_ldc_ldc2_literal_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldc_ldc2_literal_t1";
    ins.encoding = encoding;
    ins.index = index;
    ins.add = add;
    ins.cp = cp;
    ins.imm32 = imm32;
    ins.P = P;
    ins.U = U;
    ins.D = D;
    ins.W = W;
    ins.CRd = CRd;
    ins.coproc = coproc;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldc_ldc2_literal_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     P = get_bit(opcode, 24);
    int     U = get_bit(opcode, 23);
    int     D = get_bit(opcode, 22);
    int     W = get_bit(opcode, 21);
    int   CRd = get_bits(opcode, 15, 12);
    int coproc = get_bits(opcode, 11,  8);
    int  imm8 = get_bits(opcode,  7,  0);
    int index = 0;
    int add = 0;
    int cp = 0;
    int imm32 = 0;

    if (unlikely(((((P == 0) && (U == 0)) && (D == 0)) && (W == 0)))) {
        return UndefinedInstruction("Reason: ((((P == 0) && (U == 0)) && (D == 0)) && (W == 0))");
    }
    if (unlikely(((((P == 0) && (U == 0)) && (D == 1)) && (W == 0)))) {
        return SeeInstruction("MRRC, MRRC2");
    }
    if (unlikely((coproc >= 10 && coproc <= 11))) {
        return UndefinedInstruction("Reason: (coproc >= 10 && coproc <= 11)");
    }
    index = (P == 1);
    add = (U == 1);
    cp = UInt(coproc);
    imm32 = ZeroExtend(Concatenate(imm8, 0, 2), 32);
    if (unlikely(((W == 1) || ((P == 0) && (CurrentInstrSet() != InstrSet_ARM))))) {
        return UnpredictableInstruction("Reason: ((W == 1) || ((P == 0) && (CurrentInstrSet() != InstrSet_ARM)))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldc_ldc2_literal;
    ins.m_to_string = decode_ldc_ldc2_literal_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldc_ldc2_literal_t2";
    ins.encoding = encoding;
    ins.index = index;
    ins.add = add;
    ins.cp = cp;
    ins.imm32 = imm32;
    ins.P = P;
    ins.U = U;
    ins.D = D;
    ins.W = W;
    ins.CRd = CRd;
    ins.coproc = coproc;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldc_ldc2_literal_a2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     P = get_bit(opcode, 24);
    int     U = get_bit(opcode, 23);
    int     D = get_bit(opcode, 22);
    int     W = get_bit(opcode, 21);
    int   CRd = get_bits(opcode, 15, 12);
    int coproc = get_bits(opcode, 11,  8);
    int  imm8 = get_bits(opcode,  7,  0);
    int index = 0;
    int add = 0;
    int cp = 0;
    int imm32 = 0;

    if (unlikely(((((P == 0) && (U == 0)) && (D == 0)) && (W == 0)))) {
        return UndefinedInstruction("Reason: ((((P == 0) && (U == 0)) && (D == 0)) && (W == 0))");
    }
    if (unlikely(((((P == 0) && (U == 0)) && (D == 1)) && (W == 0)))) {
        return SeeInstruction("MRRC, MRRC2");
    }
    if (unlikely((coproc >= 10 && coproc <= 11))) {
        return UndefinedInstruction("Reason: (coproc >= 10 && coproc <= 11)");
    }
    index = (P == 1);
    add = (U == 1);
    cp = UInt(coproc);
    imm32 = ZeroExtend(Concatenate(imm8, 0, 2), 32);
    if (unlikely(((W == 1) || ((P == 0) && (CurrentInstrSet() != InstrSet_ARM))))) {
        return UnpredictableInstruction("Reason: ((W == 1) || ((P == 0) && (CurrentInstrSet() != InstrSet_ARM)))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldc_ldc2_literal;
    ins.m_to_string = decode_ldc_ldc2_literal_a2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldc_ldc2_literal_a2";
    ins.encoding = encoding;
    ins.index = index;
    ins.add = add;
    ins.cp = cp;
    ins.imm32 = imm32;
    ins.P = P;
    ins.U = U;
    ins.D = D;
    ins.W = W;
    ins.CRd = CRd;
    ins.coproc = coproc;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldc_ldc2_literal_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     P = get_bit(opcode, 24);
    int     U = get_bit(opcode, 23);
    int     D = get_bit(opcode, 22);
    int     W = get_bit(opcode, 21);
    int   CRd = get_bits(opcode, 15, 12);
    int coproc = get_bits(opcode, 11,  8);
    int  imm8 = get_bits(opcode,  7,  0);
    int index = 0;
    int add = 0;
    int cp = 0;
    int imm32 = 0;

    if (unlikely(((((P == 0) && (U == 0)) && (D == 0)) && (W == 0)))) {
        return UndefinedInstruction("Reason: ((((P == 0) && (U == 0)) && (D == 0)) && (W == 0))");
    }
    if (unlikely(((((P == 0) && (U == 0)) && (D == 1)) && (W == 0)))) {
        return SeeInstruction("MRRC, MRRC2");
    }
    if (unlikely((coproc >= 10 && coproc <= 11))) {
        return SeeInstruction("AdvancedSIMD and Floating-point");
    }
    index = (P == 1);
    add = (U == 1);
    cp = UInt(coproc);
    imm32 = ZeroExtend(Concatenate(imm8, 0, 2), 32);
    if (unlikely(((W == 1) || ((P == 0) && (CurrentInstrSet() != InstrSet_ARM))))) {
        return UnpredictableInstruction("Reason: ((W == 1) || ((P == 0) && (CurrentInstrSet() != InstrSet_ARM)))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldc_ldc2_literal;
    ins.m_to_string = decode_ldc_ldc2_literal_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldc_ldc2_literal_a1";
    ins.encoding = encoding;
    ins.index = index;
    ins.add = add;
    ins.cp = cp;
    ins.imm32 = imm32;
    ins.cond = cond;
    ins.P = P;
    ins.U = U;
    ins.D = D;
    ins.W = W;
    ins.CRd = CRd;
    ins.coproc = coproc;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldm_ldmia_ldmfd_thumb_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 10,  8);
    int register_list = get_bits(opcode,  7,  0);
    int wback = 0;
    int registers = 0;
    int n = 0;

    if (unlikely((CurrentInstrSet() == InstrSet_ThumbEE))) {
        return SeeInstruction("ThumbEE instructions");
    }
    n = UInt(Rn);
    registers = Concatenate(0, register_list, 8);
    wback = (get_bit(registers, n) == 0);
    if (unlikely((BitCount(registers) < 1))) {
        return UnpredictableInstruction("Reason: (BitCount(registers) < 1)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldm_ldmia_ldmfd_thumb;
    ins.m_to_string = decode_ldm_ldmia_ldmfd_thumb_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldm_ldmia_ldmfd_thumb_t1";
    ins.encoding = encoding;
    ins.wback = wback;
    ins.registers = registers;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldm_ldmia_ldmfd_thumb_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     W = get_bit(opcode, 21);
    int    Rn = get_bits(opcode, 19, 16);
    int     P = get_bit(opcode, 15);
    int     M = get_bit(opcode, 14);
    int register_list = get_bits(opcode, 12,  0);
    int wback = 0;
    int registers = 0;
    int n = 0;

    if (unlikely(((W == 1) && (Rn == 13)))) {
        return SeeInstruction("POP (Thumb)");
    }
    n = UInt(Rn);
    registers = Concatenate(Concatenate(Concatenate(P, M, 1), 0, 1), register_list, 13);
    wback = (W == 1);
    if (unlikely((((n == 15) || (BitCount(registers) < 2)) || ((P == 1) && (M == 1))))) {
        return UnpredictableInstruction("Reason: (((n == 15) || (BitCount(registers) < 2)) || ((P == 1) && (M == 1)))");
    }
    if (unlikely((((get_bit(registers, 15) == 1) && InITBlock()) && !LastInITBlock()))) {
        return UnpredictableInstruction("Reason: (((get_bit(registers, 15) == 1) && InITBlock()) && !LastInITBlock())");
    }
    if (unlikely((wback && (get_bit(registers, n) == 1)))) {
        return UnpredictableInstruction("Reason: (wback && (get_bit(registers, n) == 1))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldm_ldmia_ldmfd_thumb;
    ins.m_to_string = decode_ldm_ldmia_ldmfd_thumb_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldm_ldmia_ldmfd_thumb_t2";
    ins.encoding = encoding;
    ins.wback = wback;
    ins.registers = registers;
    ins.n = n;
    ins.W = W;
    ins.P = P;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldm_ldmia_ldmfd_arm_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     W = get_bit(opcode, 21);
    int    Rn = get_bits(opcode, 19, 16);
    int register_list = get_bits(opcode, 15,  0);
    int wback = 0;
    int registers = 0;
    int n = 0;

    if (unlikely((((W == 1) && (Rn == 13)) && (BitCount(register_list) > 1)))) {
        return SeeInstruction("POP (ARM)");
    }
    n = UInt(Rn);
    registers = register_list;
    wback = (W == 1);
    if (unlikely(((n == 15) || (BitCount(registers) < 1)))) {
        return UnpredictableInstruction("Reason: ((n == 15) || (BitCount(registers) < 1))");
    }
    if (unlikely(((wback && (get_bit(registers, n) == 1)) && (ArchVersion() >= 7)))) {
        return UnpredictableInstruction("Reason: ((wback && (get_bit(registers, n) == 1)) && (ArchVersion() >= 7))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldm_ldmia_ldmfd_arm;
    ins.m_to_string = decode_ldm_ldmia_ldmfd_arm_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldm_ldmia_ldmfd_arm_a1";
    ins.encoding = encoding;
    ins.wback = wback;
    ins.registers = registers;
    ins.n = n;
    ins.cond = cond;
    ins.W = W;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldmda_ldmfa_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     W = get_bit(opcode, 21);
    int    Rn = get_bits(opcode, 19, 16);
    int register_list = get_bits(opcode, 15,  0);
    int wback = 0;
    int registers = 0;
    int n = 0;

    n = UInt(Rn);
    registers = register_list;
    wback = (W == 1);
    if (unlikely(((n == 15) || (BitCount(registers) < 1)))) {
        return UnpredictableInstruction("Reason: ((n == 15) || (BitCount(registers) < 1))");
    }
    if (unlikely(((wback && (get_bit(registers, n) == 1)) && (ArchVersion() >= 7)))) {
        return UnpredictableInstruction("Reason: ((wback && (get_bit(registers, n) == 1)) && (ArchVersion() >= 7))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldmda_ldmfa;
    ins.m_to_string = decode_ldmda_ldmfa_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldmda_ldmfa_a1";
    ins.encoding = encoding;
    ins.wback = wback;
    ins.registers = registers;
    ins.n = n;
    ins.cond = cond;
    ins.W = W;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldmdb_ldmea_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     W = get_bit(opcode, 21);
    int    Rn = get_bits(opcode, 19, 16);
    int     P = get_bit(opcode, 15);
    int     M = get_bit(opcode, 14);
    int register_list = get_bits(opcode, 12,  0);
    int wback = 0;
    int registers = 0;
    int n = 0;

    n = UInt(Rn);
    registers = Concatenate(Concatenate(Concatenate(P, M, 1), 0, 1), register_list, 13);
    wback = (W == 1);
    if (unlikely((((n == 15) || (BitCount(registers) < 2)) || ((P == 1) && (M == 1))))) {
        return UnpredictableInstruction("Reason: (((n == 15) || (BitCount(registers) < 2)) || ((P == 1) && (M == 1)))");
    }
    if (unlikely((((get_bit(registers, 15) == 1) && InITBlock()) && !LastInITBlock()))) {
        return UnpredictableInstruction("Reason: (((get_bit(registers, 15) == 1) && InITBlock()) && !LastInITBlock())");
    }
    if (unlikely((wback && (get_bit(registers, n) == 1)))) {
        return UnpredictableInstruction("Reason: (wback && (get_bit(registers, n) == 1))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldmdb_ldmea;
    ins.m_to_string = decode_ldmdb_ldmea_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldmdb_ldmea_t1";
    ins.encoding = encoding;
    ins.wback = wback;
    ins.registers = registers;
    ins.n = n;
    ins.W = W;
    ins.P = P;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldmdb_ldmea_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     W = get_bit(opcode, 21);
    int    Rn = get_bits(opcode, 19, 16);
    int register_list = get_bits(opcode, 15,  0);
    int wback = 0;
    int registers = 0;
    int n = 0;

    n = UInt(Rn);
    registers = register_list;
    wback = (W == 1);
    if (unlikely(((n == 15) || (BitCount(registers) < 1)))) {
        return UnpredictableInstruction("Reason: ((n == 15) || (BitCount(registers) < 1))");
    }
    if (unlikely(((wback && (get_bit(registers, n) == 1)) && (ArchVersion() >= 7)))) {
        return UnpredictableInstruction("Reason: ((wback && (get_bit(registers, n) == 1)) && (ArchVersion() >= 7))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldmdb_ldmea;
    ins.m_to_string = decode_ldmdb_ldmea_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldmdb_ldmea_a1";
    ins.encoding = encoding;
    ins.wback = wback;
    ins.registers = registers;
    ins.n = n;
    ins.cond = cond;
    ins.W = W;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldmib_ldmed_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     W = get_bit(opcode, 21);
    int    Rn = get_bits(opcode, 19, 16);
    int register_list = get_bits(opcode, 15,  0);
    int wback = 0;
    int registers = 0;
    int n = 0;

    n = UInt(Rn);
    registers = register_list;
    wback = (W == 1);
    if (unlikely(((n == 15) || (BitCount(registers) < 1)))) {
        return UnpredictableInstruction("Reason: ((n == 15) || (BitCount(registers) < 1))");
    }
    if (unlikely(((wback && (get_bit(registers, n) == 1)) && (ArchVersion() >= 7)))) {
        return UnpredictableInstruction("Reason: ((wback && (get_bit(registers, n) == 1)) && (ArchVersion() >= 7))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldmib_ldmed;
    ins.m_to_string = decode_ldmib_ldmed_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldmib_ldmed_a1";
    ins.encoding = encoding;
    ins.wback = wback;
    ins.registers = registers;
    ins.n = n;
    ins.cond = cond;
    ins.W = W;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldr_immediate_thumb_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  imm5 = get_bits(opcode, 10,  6);
    int    Rn = get_bits(opcode,  5,  3);
    int    Rt = get_bits(opcode,  2,  0);
    int index = 0;
    int imm32 = 0;
    int n = 0;
    int add = 0;
    int wback = 0;
    int t = 0;

    t = UInt(Rt);
    n = UInt(Rn);
    imm32 = ZeroExtend(Concatenate(imm5, 0, 2), 32);
    index = true;
    add = true;
    wback = false;
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldr_immediate_thumb;
    ins.m_to_string = decode_ldr_immediate_thumb_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldr_immediate_thumb_t1";
    ins.encoding = encoding;
    ins.index = index;
    ins.imm32 = imm32;
    ins.n = n;
    ins.add = add;
    ins.wback = wback;
    ins.t = t;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldr_immediate_thumb_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rt = get_bits(opcode, 10,  8);
    int  imm8 = get_bits(opcode,  7,  0);
    int index = 0;
    int imm32 = 0;
    int n = 0;
    int add = 0;
    int wback = 0;
    int t = 0;

    t = UInt(Rt);
    n = 13;
    imm32 = ZeroExtend(Concatenate(imm8, 0, 2), 32);
    index = true;
    add = true;
    wback = false;
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldr_immediate_thumb;
    ins.m_to_string = decode_ldr_immediate_thumb_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldr_immediate_thumb_t2";
    ins.encoding = encoding;
    ins.index = index;
    ins.imm32 = imm32;
    ins.n = n;
    ins.add = add;
    ins.wback = wback;
    ins.t = t;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldr_immediate_thumb_t3(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int imm12 = get_bits(opcode, 11,  0);
    int index = 0;
    int imm32 = 0;
    int n = 0;
    int add = 0;
    int wback = 0;
    int t = 0;

    if (unlikely((Rn == 15))) {
        return SeeInstruction("LDR (literal)");
    }
    t = UInt(Rt);
    n = UInt(Rn);
    imm32 = ZeroExtend(imm12, 32);
    index = true;
    add = true;
    wback = false;
    if (unlikely((((t == 15) && InITBlock()) && !LastInITBlock()))) {
        return UnpredictableInstruction("Reason: (((t == 15) && InITBlock()) && !LastInITBlock())");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldr_immediate_thumb;
    ins.m_to_string = decode_ldr_immediate_thumb_t3_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldr_immediate_thumb_t3";
    ins.encoding = encoding;
    ins.index = index;
    ins.imm32 = imm32;
    ins.n = n;
    ins.add = add;
    ins.wback = wback;
    ins.t = t;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldr_immediate_thumb_t4(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int     P = get_bit(opcode, 10);
    int     U = get_bit(opcode,  9);
    int     W = get_bit(opcode,  8);
    int  imm8 = get_bits(opcode,  7,  0);
    int index = 0;
    int imm32 = 0;
    int n = 0;
    int add = 0;
    int wback = 0;
    int t = 0;

    if (unlikely((Rn == 15))) {
        return SeeInstruction("LDR (literal)");
    }
    if (unlikely((((P == 1) && (U == 1)) && (W == 0)))) {
        return SeeInstruction("LDRT");
    }
    if (unlikely((((((Rn == 13) && (P == 0)) && (U == 1)) && (W == 1)) && (imm8 == 4)))) {
        return SeeInstruction("POP");
    }
    if (unlikely(((P == 0) && (W == 0)))) {
        return UndefinedInstruction("Reason: ((P == 0) && (W == 0))");
    }
    t = UInt(Rt);
    n = UInt(Rn);
    imm32 = ZeroExtend(imm8, 32);
    index = (P == 1);
    add = (U == 1);
    wback = (W == 1);
    if (unlikely(((wback && (n == t)) || (((t == 15) && InITBlock()) && !LastInITBlock())))) {
        return UnpredictableInstruction("Reason: ((wback && (n == t)) || (((t == 15) && InITBlock()) && !LastInITBlock()))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldr_immediate_thumb;
    ins.m_to_string = decode_ldr_immediate_thumb_t4_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldr_immediate_thumb_t4";
    ins.encoding = encoding;
    ins.index = index;
    ins.imm32 = imm32;
    ins.n = n;
    ins.add = add;
    ins.wback = wback;
    ins.t = t;
    ins.P = P;
    ins.U = U;
    ins.W = W;

    return ins;
}

ARMInstruction ARMDecoder::decode_pld_pldw_immediate_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 23);
    int     R = get_bit(opcode, 22);
    int    Rn = get_bits(opcode, 19, 16);
    int imm12 = get_bits(opcode, 11,  0);
    int add = 0;
    int is_pldw = 0;
    int imm32 = 0;
    int n = 0;

    n = UInt(Rn);
    imm32 = ZeroExtend(imm12, 32);
    add = (U == 1);
    is_pldw = (R == 0);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = pld_pldw_immediate;
    ins.m_to_string = decode_pld_pldw_immediate_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_pld_pldw_immediate_a1";
    ins.encoding = encoding;
    ins.add = add;
    ins.is_pldw = is_pldw;
    ins.imm32 = imm32;
    ins.n = n;
    ins.U = U;

    return ins;
}

ARMInstruction ARMDecoder::decode_pld_literal_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 23);
    int imm12 = get_bits(opcode, 11,  0);
    int add = 0;
    int imm32 = 0;

    imm32 = ZeroExtend(imm12, 32);
    add = (U == 1);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = pld_literal;
    ins.m_to_string = decode_pld_literal_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_pld_literal_a1";
    ins.encoding = encoding;
    ins.add = add;
    ins.imm32 = imm32;
    ins.U = U;

    return ins;
}

ARMInstruction ARMDecoder::decode_pld_pldw_register_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 23);
    int     R = get_bit(opcode, 22);
    int    Rn = get_bits(opcode, 19, 16);
    int  imm5 = get_bits(opcode, 11,  7);
    int  type = get_bits(opcode,  6,  5);
    int    Rm = get_bits(opcode,  3,  0);
    int shift_t = 0;
    int m = 0;
    int n = 0;
    int add = 0;
    int is_pldw = 0;
    int shift_n = 0;

    n = UInt(Rn);
    m = UInt(Rm);
    add = (U == 1);
    is_pldw = (R == 0);
    std::tie(shift_t, shift_n) = DecodeImmShift(type, imm5);
    if (unlikely(((m == 15) || ((n == 15) && is_pldw)))) {
        return UnpredictableInstruction("Reason: ((m == 15) || ((n == 15) && is_pldw))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = pld_pldw_register;
    ins.m_to_string = decode_pld_pldw_register_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_pld_pldw_register_a1";
    ins.encoding = encoding;
    ins.shift_t = shift_t;
    ins.m = m;
    ins.n = n;
    ins.add = add;
    ins.is_pldw = is_pldw;
    ins.shift_n = shift_n;
    ins.U = U;
    ins.type = type;

    return ins;
}

ARMInstruction ARMDecoder::decode_pli_register_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int  imm2 = get_bits(opcode,  5,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int shift_n = 0;
    int add = 0;
    int m = 0;
    int shift_t = 0;
    int n = 0;

    if (unlikely((Rn == 15))) {
        return SeeInstruction("PLI (immediate, literal)");
    }
    n = UInt(Rn);
    m = UInt(Rm);
    add = true;
    shift_t = SRType_LSL, shift_n = UInt(imm2);
    if (unlikely((m == 13 || m == 15))) {
        return UnpredictableInstruction("Reason: (m == 13 || m == 15)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = pli_register;
    ins.m_to_string = decode_pli_register_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_pli_register_t1";
    ins.encoding = encoding;
    ins.shift_n = shift_n;
    ins.add = add;
    ins.m = m;
    ins.shift_t = shift_t;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_pli_register_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 23);
    int    Rn = get_bits(opcode, 19, 16);
    int  imm5 = get_bits(opcode, 11,  7);
    int  type = get_bits(opcode,  6,  5);
    int    Rm = get_bits(opcode,  3,  0);
    int shift_n = 0;
    int add = 0;
    int m = 0;
    int shift_t = 0;
    int n = 0;

    n = UInt(Rn);
    m = UInt(Rm);
    add = (U == 1);
    std::tie(shift_t, shift_n) = DecodeImmShift(type, imm5);
    if (unlikely((m == 15))) {
        return UnpredictableInstruction("Reason: (m == 15)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = pli_register;
    ins.m_to_string = decode_pli_register_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_pli_register_a1";
    ins.encoding = encoding;
    ins.shift_n = shift_n;
    ins.add = add;
    ins.m = m;
    ins.shift_t = shift_t;
    ins.n = n;
    ins.U = U;
    ins.type = type;

    return ins;
}

ARMInstruction ARMDecoder::decode_pli_immediate_literal_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 23);
    int    Rn = get_bits(opcode, 19, 16);
    int imm12 = get_bits(opcode, 11,  0);
    int add = 0;
    int imm32 = 0;
    int n = 0;

    n = UInt(Rn);
    imm32 = ZeroExtend(imm12, 32);
    add = (U == 1);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = pli_immediate_literal;
    ins.m_to_string = decode_pli_immediate_literal_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_pli_immediate_literal_a1";
    ins.encoding = encoding;
    ins.add = add;
    ins.imm32 = imm32;
    ins.n = n;
    ins.U = U;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldr_immediate_arm_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     P = get_bit(opcode, 24);
    int     U = get_bit(opcode, 23);
    int     W = get_bit(opcode, 21);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int imm12 = get_bits(opcode, 11,  0);
    int index = 0;
    int imm32 = 0;
    int n = 0;
    int add = 0;
    int wback = 0;
    int t = 0;

    if (unlikely((Rn == 15))) {
        return SeeInstruction("LDR (literal)");
    }
    if (unlikely(((P == 0) && (W == 1)))) {
        return SeeInstruction("LDRT");
    }
    if (unlikely((((((Rn == 13) && (P == 0)) && (U == 1)) && (W == 0)) && (imm12 == 4)))) {
        return SeeInstruction("POP");
    }
    t = UInt(Rt);
    n = UInt(Rn);
    imm32 = ZeroExtend(imm12, 32);
    index = (P == 1);
    add = (U == 1);
    wback = ((P == 0) || (W == 1));
    if (unlikely((wback && (n == t)))) {
        return UnpredictableInstruction("Reason: (wback && (n == t))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldr_immediate_arm;
    ins.m_to_string = decode_ldr_immediate_arm_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldr_immediate_arm_a1";
    ins.encoding = encoding;
    ins.index = index;
    ins.imm32 = imm32;
    ins.n = n;
    ins.add = add;
    ins.wback = wback;
    ins.t = t;
    ins.cond = cond;
    ins.P = P;
    ins.U = U;
    ins.W = W;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldr_literal_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rt = get_bits(opcode, 10,  8);
    int  imm8 = get_bits(opcode,  7,  0);
    int add = 0;
    int t = 0;
    int imm32 = 0;

    t = UInt(Rt);
    imm32 = ZeroExtend(Concatenate(imm8, 0, 2), 32);
    add = true;
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldr_literal;
    ins.m_to_string = decode_ldr_literal_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldr_literal_t1";
    ins.encoding = encoding;
    ins.add = add;
    ins.t = t;
    ins.imm32 = imm32;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldr_literal_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 23);
    int    Rt = get_bits(opcode, 15, 12);
    int imm12 = get_bits(opcode, 11,  0);
    int add = 0;
    int t = 0;
    int imm32 = 0;

    t = UInt(Rt);
    imm32 = ZeroExtend(imm12, 32);
    add = (U == 1);
    if (unlikely((((t == 15) && InITBlock()) && !LastInITBlock()))) {
        return UnpredictableInstruction("Reason: (((t == 15) && InITBlock()) && !LastInITBlock())");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldr_literal;
    ins.m_to_string = decode_ldr_literal_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldr_literal_t2";
    ins.encoding = encoding;
    ins.add = add;
    ins.t = t;
    ins.imm32 = imm32;
    ins.U = U;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldr_literal_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     U = get_bit(opcode, 23);
    int    Rt = get_bits(opcode, 15, 12);
    int imm12 = get_bits(opcode, 11,  0);
    int add = 0;
    int t = 0;
    int imm32 = 0;

    t = UInt(Rt);
    imm32 = ZeroExtend(imm12, 32);
    add = (U == 1);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldr_literal;
    ins.m_to_string = decode_ldr_literal_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldr_literal_a1";
    ins.encoding = encoding;
    ins.add = add;
    ins.t = t;
    ins.imm32 = imm32;
    ins.cond = cond;
    ins.U = U;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldr_register_thumb_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rm = get_bits(opcode,  8,  6);
    int    Rn = get_bits(opcode,  5,  3);
    int    Rt = get_bits(opcode,  2,  0);
    int shift_n = 0;
    int shift_t = 0;
    int m = 0;
    int t = 0;
    int n = 0;

    if (unlikely((CurrentInstrSet() == InstrSet_ThumbEE))) {
        return SeeInstruction("Modified operation in ThumbEE");
    }
    t = UInt(Rt);
    n = UInt(Rn);
    m = UInt(Rm);
    shift_t = SRType_LSL, shift_n = 0;
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldr_register_thumb;
    ins.m_to_string = decode_ldr_register_thumb_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldr_register_thumb_t1";
    ins.encoding = encoding;
    ins.shift_n = shift_n;
    ins.shift_t = shift_t;
    ins.m = m;
    ins.t = t;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldr_register_thumb_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int  imm2 = get_bits(opcode,  5,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int shift_n = 0;
    int shift_t = 0;
    int m = 0;
    int t = 0;
    int n = 0;

    if (unlikely((Rn == 15))) {
        return SeeInstruction("LDR (literal)");
    }
    t = UInt(Rt);
    n = UInt(Rn);
    m = UInt(Rm);
    shift_t = SRType_LSL, shift_n = UInt(imm2);
    if (unlikely((m == 13 || m == 15))) {
        return UnpredictableInstruction("Reason: (m == 13 || m == 15)");
    }
    if (unlikely((((t == 15) && InITBlock()) && !LastInITBlock()))) {
        return UnpredictableInstruction("Reason: (((t == 15) && InITBlock()) && !LastInITBlock())");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldr_register_thumb;
    ins.m_to_string = decode_ldr_register_thumb_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldr_register_thumb_t2";
    ins.encoding = encoding;
    ins.shift_n = shift_n;
    ins.shift_t = shift_t;
    ins.m = m;
    ins.t = t;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldr_register_arm_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     P = get_bit(opcode, 24);
    int     U = get_bit(opcode, 23);
    int     W = get_bit(opcode, 21);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int  imm5 = get_bits(opcode, 11,  7);
    int  type = get_bits(opcode,  6,  5);
    int    Rm = get_bits(opcode,  3,  0);
    int index = 0;
    int shift_t = 0;
    int m = 0;
    int n = 0;
    int add = 0;
    int wback = 0;
    int t = 0;
    int shift_n = 0;

    if (unlikely(((P == 0) && (W == 1)))) {
        return SeeInstruction("LDRT");
    }
    t = UInt(Rt);
    n = UInt(Rn);
    m = UInt(Rm);
    index = (P == 1);
    add = (U == 1);
    wback = ((P == 0) || (W == 1));
    std::tie(shift_t, shift_n) = DecodeImmShift(type, imm5);
    if (unlikely((m == 15))) {
        return UnpredictableInstruction("Reason: (m == 15)");
    }
    if (unlikely((wback && ((n == 15) || (n == t))))) {
        return UnpredictableInstruction("Reason: (wback && ((n == 15) || (n == t)))");
    }
    if (unlikely((((ArchVersion() < 6) && wback) && (m == n)))) {
        return UnpredictableInstruction("Reason: (((ArchVersion() < 6) && wback) && (m == n))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldr_register_arm;
    ins.m_to_string = decode_ldr_register_arm_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldr_register_arm_a1";
    ins.encoding = encoding;
    ins.index = index;
    ins.shift_t = shift_t;
    ins.m = m;
    ins.n = n;
    ins.add = add;
    ins.wback = wback;
    ins.t = t;
    ins.shift_n = shift_n;
    ins.cond = cond;
    ins.P = P;
    ins.U = U;
    ins.W = W;
    ins.type = type;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldrb_immediate_thumb_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  imm5 = get_bits(opcode, 10,  6);
    int    Rn = get_bits(opcode,  5,  3);
    int    Rt = get_bits(opcode,  2,  0);
    int index = 0;
    int imm32 = 0;
    int n = 0;
    int add = 0;
    int wback = 0;
    int t = 0;

    t = UInt(Rt);
    n = UInt(Rn);
    imm32 = ZeroExtend(imm5, 32);
    index = true;
    add = true;
    wback = false;
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldrb_immediate_thumb;
    ins.m_to_string = decode_ldrb_immediate_thumb_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldrb_immediate_thumb_t1";
    ins.encoding = encoding;
    ins.index = index;
    ins.imm32 = imm32;
    ins.n = n;
    ins.add = add;
    ins.wback = wback;
    ins.t = t;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldrb_immediate_thumb_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int imm12 = get_bits(opcode, 11,  0);
    int index = 0;
    int imm32 = 0;
    int n = 0;
    int add = 0;
    int wback = 0;
    int t = 0;

    if (unlikely((Rt == 15))) {
        return SeeInstruction("PLD");
    }
    if (unlikely((Rn == 15))) {
        return SeeInstruction("LDRB (literal)");
    }
    t = UInt(Rt);
    n = UInt(Rn);
    imm32 = ZeroExtend(imm12, 32);
    index = true;
    add = true;
    wback = false;
    if (unlikely((t == 13))) {
        return UnpredictableInstruction("Reason: (t == 13)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldrb_immediate_thumb;
    ins.m_to_string = decode_ldrb_immediate_thumb_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldrb_immediate_thumb_t2";
    ins.encoding = encoding;
    ins.index = index;
    ins.imm32 = imm32;
    ins.n = n;
    ins.add = add;
    ins.wback = wback;
    ins.t = t;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldrb_immediate_thumb_t3(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int     P = get_bit(opcode, 10);
    int     U = get_bit(opcode,  9);
    int     W = get_bit(opcode,  8);
    int  imm8 = get_bits(opcode,  7,  0);
    int index = 0;
    int imm32 = 0;
    int n = 0;
    int add = 0;
    int wback = 0;
    int t = 0;

    if (unlikely(((((Rt == 15) && (P == 1)) && (U == 0)) && (W == 0)))) {
        return SeeInstruction("PLD, PLDW (immediate)");
    }
    if (unlikely((Rn == 15))) {
        return SeeInstruction("LDRB (literal)");
    }
    if (unlikely((((P == 1) && (U == 1)) && (W == 0)))) {
        return SeeInstruction("LDRBT");
    }
    if (unlikely(((P == 0) && (W == 0)))) {
        return UndefinedInstruction("Reason: ((P == 0) && (W == 0))");
    }
    t = UInt(Rt);
    n = UInt(Rn);
    imm32 = ZeroExtend(imm8, 32);
    index = (P == 1);
    add = (U == 1);
    wback = (W == 1);
    if (unlikely((((t == 13) || ((t == 15) && (W == 1))) || (wback && (n == t))))) {
        return UnpredictableInstruction("Reason: (((t == 13) || ((t == 15) && (W == 1))) || (wback && (n == t)))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldrb_immediate_thumb;
    ins.m_to_string = decode_ldrb_immediate_thumb_t3_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldrb_immediate_thumb_t3";
    ins.encoding = encoding;
    ins.index = index;
    ins.imm32 = imm32;
    ins.n = n;
    ins.add = add;
    ins.wback = wback;
    ins.t = t;
    ins.P = P;
    ins.U = U;
    ins.W = W;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldrb_immediate_arm_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     P = get_bit(opcode, 24);
    int     U = get_bit(opcode, 23);
    int     W = get_bit(opcode, 21);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int imm12 = get_bits(opcode, 11,  0);
    int index = 0;
    int imm32 = 0;
    int n = 0;
    int add = 0;
    int wback = 0;
    int t = 0;

    if (unlikely((Rn == 15))) {
        return SeeInstruction("LDRB (literal)");
    }
    if (unlikely(((P == 0) && (W == 1)))) {
        return SeeInstruction("LDRBT");
    }
    t = UInt(Rt);
    n = UInt(Rn);
    imm32 = ZeroExtend(imm12, 32);
    index = (P == 1);
    add = (U == 1);
    wback = ((P == 0) || (W == 1));
    if (unlikely(((t == 15) || (wback && (n == t))))) {
        return UnpredictableInstruction("Reason: ((t == 15) || (wback && (n == t)))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldrb_immediate_arm;
    ins.m_to_string = decode_ldrb_immediate_arm_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldrb_immediate_arm_a1";
    ins.encoding = encoding;
    ins.index = index;
    ins.imm32 = imm32;
    ins.n = n;
    ins.add = add;
    ins.wback = wback;
    ins.t = t;
    ins.cond = cond;
    ins.P = P;
    ins.U = U;
    ins.W = W;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldrb_literal_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 23);
    int    Rt = get_bits(opcode, 15, 12);
    int imm12 = get_bits(opcode, 11,  0);
    int add = 0;
    int t = 0;
    int imm32 = 0;

    if (unlikely((Rt == 15))) {
        return SeeInstruction("PLD");
    }
    t = UInt(Rt);
    imm32 = ZeroExtend(imm12, 32);
    add = (U == 1);
    if (unlikely((t == 13))) {
        return UnpredictableInstruction("Reason: (t == 13)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldrb_literal;
    ins.m_to_string = decode_ldrb_literal_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldrb_literal_t1";
    ins.encoding = encoding;
    ins.add = add;
    ins.t = t;
    ins.imm32 = imm32;
    ins.U = U;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldrb_literal_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     U = get_bit(opcode, 23);
    int    Rt = get_bits(opcode, 15, 12);
    int imm12 = get_bits(opcode, 11,  0);
    int add = 0;
    int t = 0;
    int imm32 = 0;

    t = UInt(Rt);
    imm32 = ZeroExtend(imm12, 32);
    add = (U == 1);
    if (unlikely((t == 15))) {
        return UnpredictableInstruction("Reason: (t == 15)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldrb_literal;
    ins.m_to_string = decode_ldrb_literal_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldrb_literal_a1";
    ins.encoding = encoding;
    ins.add = add;
    ins.t = t;
    ins.imm32 = imm32;
    ins.cond = cond;
    ins.U = U;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldrb_register_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rm = get_bits(opcode,  8,  6);
    int    Rn = get_bits(opcode,  5,  3);
    int    Rt = get_bits(opcode,  2,  0);
    int index = 0;
    int shift_t = 0;
    int m = 0;
    int n = 0;
    int add = 0;
    int wback = 0;
    int t = 0;
    int shift_n = 0;

    t = UInt(Rt);
    n = UInt(Rn);
    m = UInt(Rm);
    index = true;
    add = true;
    wback = false;
    shift_t = SRType_LSL, shift_n = 0;
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldrb_register;
    ins.m_to_string = decode_ldrb_register_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldrb_register_t1";
    ins.encoding = encoding;
    ins.index = index;
    ins.shift_t = shift_t;
    ins.m = m;
    ins.n = n;
    ins.add = add;
    ins.wback = wback;
    ins.t = t;
    ins.shift_n = shift_n;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldrb_register_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int  imm2 = get_bits(opcode,  5,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int index = 0;
    int shift_t = 0;
    int m = 0;
    int n = 0;
    int add = 0;
    int wback = 0;
    int t = 0;
    int shift_n = 0;

    if (unlikely((Rt == 15))) {
        return SeeInstruction("PLD");
    }
    if (unlikely((Rn == 15))) {
        return SeeInstruction("LDRB (literal)");
    }
    t = UInt(Rt);
    n = UInt(Rn);
    m = UInt(Rm);
    index = true;
    add = true;
    wback = false;
    shift_t = SRType_LSL, shift_n = UInt(imm2);
    if (unlikely(((t == 13) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: ((t == 13) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldrb_register;
    ins.m_to_string = decode_ldrb_register_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldrb_register_t2";
    ins.encoding = encoding;
    ins.index = index;
    ins.shift_t = shift_t;
    ins.m = m;
    ins.n = n;
    ins.add = add;
    ins.wback = wback;
    ins.t = t;
    ins.shift_n = shift_n;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldrb_register_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     P = get_bit(opcode, 24);
    int     U = get_bit(opcode, 23);
    int     W = get_bit(opcode, 21);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int  imm5 = get_bits(opcode, 11,  7);
    int  type = get_bits(opcode,  6,  5);
    int    Rm = get_bits(opcode,  3,  0);
    int index = 0;
    int shift_t = 0;
    int m = 0;
    int n = 0;
    int add = 0;
    int wback = 0;
    int t = 0;
    int shift_n = 0;

    if (unlikely(((P == 0) && (W == 1)))) {
        return SeeInstruction("LDRBT");
    }
    t = UInt(Rt);
    n = UInt(Rn);
    m = UInt(Rm);
    index = (P == 1);
    add = (U == 1);
    wback = ((P == 0) || (W == 1));
    std::tie(shift_t, shift_n) = DecodeImmShift(type, imm5);
    if (unlikely(((t == 15) || (m == 15)))) {
        return UnpredictableInstruction("Reason: ((t == 15) || (m == 15))");
    }
    if (unlikely((wback && ((n == 15) || (n == t))))) {
        return UnpredictableInstruction("Reason: (wback && ((n == 15) || (n == t)))");
    }
    if (unlikely((((ArchVersion() < 6) && wback) && (m == n)))) {
        return UnpredictableInstruction("Reason: (((ArchVersion() < 6) && wback) && (m == n))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldrb_register;
    ins.m_to_string = decode_ldrb_register_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldrb_register_a1";
    ins.encoding = encoding;
    ins.index = index;
    ins.shift_t = shift_t;
    ins.m = m;
    ins.n = n;
    ins.add = add;
    ins.wback = wback;
    ins.t = t;
    ins.shift_n = shift_n;
    ins.cond = cond;
    ins.P = P;
    ins.U = U;
    ins.W = W;
    ins.type = type;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldrbt_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int  imm8 = get_bits(opcode,  7,  0);
    int postindex = 0;
    int imm32 = 0;
    int n = 0;
    int register_form = 0;
    int add = 0;
    int t = 0;

    if (unlikely((Rn == 15))) {
        return SeeInstruction("LDRB (literal)");
    }
    t = UInt(Rt);
    n = UInt(Rn);
    postindex = false;
    add = true;
    register_form = false;
    imm32 = ZeroExtend(imm8, 32);
    if (unlikely((t == 13 || t == 15))) {
        return UnpredictableInstruction("Reason: (t == 13 || t == 15)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldrbt;
    ins.m_to_string = decode_ldrbt_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldrbt_t1";
    ins.encoding = encoding;
    ins.postindex = postindex;
    ins.imm32 = imm32;
    ins.n = n;
    ins.register_form = register_form;
    ins.add = add;
    ins.t = t;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldrbt_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     U = get_bit(opcode, 23);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int imm12 = get_bits(opcode, 11,  0);
    int postindex = 0;
    int imm32 = 0;
    int n = 0;
    int register_form = 0;
    int add = 0;
    int t = 0;

    t = UInt(Rt);
    n = UInt(Rn);
    postindex = true;
    add = (U == 1);
    register_form = false;
    imm32 = ZeroExtend(imm12, 32);
    if (unlikely((((t == 15) || (n == 15)) || (n == t)))) {
        return UnpredictableInstruction("Reason: (((t == 15) || (n == 15)) || (n == t))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldrbt;
    ins.m_to_string = decode_ldrbt_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldrbt_a1";
    ins.encoding = encoding;
    ins.postindex = postindex;
    ins.imm32 = imm32;
    ins.n = n;
    ins.register_form = register_form;
    ins.add = add;
    ins.t = t;
    ins.cond = cond;
    ins.U = U;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldrbt_a2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     U = get_bit(opcode, 23);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int  imm5 = get_bits(opcode, 11,  7);
    int  type = get_bits(opcode,  6,  5);
    int    Rm = get_bits(opcode,  3,  0);
    int shift_t = 0;
    int postindex = 0;
    int m = 0;
    int n = 0;
    int register_form = 0;
    int add = 0;
    int t = 0;
    int shift_n = 0;

    t = UInt(Rt);
    n = UInt(Rn);
    m = UInt(Rm);
    postindex = true;
    add = (U == 1);
    register_form = true;
    std::tie(shift_t, shift_n) = DecodeImmShift(type, imm5);
    if (unlikely(((((t == 15) || (n == 15)) || (n == t)) || (m == 15)))) {
        return UnpredictableInstruction("Reason: ((((t == 15) || (n == 15)) || (n == t)) || (m == 15))");
    }
    if (unlikely(((ArchVersion() < 6) && (m == n)))) {
        return UnpredictableInstruction("Reason: ((ArchVersion() < 6) && (m == n))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldrbt;
    ins.m_to_string = decode_ldrbt_a2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldrbt_a2";
    ins.encoding = encoding;
    ins.shift_t = shift_t;
    ins.postindex = postindex;
    ins.m = m;
    ins.n = n;
    ins.register_form = register_form;
    ins.add = add;
    ins.t = t;
    ins.shift_n = shift_n;
    ins.cond = cond;
    ins.U = U;
    ins.type = type;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldrd_immediate_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     P = get_bit(opcode, 24);
    int     U = get_bit(opcode, 23);
    int     W = get_bit(opcode, 21);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int   Rt2 = get_bits(opcode, 11,  8);
    int  imm8 = get_bits(opcode,  7,  0);
    int index = 0;
    int t2 = 0;
    int imm32 = 0;
    int n = 0;
    int add = 0;
    int wback = 0;
    int t = 0;

    if (unlikely(((P == 0) && (W == 0)))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely((Rn == 15))) {
        return SeeInstruction("LDRD (literal)");
    }
    t = UInt(Rt);
    t2 = UInt(Rt2);
    n = UInt(Rn);
    imm32 = ZeroExtend(Concatenate(imm8, 0, 2), 32);
    index = (P == 1);
    add = (U == 1);
    wback = (W == 1);
    if (unlikely((wback && ((n == t) || (n == t2))))) {
        return UnpredictableInstruction("Reason: (wback && ((n == t) || (n == t2)))");
    }
    if (unlikely((((t == 13 || t == 15) || (t2 == 13 || t2 == 15)) || (t == t2)))) {
        return UnpredictableInstruction("Reason: (((t == 13 || t == 15) || (t2 == 13 || t2 == 15)) || (t == t2))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldrd_immediate;
    ins.m_to_string = decode_ldrd_immediate_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldrd_immediate_t1";
    ins.encoding = encoding;
    ins.index = index;
    ins.t2 = t2;
    ins.imm32 = imm32;
    ins.n = n;
    ins.add = add;
    ins.wback = wback;
    ins.t = t;
    ins.P = P;
    ins.U = U;
    ins.W = W;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldrd_immediate_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     P = get_bit(opcode, 24);
    int     U = get_bit(opcode, 23);
    int     W = get_bit(opcode, 21);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int imm4H = get_bits(opcode, 11,  8);
    int imm4L = get_bits(opcode,  3,  0);
    int index = 0;
    int t2 = 0;
    int imm32 = 0;
    int n = 0;
    int add = 0;
    int wback = 0;
    int t = 0;

    if (unlikely((Rn == 15))) {
        return SeeInstruction("LDRD (literal)");
    }
    if (unlikely((get_bit(Rt, 0) == 1))) {
        return UnpredictableInstruction("Reason: (get_bit(Rt, 0) == 1)");
    }
    t = UInt(Rt);
    t2 = (t + 1);
    n = UInt(Rn);
    imm32 = ZeroExtend(Concatenate(imm4H, imm4L, 4), 32);
    index = (P == 1);
    add = (U == 1);
    wback = ((P == 0) || (W == 1));
    if (unlikely(((P == 0) && (W == 1)))) {
        return UnpredictableInstruction("Reason: ((P == 0) && (W == 1))");
    }
    if (unlikely((wback && ((n == t) || (n == t2))))) {
        return UnpredictableInstruction("Reason: (wback && ((n == t) || (n == t2)))");
    }
    if (unlikely((t2 == 15))) {
        return UnpredictableInstruction("Reason: (t2 == 15)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldrd_immediate;
    ins.m_to_string = decode_ldrd_immediate_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldrd_immediate_a1";
    ins.encoding = encoding;
    ins.index = index;
    ins.t2 = t2;
    ins.imm32 = imm32;
    ins.n = n;
    ins.add = add;
    ins.wback = wback;
    ins.t = t;
    ins.cond = cond;
    ins.P = P;
    ins.U = U;
    ins.W = W;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldrd_literal_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     P = get_bit(opcode, 24);
    int     U = get_bit(opcode, 23);
    int     W = get_bit(opcode, 21);
    int    Rt = get_bits(opcode, 15, 12);
    int   Rt2 = get_bits(opcode, 11,  8);
    int  imm8 = get_bits(opcode,  7,  0);
    int add = 0;
    int t2 = 0;
    int t = 0;
    int imm32 = 0;

    if (unlikely(((P == 0) && (W == 0)))) {
        return SeeInstruction("Related encodings");
    }
    t = UInt(Rt);
    t2 = UInt(Rt2);
    imm32 = ZeroExtend(Concatenate(imm8, 0, 2), 32);
    add = (U == 1);
    if (unlikely((((t == 13 || t == 15) || (t2 == 13 || t2 == 15)) || (t == t2)))) {
        return UnpredictableInstruction("Reason: (((t == 13 || t == 15) || (t2 == 13 || t2 == 15)) || (t == t2))");
    }
    if (unlikely((W == 1))) {
        return UnpredictableInstruction("Reason: (W == 1)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldrd_literal;
    ins.m_to_string = decode_ldrd_literal_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldrd_literal_t1";
    ins.encoding = encoding;
    ins.add = add;
    ins.t2 = t2;
    ins.t = t;
    ins.imm32 = imm32;
    ins.P = P;
    ins.U = U;
    ins.W = W;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldrd_literal_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     U = get_bit(opcode, 23);
    int    Rt = get_bits(opcode, 15, 12);
    int imm4H = get_bits(opcode, 11,  8);
    int imm4L = get_bits(opcode,  3,  0);
    int add = 0;
    int t2 = 0;
    int t = 0;
    int imm32 = 0;

    if (unlikely((get_bit(Rt, 0) == 1))) {
        return UnpredictableInstruction("Reason: (get_bit(Rt, 0) == 1)");
    }
    t = UInt(Rt);
    t2 = (t + 1);
    imm32 = ZeroExtend(Concatenate(imm4H, imm4L, 4), 32);
    add = (U == 1);
    if (unlikely((t2 == 15))) {
        return UnpredictableInstruction("Reason: (t2 == 15)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldrd_literal;
    ins.m_to_string = decode_ldrd_literal_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldrd_literal_a1";
    ins.encoding = encoding;
    ins.add = add;
    ins.t2 = t2;
    ins.t = t;
    ins.imm32 = imm32;
    ins.cond = cond;
    ins.U = U;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldrd_register_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     P = get_bit(opcode, 24);
    int     U = get_bit(opcode, 23);
    int     W = get_bit(opcode, 21);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode,  3,  0);
    int index = 0;
    int t2 = 0;
    int m = 0;
    int n = 0;
    int add = 0;
    int wback = 0;
    int t = 0;

    if (unlikely((get_bit(Rt, 0) == 1))) {
        return UnpredictableInstruction("Reason: (get_bit(Rt, 0) == 1)");
    }
    t = UInt(Rt);
    t2 = (t + 1);
    n = UInt(Rn);
    m = UInt(Rm);
    index = (P == 1);
    add = (U == 1);
    wback = ((P == 0) || (W == 1));
    if (unlikely(((P == 0) && (W == 1)))) {
        return UnpredictableInstruction("Reason: ((P == 0) && (W == 1))");
    }
    if (unlikely(((((t2 == 15) || (m == 15)) || (m == t)) || (m == t2)))) {
        return UnpredictableInstruction("Reason: ((((t2 == 15) || (m == 15)) || (m == t)) || (m == t2))");
    }
    if (unlikely((wback && (((n == 15) || (n == t)) || (n == t2))))) {
        return UnpredictableInstruction("Reason: (wback && (((n == 15) || (n == t)) || (n == t2)))");
    }
    if (unlikely((((ArchVersion() < 6) && wback) && (m == n)))) {
        return UnpredictableInstruction("Reason: (((ArchVersion() < 6) && wback) && (m == n))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldrd_register;
    ins.m_to_string = decode_ldrd_register_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldrd_register_a1";
    ins.encoding = encoding;
    ins.index = index;
    ins.t2 = t2;
    ins.m = m;
    ins.n = n;
    ins.add = add;
    ins.wback = wback;
    ins.t = t;
    ins.cond = cond;
    ins.P = P;
    ins.U = U;
    ins.W = W;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldrex_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int  imm8 = get_bits(opcode,  7,  0);
    int imm32 = 0;
    int t = 0;
    int n = 0;

    t = UInt(Rt);
    n = UInt(Rn);
    imm32 = ZeroExtend(Concatenate(imm8, 0, 2), 32);
    if (unlikely(((t == 13 || t == 15) || (n == 15)))) {
        return UnpredictableInstruction("Reason: ((t == 13 || t == 15) || (n == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldrex;
    ins.m_to_string = decode_ldrex_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldrex_t1";
    ins.encoding = encoding;
    ins.imm32 = imm32;
    ins.t = t;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldrex_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int imm32 = 0;
    int t = 0;
    int n = 0;

    t = UInt(Rt);
    n = UInt(Rn);
    imm32 = Zeros(32);
    if (unlikely(((t == 15) || (n == 15)))) {
        return UnpredictableInstruction("Reason: ((t == 15) || (n == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldrex;
    ins.m_to_string = decode_ldrex_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldrex_a1";
    ins.encoding = encoding;
    ins.imm32 = imm32;
    ins.t = t;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldrexb_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int t = 0;
    int n = 0;

    t = UInt(Rt);
    n = UInt(Rn);
    if (unlikely(((t == 13 || t == 15) || (n == 15)))) {
        return UnpredictableInstruction("Reason: ((t == 13 || t == 15) || (n == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldrexb;
    ins.m_to_string = decode_ldrexb_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldrexb_t1";
    ins.encoding = encoding;
    ins.t = t;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldrexb_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int t = 0;
    int n = 0;

    t = UInt(Rt);
    n = UInt(Rn);
    if (unlikely(((t == 15) || (n == 15)))) {
        return UnpredictableInstruction("Reason: ((t == 15) || (n == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldrexb;
    ins.m_to_string = decode_ldrexb_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldrexb_a1";
    ins.encoding = encoding;
    ins.t = t;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldrexd_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int   Rt2 = get_bits(opcode, 11,  8);
    int t2 = 0;
    int t = 0;
    int n = 0;

    t = UInt(Rt);
    t2 = UInt(Rt2);
    n = UInt(Rn);
    if (unlikely(((((t == 13 || t == 15) || (t2 == 13 || t2 == 15)) || (t == t2)) || (n == 15)))) {
        return UnpredictableInstruction("Reason: ((((t == 13 || t == 15) || (t2 == 13 || t2 == 15)) || (t == t2)) || (n == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldrexd;
    ins.m_to_string = decode_ldrexd_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldrexd_t1";
    ins.encoding = encoding;
    ins.t2 = t2;
    ins.t = t;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldrexd_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int t2 = 0;
    int t = 0;
    int n = 0;

    t = UInt(Rt);
    t2 = (t + 1);
    n = UInt(Rn);
    if (unlikely((((get_bit(Rt, 0) == 1) || (Rt == 14)) || (n == 15)))) {
        return UnpredictableInstruction("Reason: (((get_bit(Rt, 0) == 1) || (Rt == 14)) || (n == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldrexd;
    ins.m_to_string = decode_ldrexd_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldrexd_a1";
    ins.encoding = encoding;
    ins.t2 = t2;
    ins.t = t;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldrexh_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int t = 0;
    int n = 0;

    t = UInt(Rt);
    n = UInt(Rn);
    if (unlikely(((t == 13 || t == 15) || (n == 15)))) {
        return UnpredictableInstruction("Reason: ((t == 13 || t == 15) || (n == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldrexh;
    ins.m_to_string = decode_ldrexh_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldrexh_t1";
    ins.encoding = encoding;
    ins.t = t;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldrexh_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int t = 0;
    int n = 0;

    t = UInt(Rt);
    n = UInt(Rn);
    if (unlikely(((t == 15) || (n == 15)))) {
        return UnpredictableInstruction("Reason: ((t == 15) || (n == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldrexh;
    ins.m_to_string = decode_ldrexh_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldrexh_a1";
    ins.encoding = encoding;
    ins.t = t;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldrh_immediate_thumb_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  imm5 = get_bits(opcode, 10,  6);
    int    Rn = get_bits(opcode,  5,  3);
    int    Rt = get_bits(opcode,  2,  0);
    int index = 0;
    int imm32 = 0;
    int n = 0;
    int add = 0;
    int wback = 0;
    int t = 0;

    t = UInt(Rt);
    n = UInt(Rn);
    imm32 = ZeroExtend(Concatenate(imm5, 0, 1), 32);
    index = true;
    add = true;
    wback = false;
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldrh_immediate_thumb;
    ins.m_to_string = decode_ldrh_immediate_thumb_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldrh_immediate_thumb_t1";
    ins.encoding = encoding;
    ins.index = index;
    ins.imm32 = imm32;
    ins.n = n;
    ins.add = add;
    ins.wback = wback;
    ins.t = t;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldrh_immediate_thumb_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int imm12 = get_bits(opcode, 11,  0);
    int index = 0;
    int imm32 = 0;
    int n = 0;
    int add = 0;
    int wback = 0;
    int t = 0;

    if (unlikely((Rt == 15))) {
        return SeeInstruction("Related instructions");
    }
    if (unlikely((Rn == 15))) {
        return SeeInstruction("LDRH (literal)");
    }
    t = UInt(Rt);
    n = UInt(Rn);
    imm32 = ZeroExtend(imm12, 32);
    index = true;
    add = true;
    wback = false;
    if (unlikely((t == 13))) {
        return UnpredictableInstruction("Reason: (t == 13)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldrh_immediate_thumb;
    ins.m_to_string = decode_ldrh_immediate_thumb_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldrh_immediate_thumb_t2";
    ins.encoding = encoding;
    ins.index = index;
    ins.imm32 = imm32;
    ins.n = n;
    ins.add = add;
    ins.wback = wback;
    ins.t = t;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldrh_immediate_thumb_t3(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int     P = get_bit(opcode, 10);
    int     U = get_bit(opcode,  9);
    int     W = get_bit(opcode,  8);
    int  imm8 = get_bits(opcode,  7,  0);
    int index = 0;
    int imm32 = 0;
    int n = 0;
    int add = 0;
    int wback = 0;
    int t = 0;

    if (unlikely((Rn == 15))) {
        return SeeInstruction("LDRH (literal)");
    }
    if (unlikely(((((Rt == 15) && (P == 1)) && (U == 0)) && (W == 0)))) {
        return SeeInstruction("Related instructions");
    }
    if (unlikely((((P == 1) && (U == 1)) && (W == 0)))) {
        return SeeInstruction("LDRHT");
    }
    if (unlikely(((P == 0) && (W == 0)))) {
        return UndefinedInstruction("Reason: ((P == 0) && (W == 0))");
    }
    t = UInt(Rt);
    n = UInt(Rn);
    imm32 = ZeroExtend(imm8, 32);
    index = (P == 1);
    add = (U == 1);
    wback = (W == 1);
    if (unlikely((((t == 13) || ((t == 15) && (W == 1))) || (wback && (n == t))))) {
        return UnpredictableInstruction("Reason: (((t == 13) || ((t == 15) && (W == 1))) || (wback && (n == t)))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldrh_immediate_thumb;
    ins.m_to_string = decode_ldrh_immediate_thumb_t3_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldrh_immediate_thumb_t3";
    ins.encoding = encoding;
    ins.index = index;
    ins.imm32 = imm32;
    ins.n = n;
    ins.add = add;
    ins.wback = wback;
    ins.t = t;
    ins.P = P;
    ins.U = U;
    ins.W = W;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldrh_immediate_arm_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     P = get_bit(opcode, 24);
    int     U = get_bit(opcode, 23);
    int     W = get_bit(opcode, 21);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int imm4H = get_bits(opcode, 11,  8);
    int imm4L = get_bits(opcode,  3,  0);
    int index = 0;
    int imm32 = 0;
    int n = 0;
    int add = 0;
    int wback = 0;
    int t = 0;

    if (unlikely((Rn == 15))) {
        return SeeInstruction("LDRH (literal)");
    }
    if (unlikely(((P == 0) && (W == 1)))) {
        return SeeInstruction("LDRHT");
    }
    t = UInt(Rt);
    n = UInt(Rn);
    imm32 = ZeroExtend(Concatenate(imm4H, imm4L, 4), 32);
    index = (P == 1);
    add = (U == 1);
    wback = ((P == 0) || (W == 1));
    if (unlikely(((t == 15) || (wback && (n == t))))) {
        return UnpredictableInstruction("Reason: ((t == 15) || (wback && (n == t)))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldrh_immediate_arm;
    ins.m_to_string = decode_ldrh_immediate_arm_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldrh_immediate_arm_a1";
    ins.encoding = encoding;
    ins.index = index;
    ins.imm32 = imm32;
    ins.n = n;
    ins.add = add;
    ins.wback = wback;
    ins.t = t;
    ins.cond = cond;
    ins.P = P;
    ins.U = U;
    ins.W = W;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldrh_literal_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 23);
    int    Rt = get_bits(opcode, 15, 12);
    int imm12 = get_bits(opcode, 11,  0);
    int add = 0;
    int t = 0;
    int imm32 = 0;

    if (unlikely((Rt == 15))) {
        return SeeInstruction("Related instructions");
    }
    t = UInt(Rt);
    imm32 = ZeroExtend(imm12, 32);
    add = (U == 1);
    if (unlikely((t == 13))) {
        return UnpredictableInstruction("Reason: (t == 13)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldrh_literal;
    ins.m_to_string = decode_ldrh_literal_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldrh_literal_t1";
    ins.encoding = encoding;
    ins.add = add;
    ins.t = t;
    ins.imm32 = imm32;
    ins.U = U;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldrh_literal_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     U = get_bit(opcode, 23);
    int    Rt = get_bits(opcode, 15, 12);
    int imm4H = get_bits(opcode, 11,  8);
    int imm4L = get_bits(opcode,  3,  0);
    int add = 0;
    int t = 0;
    int imm32 = 0;

    t = UInt(Rt);
    imm32 = ZeroExtend(Concatenate(imm4H, imm4L, 4), 32);
    add = (U == 1);
    if (unlikely((t == 15))) {
        return UnpredictableInstruction("Reason: (t == 15)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldrh_literal;
    ins.m_to_string = decode_ldrh_literal_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldrh_literal_a1";
    ins.encoding = encoding;
    ins.add = add;
    ins.t = t;
    ins.imm32 = imm32;
    ins.cond = cond;
    ins.U = U;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldrh_register_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rm = get_bits(opcode,  8,  6);
    int    Rn = get_bits(opcode,  5,  3);
    int    Rt = get_bits(opcode,  2,  0);
    int index = 0;
    int shift_t = 0;
    int m = 0;
    int n = 0;
    int add = 0;
    int wback = 0;
    int t = 0;
    int shift_n = 0;

    if (unlikely((CurrentInstrSet() == InstrSet_ThumbEE))) {
        return SeeInstruction("Modified operation in ThumbEE");
    }
    t = UInt(Rt);
    n = UInt(Rn);
    m = UInt(Rm);
    index = true;
    add = true;
    wback = false;
    shift_t = SRType_LSL, shift_n = 0;
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldrh_register;
    ins.m_to_string = decode_ldrh_register_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldrh_register_t1";
    ins.encoding = encoding;
    ins.index = index;
    ins.shift_t = shift_t;
    ins.m = m;
    ins.n = n;
    ins.add = add;
    ins.wback = wback;
    ins.t = t;
    ins.shift_n = shift_n;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldrh_register_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int  imm2 = get_bits(opcode,  5,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int index = 0;
    int shift_t = 0;
    int m = 0;
    int n = 0;
    int add = 0;
    int wback = 0;
    int t = 0;
    int shift_n = 0;

    if (unlikely((Rn == 15))) {
        return SeeInstruction("LDRH (literal)");
    }
    if (unlikely((Rt == 15))) {
        return SeeInstruction("Related instructions");
    }
    t = UInt(Rt);
    n = UInt(Rn);
    m = UInt(Rm);
    index = true;
    add = true;
    wback = false;
    shift_t = SRType_LSL, shift_n = UInt(imm2);
    if (unlikely(((t == 13) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: ((t == 13) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldrh_register;
    ins.m_to_string = decode_ldrh_register_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldrh_register_t2";
    ins.encoding = encoding;
    ins.index = index;
    ins.shift_t = shift_t;
    ins.m = m;
    ins.n = n;
    ins.add = add;
    ins.wback = wback;
    ins.t = t;
    ins.shift_n = shift_n;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldrh_register_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     P = get_bit(opcode, 24);
    int     U = get_bit(opcode, 23);
    int     W = get_bit(opcode, 21);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode,  3,  0);
    int index = 0;
    int shift_t = 0;
    int m = 0;
    int n = 0;
    int add = 0;
    int wback = 0;
    int t = 0;
    int shift_n = 0;

    if (unlikely(((P == 0) && (W == 1)))) {
        return SeeInstruction("LDRHT");
    }
    t = UInt(Rt);
    n = UInt(Rn);
    m = UInt(Rm);
    index = (P == 1);
    add = (U == 1);
    wback = ((P == 0) || (W == 1));
    shift_t = SRType_LSL, shift_n = 0;
    if (unlikely(((t == 15) || (m == 15)))) {
        return UnpredictableInstruction("Reason: ((t == 15) || (m == 15))");
    }
    if (unlikely((wback && ((n == 15) || (n == t))))) {
        return UnpredictableInstruction("Reason: (wback && ((n == 15) || (n == t)))");
    }
    if (unlikely((((ArchVersion() < 6) && wback) && (m == n)))) {
        return UnpredictableInstruction("Reason: (((ArchVersion() < 6) && wback) && (m == n))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldrh_register;
    ins.m_to_string = decode_ldrh_register_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldrh_register_a1";
    ins.encoding = encoding;
    ins.index = index;
    ins.shift_t = shift_t;
    ins.m = m;
    ins.n = n;
    ins.add = add;
    ins.wback = wback;
    ins.t = t;
    ins.shift_n = shift_n;
    ins.cond = cond;
    ins.P = P;
    ins.U = U;
    ins.W = W;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldrht_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int  imm8 = get_bits(opcode,  7,  0);
    int postindex = 0;
    int imm32 = 0;
    int n = 0;
    int register_form = 0;
    int add = 0;
    int t = 0;

    if (unlikely((Rn == 15))) {
        return SeeInstruction("LDRH (literal)");
    }
    t = UInt(Rt);
    n = UInt(Rn);
    postindex = false;
    add = true;
    register_form = false;
    imm32 = ZeroExtend(imm8, 32);
    if (unlikely((t == 13 || t == 15))) {
        return UnpredictableInstruction("Reason: (t == 13 || t == 15)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldrht;
    ins.m_to_string = decode_ldrht_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldrht_t1";
    ins.encoding = encoding;
    ins.postindex = postindex;
    ins.imm32 = imm32;
    ins.n = n;
    ins.register_form = register_form;
    ins.add = add;
    ins.t = t;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldrht_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     U = get_bit(opcode, 23);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int imm4H = get_bits(opcode, 11,  8);
    int imm4L = get_bits(opcode,  3,  0);
    int postindex = 0;
    int imm32 = 0;
    int n = 0;
    int register_form = 0;
    int add = 0;
    int t = 0;

    t = UInt(Rt);
    n = UInt(Rn);
    postindex = true;
    add = (U == 1);
    register_form = false;
    imm32 = ZeroExtend(Concatenate(imm4H, imm4L, 4), 32);
    if (unlikely((((t == 15) || (n == 15)) || (n == t)))) {
        return UnpredictableInstruction("Reason: (((t == 15) || (n == 15)) || (n == t))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldrht;
    ins.m_to_string = decode_ldrht_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldrht_a1";
    ins.encoding = encoding;
    ins.postindex = postindex;
    ins.imm32 = imm32;
    ins.n = n;
    ins.register_form = register_form;
    ins.add = add;
    ins.t = t;
    ins.cond = cond;
    ins.U = U;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldrht_a2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     U = get_bit(opcode, 23);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode,  3,  0);
    int postindex = 0;
    int m = 0;
    int n = 0;
    int register_form = 0;
    int add = 0;
    int t = 0;

    t = UInt(Rt);
    n = UInt(Rn);
    m = UInt(Rm);
    postindex = true;
    add = (U == 1);
    register_form = true;
    if (unlikely(((((t == 15) || (n == 15)) || (n == t)) || (m == 15)))) {
        return UnpredictableInstruction("Reason: ((((t == 15) || (n == 15)) || (n == t)) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldrht;
    ins.m_to_string = decode_ldrht_a2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldrht_a2";
    ins.encoding = encoding;
    ins.postindex = postindex;
    ins.m = m;
    ins.n = n;
    ins.register_form = register_form;
    ins.add = add;
    ins.t = t;
    ins.cond = cond;
    ins.U = U;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldrsb_immediate_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int imm12 = get_bits(opcode, 11,  0);
    int index = 0;
    int imm32 = 0;
    int n = 0;
    int add = 0;
    int wback = 0;
    int t = 0;

    if (unlikely((Rt == 15))) {
        return SeeInstruction("PLI");
    }
    if (unlikely((Rn == 15))) {
        return SeeInstruction("LDRSB (literal)");
    }
    t = UInt(Rt);
    n = UInt(Rn);
    imm32 = ZeroExtend(imm12, 32);
    index = true;
    add = true;
    wback = false;
    if (unlikely((t == 13))) {
        return UnpredictableInstruction("Reason: (t == 13)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldrsb_immediate;
    ins.m_to_string = decode_ldrsb_immediate_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldrsb_immediate_t1";
    ins.encoding = encoding;
    ins.index = index;
    ins.imm32 = imm32;
    ins.n = n;
    ins.add = add;
    ins.wback = wback;
    ins.t = t;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldrsb_immediate_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int     P = get_bit(opcode, 10);
    int     U = get_bit(opcode,  9);
    int     W = get_bit(opcode,  8);
    int  imm8 = get_bits(opcode,  7,  0);
    int index = 0;
    int imm32 = 0;
    int n = 0;
    int add = 0;
    int wback = 0;
    int t = 0;

    if (unlikely(((((Rt == 15) && (P == 1)) && (U == 0)) && (W == 0)))) {
        return SeeInstruction("PLI");
    }
    if (unlikely((Rn == 15))) {
        return SeeInstruction("LDRSB (literal)");
    }
    if (unlikely((((P == 1) && (U == 1)) && (W == 0)))) {
        return SeeInstruction("LDRSBT");
    }
    if (unlikely(((P == 0) && (W == 0)))) {
        return UndefinedInstruction("Reason: ((P == 0) && (W == 0))");
    }
    t = UInt(Rt);
    n = UInt(Rn);
    imm32 = ZeroExtend(imm8, 32);
    index = (P == 1);
    add = (U == 1);
    wback = (W == 1);
    if (unlikely((((t == 13) || ((t == 15) && (W == 1))) || (wback && (n == t))))) {
        return UnpredictableInstruction("Reason: (((t == 13) || ((t == 15) && (W == 1))) || (wback && (n == t)))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldrsb_immediate;
    ins.m_to_string = decode_ldrsb_immediate_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldrsb_immediate_t2";
    ins.encoding = encoding;
    ins.index = index;
    ins.imm32 = imm32;
    ins.n = n;
    ins.add = add;
    ins.wback = wback;
    ins.t = t;
    ins.P = P;
    ins.U = U;
    ins.W = W;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldrsb_immediate_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     P = get_bit(opcode, 24);
    int     U = get_bit(opcode, 23);
    int     W = get_bit(opcode, 21);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int imm4H = get_bits(opcode, 11,  8);
    int imm4L = get_bits(opcode,  3,  0);
    int index = 0;
    int imm32 = 0;
    int n = 0;
    int add = 0;
    int wback = 0;
    int t = 0;

    if (unlikely((Rn == 15))) {
        return SeeInstruction("LDRSB (literal)");
    }
    if (unlikely(((P == 0) && (W == 1)))) {
        return SeeInstruction("LDRSBT");
    }
    t = UInt(Rt);
    n = UInt(Rn);
    imm32 = ZeroExtend(Concatenate(imm4H, imm4L, 4), 32);
    index = (P == 1);
    add = (U == 1);
    wback = ((P == 0) || (W == 1));
    if (unlikely(((t == 15) || (wback && (n == t))))) {
        return UnpredictableInstruction("Reason: ((t == 15) || (wback && (n == t)))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldrsb_immediate;
    ins.m_to_string = decode_ldrsb_immediate_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldrsb_immediate_a1";
    ins.encoding = encoding;
    ins.index = index;
    ins.imm32 = imm32;
    ins.n = n;
    ins.add = add;
    ins.wback = wback;
    ins.t = t;
    ins.cond = cond;
    ins.P = P;
    ins.U = U;
    ins.W = W;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldrsb_literal_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 23);
    int    Rt = get_bits(opcode, 15, 12);
    int imm12 = get_bits(opcode, 11,  0);
    int add = 0;
    int t = 0;
    int imm32 = 0;

    if (unlikely((Rt == 15))) {
        return SeeInstruction("PLI");
    }
    t = UInt(Rt);
    imm32 = ZeroExtend(imm12, 32);
    add = (U == 1);
    if (unlikely((t == 13))) {
        return UnpredictableInstruction("Reason: (t == 13)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldrsb_literal;
    ins.m_to_string = decode_ldrsb_literal_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldrsb_literal_t1";
    ins.encoding = encoding;
    ins.add = add;
    ins.t = t;
    ins.imm32 = imm32;
    ins.U = U;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldrsb_literal_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     U = get_bit(opcode, 23);
    int    Rt = get_bits(opcode, 15, 12);
    int imm4H = get_bits(opcode, 11,  8);
    int imm4L = get_bits(opcode,  3,  0);
    int add = 0;
    int t = 0;
    int imm32 = 0;

    t = UInt(Rt);
    imm32 = ZeroExtend(Concatenate(imm4H, imm4L, 4), 32);
    add = (U == 1);
    if (unlikely((t == 15))) {
        return UnpredictableInstruction("Reason: (t == 15)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldrsb_literal;
    ins.m_to_string = decode_ldrsb_literal_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldrsb_literal_a1";
    ins.encoding = encoding;
    ins.add = add;
    ins.t = t;
    ins.imm32 = imm32;
    ins.cond = cond;
    ins.U = U;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldrsb_register_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rm = get_bits(opcode,  8,  6);
    int    Rn = get_bits(opcode,  5,  3);
    int    Rt = get_bits(opcode,  2,  0);
    int index = 0;
    int shift_t = 0;
    int m = 0;
    int n = 0;
    int add = 0;
    int wback = 0;
    int t = 0;
    int shift_n = 0;

    t = UInt(Rt);
    n = UInt(Rn);
    m = UInt(Rm);
    add = true;
    wback = false;
    index = true;
    shift_t = SRType_LSL, shift_n = 0;
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldrsb_register;
    ins.m_to_string = decode_ldrsb_register_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldrsb_register_t1";
    ins.encoding = encoding;
    ins.index = index;
    ins.shift_t = shift_t;
    ins.m = m;
    ins.n = n;
    ins.add = add;
    ins.wback = wback;
    ins.t = t;
    ins.shift_n = shift_n;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldrsb_register_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int  imm2 = get_bits(opcode,  5,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int index = 0;
    int shift_t = 0;
    int m = 0;
    int n = 0;
    int add = 0;
    int wback = 0;
    int t = 0;
    int shift_n = 0;

    if (unlikely((Rt == 15))) {
        return SeeInstruction("PLI");
    }
    if (unlikely((Rn == 15))) {
        return SeeInstruction("LDRSB (literal)");
    }
    t = UInt(Rt);
    n = UInt(Rn);
    m = UInt(Rm);
    index = true;
    add = true;
    wback = false;
    shift_t = SRType_LSL, shift_n = UInt(imm2);
    if (unlikely(((t == 13) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: ((t == 13) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldrsb_register;
    ins.m_to_string = decode_ldrsb_register_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldrsb_register_t2";
    ins.encoding = encoding;
    ins.index = index;
    ins.shift_t = shift_t;
    ins.m = m;
    ins.n = n;
    ins.add = add;
    ins.wback = wback;
    ins.t = t;
    ins.shift_n = shift_n;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldrsb_register_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     P = get_bit(opcode, 24);
    int     U = get_bit(opcode, 23);
    int     W = get_bit(opcode, 21);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode,  3,  0);
    int index = 0;
    int shift_t = 0;
    int m = 0;
    int n = 0;
    int add = 0;
    int wback = 0;
    int t = 0;
    int shift_n = 0;

    if (unlikely(((P == 0) && (W == 1)))) {
        return SeeInstruction("LDRSBT");
    }
    t = UInt(Rt);
    n = UInt(Rn);
    m = UInt(Rm);
    index = (P == 1);
    add = (U == 1);
    wback = ((P == 0) || (W == 1));
    shift_t = SRType_LSL, shift_n = 0;
    if (unlikely(((t == 15) || (m == 15)))) {
        return UnpredictableInstruction("Reason: ((t == 15) || (m == 15))");
    }
    if (unlikely((wback && ((n == 15) || (n == t))))) {
        return UnpredictableInstruction("Reason: (wback && ((n == 15) || (n == t)))");
    }
    if (unlikely((((ArchVersion() < 6) && wback) && (m == n)))) {
        return UnpredictableInstruction("Reason: (((ArchVersion() < 6) && wback) && (m == n))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldrsb_register;
    ins.m_to_string = decode_ldrsb_register_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldrsb_register_a1";
    ins.encoding = encoding;
    ins.index = index;
    ins.shift_t = shift_t;
    ins.m = m;
    ins.n = n;
    ins.add = add;
    ins.wback = wback;
    ins.t = t;
    ins.shift_n = shift_n;
    ins.cond = cond;
    ins.P = P;
    ins.U = U;
    ins.W = W;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldrsbt_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int  imm8 = get_bits(opcode,  7,  0);
    int postindex = 0;
    int imm32 = 0;
    int n = 0;
    int register_form = 0;
    int add = 0;
    int t = 0;

    if (unlikely((Rn == 15))) {
        return SeeInstruction("LDRSB (literal)");
    }
    t = UInt(Rt);
    n = UInt(Rn);
    postindex = false;
    add = true;
    register_form = false;
    imm32 = ZeroExtend(imm8, 32);
    if (unlikely((t == 13 || t == 15))) {
        return UnpredictableInstruction("Reason: (t == 13 || t == 15)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldrsbt;
    ins.m_to_string = decode_ldrsbt_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldrsbt_t1";
    ins.encoding = encoding;
    ins.postindex = postindex;
    ins.imm32 = imm32;
    ins.n = n;
    ins.register_form = register_form;
    ins.add = add;
    ins.t = t;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldrsbt_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     U = get_bit(opcode, 23);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int imm4H = get_bits(opcode, 11,  8);
    int imm4L = get_bits(opcode,  3,  0);
    int postindex = 0;
    int imm32 = 0;
    int n = 0;
    int register_form = 0;
    int add = 0;
    int t = 0;

    t = UInt(Rt);
    n = UInt(Rn);
    postindex = true;
    add = (U == 1);
    register_form = false;
    imm32 = ZeroExtend(Concatenate(imm4H, imm4L, 4), 32);
    if (unlikely((((t == 15) || (n == 15)) || (n == t)))) {
        return UnpredictableInstruction("Reason: (((t == 15) || (n == 15)) || (n == t))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldrsbt;
    ins.m_to_string = decode_ldrsbt_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldrsbt_a1";
    ins.encoding = encoding;
    ins.postindex = postindex;
    ins.imm32 = imm32;
    ins.n = n;
    ins.register_form = register_form;
    ins.add = add;
    ins.t = t;
    ins.cond = cond;
    ins.U = U;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldrsbt_a2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     U = get_bit(opcode, 23);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode,  3,  0);
    int postindex = 0;
    int m = 0;
    int n = 0;
    int register_form = 0;
    int add = 0;
    int t = 0;

    t = UInt(Rt);
    n = UInt(Rn);
    m = UInt(Rm);
    postindex = true;
    add = (U == 1);
    register_form = true;
    if (unlikely(((((t == 15) || (n == 15)) || (n == t)) || (m == 15)))) {
        return UnpredictableInstruction("Reason: ((((t == 15) || (n == 15)) || (n == t)) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldrsbt;
    ins.m_to_string = decode_ldrsbt_a2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldrsbt_a2";
    ins.encoding = encoding;
    ins.postindex = postindex;
    ins.m = m;
    ins.n = n;
    ins.register_form = register_form;
    ins.add = add;
    ins.t = t;
    ins.cond = cond;
    ins.U = U;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldrsh_immediate_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int imm12 = get_bits(opcode, 11,  0);
    int index = 0;
    int imm32 = 0;
    int n = 0;
    int add = 0;
    int wback = 0;
    int t = 0;

    if (unlikely((Rn == 15))) {
        return SeeInstruction("LDRSH (literal)");
    }
    if (unlikely((Rt == 15))) {
        return SeeInstruction("Related instructions");
    }
    t = UInt(Rt);
    n = UInt(Rn);
    imm32 = ZeroExtend(imm12, 32);
    index = true;
    add = true;
    wback = false;
    if (unlikely((t == 13))) {
        return UnpredictableInstruction("Reason: (t == 13)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldrsh_immediate;
    ins.m_to_string = decode_ldrsh_immediate_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldrsh_immediate_t1";
    ins.encoding = encoding;
    ins.index = index;
    ins.imm32 = imm32;
    ins.n = n;
    ins.add = add;
    ins.wback = wback;
    ins.t = t;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldrsh_immediate_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int     P = get_bit(opcode, 10);
    int     U = get_bit(opcode,  9);
    int     W = get_bit(opcode,  8);
    int  imm8 = get_bits(opcode,  7,  0);
    int index = 0;
    int imm32 = 0;
    int n = 0;
    int add = 0;
    int wback = 0;
    int t = 0;

    if (unlikely((Rn == 15))) {
        return SeeInstruction("LDRSH (literal)");
    }
    if (unlikely(((((Rt == 15) && (P == 1)) && (U == 0)) && (W == 0)))) {
        return SeeInstruction("Related instructions");
    }
    if (unlikely((((P == 1) && (U == 1)) && (W == 0)))) {
        return SeeInstruction("LDRSHT");
    }
    if (unlikely(((P == 0) && (W == 0)))) {
        return UndefinedInstruction("Reason: ((P == 0) && (W == 0))");
    }
    t = UInt(Rt);
    n = UInt(Rn);
    imm32 = ZeroExtend(imm8, 32);
    index = (P == 1);
    add = (U == 1);
    wback = (W == 1);
    if (unlikely((((t == 13) || ((t == 15) && (W == 1))) || (wback && (n == t))))) {
        return UnpredictableInstruction("Reason: (((t == 13) || ((t == 15) && (W == 1))) || (wback && (n == t)))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldrsh_immediate;
    ins.m_to_string = decode_ldrsh_immediate_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldrsh_immediate_t2";
    ins.encoding = encoding;
    ins.index = index;
    ins.imm32 = imm32;
    ins.n = n;
    ins.add = add;
    ins.wback = wback;
    ins.t = t;
    ins.P = P;
    ins.U = U;
    ins.W = W;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldrsh_immediate_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     P = get_bit(opcode, 24);
    int     U = get_bit(opcode, 23);
    int     W = get_bit(opcode, 21);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int imm4H = get_bits(opcode, 11,  8);
    int imm4L = get_bits(opcode,  3,  0);
    int index = 0;
    int imm32 = 0;
    int n = 0;
    int add = 0;
    int wback = 0;
    int t = 0;

    if (unlikely((Rn == 15))) {
        return SeeInstruction("LDRSH (literal)");
    }
    if (unlikely(((P == 0) && (W == 1)))) {
        return SeeInstruction("LDRSHT");
    }
    t = UInt(Rt);
    n = UInt(Rn);
    imm32 = ZeroExtend(Concatenate(imm4H, imm4L, 4), 32);
    index = (P == 1);
    add = (U == 1);
    wback = ((P == 0) || (W == 1));
    if (unlikely(((t == 15) || (wback && (n == t))))) {
        return UnpredictableInstruction("Reason: ((t == 15) || (wback && (n == t)))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldrsh_immediate;
    ins.m_to_string = decode_ldrsh_immediate_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldrsh_immediate_a1";
    ins.encoding = encoding;
    ins.index = index;
    ins.imm32 = imm32;
    ins.n = n;
    ins.add = add;
    ins.wback = wback;
    ins.t = t;
    ins.cond = cond;
    ins.P = P;
    ins.U = U;
    ins.W = W;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldrsh_literal_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 23);
    int    Rt = get_bits(opcode, 15, 12);
    int imm12 = get_bits(opcode, 11,  0);
    int add = 0;
    int t = 0;
    int imm32 = 0;

    if (unlikely((Rt == 15))) {
        return SeeInstruction("Related instructions");
    }
    t = UInt(Rt);
    imm32 = ZeroExtend(imm12, 32);
    add = (U == 1);
    if (unlikely((t == 13))) {
        return UnpredictableInstruction("Reason: (t == 13)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldrsh_literal;
    ins.m_to_string = decode_ldrsh_literal_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldrsh_literal_t1";
    ins.encoding = encoding;
    ins.add = add;
    ins.t = t;
    ins.imm32 = imm32;
    ins.U = U;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldrsh_literal_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     U = get_bit(opcode, 23);
    int    Rt = get_bits(opcode, 15, 12);
    int imm4H = get_bits(opcode, 11,  8);
    int imm4L = get_bits(opcode,  3,  0);
    int add = 0;
    int t = 0;
    int imm32 = 0;

    t = UInt(Rt);
    imm32 = ZeroExtend(Concatenate(imm4H, imm4L, 4), 32);
    add = (U == 1);
    if (unlikely((t == 15))) {
        return UnpredictableInstruction("Reason: (t == 15)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldrsh_literal;
    ins.m_to_string = decode_ldrsh_literal_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldrsh_literal_a1";
    ins.encoding = encoding;
    ins.add = add;
    ins.t = t;
    ins.imm32 = imm32;
    ins.cond = cond;
    ins.U = U;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldrsh_register_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rm = get_bits(opcode,  8,  6);
    int    Rn = get_bits(opcode,  5,  3);
    int    Rt = get_bits(opcode,  2,  0);
    int index = 0;
    int shift_t = 0;
    int m = 0;
    int n = 0;
    int add = 0;
    int wback = 0;
    int t = 0;
    int shift_n = 0;

    if (unlikely((CurrentInstrSet() == InstrSet_ThumbEE))) {
        return SeeInstruction("Modified operation in ThumbEE");
    }
    t = UInt(Rt);
    n = UInt(Rn);
    m = UInt(Rm);
    index = true;
    add = true;
    wback = false;
    shift_t = SRType_LSL, shift_n = 0;
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldrsh_register;
    ins.m_to_string = decode_ldrsh_register_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldrsh_register_t1";
    ins.encoding = encoding;
    ins.index = index;
    ins.shift_t = shift_t;
    ins.m = m;
    ins.n = n;
    ins.add = add;
    ins.wback = wback;
    ins.t = t;
    ins.shift_n = shift_n;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldrsh_register_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int  imm2 = get_bits(opcode,  5,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int index = 0;
    int shift_t = 0;
    int m = 0;
    int n = 0;
    int add = 0;
    int wback = 0;
    int t = 0;
    int shift_n = 0;

    if (unlikely((Rn == 15))) {
        return SeeInstruction("LDRSH (literal)");
    }
    if (unlikely((Rt == 15))) {
        return SeeInstruction("Related instructions");
    }
    t = UInt(Rt);
    n = UInt(Rn);
    m = UInt(Rm);
    index = true;
    add = true;
    wback = false;
    shift_t = SRType_LSL, shift_n = UInt(imm2);
    if (unlikely(((t == 13) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: ((t == 13) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldrsh_register;
    ins.m_to_string = decode_ldrsh_register_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldrsh_register_t2";
    ins.encoding = encoding;
    ins.index = index;
    ins.shift_t = shift_t;
    ins.m = m;
    ins.n = n;
    ins.add = add;
    ins.wback = wback;
    ins.t = t;
    ins.shift_n = shift_n;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldrsh_register_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     P = get_bit(opcode, 24);
    int     U = get_bit(opcode, 23);
    int     W = get_bit(opcode, 21);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode,  3,  0);
    int index = 0;
    int shift_t = 0;
    int m = 0;
    int n = 0;
    int add = 0;
    int wback = 0;
    int t = 0;
    int shift_n = 0;

    if (unlikely(((P == 0) && (W == 1)))) {
        return SeeInstruction("LDRSHT");
    }
    t = UInt(Rt);
    n = UInt(Rn);
    m = UInt(Rm);
    index = (P == 1);
    add = (U == 1);
    wback = ((P == 0) || (W == 1));
    shift_t = SRType_LSL, shift_n = 0;
    if (unlikely(((t == 15) || (m == 15)))) {
        return UnpredictableInstruction("Reason: ((t == 15) || (m == 15))");
    }
    if (unlikely((wback && ((n == 15) || (n == t))))) {
        return UnpredictableInstruction("Reason: (wback && ((n == 15) || (n == t)))");
    }
    if (unlikely((((ArchVersion() < 6) && wback) && (m == n)))) {
        return UnpredictableInstruction("Reason: (((ArchVersion() < 6) && wback) && (m == n))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldrsh_register;
    ins.m_to_string = decode_ldrsh_register_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldrsh_register_a1";
    ins.encoding = encoding;
    ins.index = index;
    ins.shift_t = shift_t;
    ins.m = m;
    ins.n = n;
    ins.add = add;
    ins.wback = wback;
    ins.t = t;
    ins.shift_n = shift_n;
    ins.cond = cond;
    ins.P = P;
    ins.U = U;
    ins.W = W;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldrsht_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int  imm8 = get_bits(opcode,  7,  0);
    int postindex = 0;
    int imm32 = 0;
    int n = 0;
    int register_form = 0;
    int add = 0;
    int t = 0;

    if (unlikely((Rn == 15))) {
        return SeeInstruction("LDRSH (literal)");
    }
    t = UInt(Rt);
    n = UInt(Rn);
    postindex = false;
    add = true;
    register_form = false;
    imm32 = ZeroExtend(imm8, 32);
    if (unlikely((t == 13 || t == 15))) {
        return UnpredictableInstruction("Reason: (t == 13 || t == 15)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldrsht;
    ins.m_to_string = decode_ldrsht_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldrsht_t1";
    ins.encoding = encoding;
    ins.postindex = postindex;
    ins.imm32 = imm32;
    ins.n = n;
    ins.register_form = register_form;
    ins.add = add;
    ins.t = t;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldrsht_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     U = get_bit(opcode, 23);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int imm4H = get_bits(opcode, 11,  8);
    int imm4L = get_bits(opcode,  3,  0);
    int postindex = 0;
    int imm32 = 0;
    int n = 0;
    int register_form = 0;
    int add = 0;
    int t = 0;

    t = UInt(Rt);
    n = UInt(Rn);
    postindex = true;
    add = (U == 1);
    register_form = false;
    imm32 = ZeroExtend(Concatenate(imm4H, imm4L, 4), 32);
    if (unlikely((((t == 15) || (n == 15)) || (n == t)))) {
        return UnpredictableInstruction("Reason: (((t == 15) || (n == 15)) || (n == t))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldrsht;
    ins.m_to_string = decode_ldrsht_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldrsht_a1";
    ins.encoding = encoding;
    ins.postindex = postindex;
    ins.imm32 = imm32;
    ins.n = n;
    ins.register_form = register_form;
    ins.add = add;
    ins.t = t;
    ins.cond = cond;
    ins.U = U;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldrsht_a2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     U = get_bit(opcode, 23);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode,  3,  0);
    int postindex = 0;
    int m = 0;
    int n = 0;
    int register_form = 0;
    int add = 0;
    int t = 0;

    t = UInt(Rt);
    n = UInt(Rn);
    m = UInt(Rm);
    postindex = true;
    add = (U == 1);
    register_form = true;
    if (unlikely(((((t == 15) || (n == 15)) || (n == t)) || (m == 15)))) {
        return UnpredictableInstruction("Reason: ((((t == 15) || (n == 15)) || (n == t)) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldrsht;
    ins.m_to_string = decode_ldrsht_a2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldrsht_a2";
    ins.encoding = encoding;
    ins.postindex = postindex;
    ins.m = m;
    ins.n = n;
    ins.register_form = register_form;
    ins.add = add;
    ins.t = t;
    ins.cond = cond;
    ins.U = U;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldrt_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int  imm8 = get_bits(opcode,  7,  0);
    int postindex = 0;
    int imm32 = 0;
    int n = 0;
    int register_form = 0;
    int add = 0;
    int t = 0;

    if (unlikely((Rn == 15))) {
        return SeeInstruction("LDR (literal)");
    }
    t = UInt(Rt);
    n = UInt(Rn);
    postindex = false;
    add = true;
    register_form = false;
    imm32 = ZeroExtend(imm8, 32);
    if (unlikely((t == 13 || t == 15))) {
        return UnpredictableInstruction("Reason: (t == 13 || t == 15)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldrt;
    ins.m_to_string = decode_ldrt_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldrt_t1";
    ins.encoding = encoding;
    ins.postindex = postindex;
    ins.imm32 = imm32;
    ins.n = n;
    ins.register_form = register_form;
    ins.add = add;
    ins.t = t;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldrt_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     U = get_bit(opcode, 23);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int imm12 = get_bits(opcode, 11,  0);
    int postindex = 0;
    int imm32 = 0;
    int n = 0;
    int register_form = 0;
    int add = 0;
    int t = 0;

    t = UInt(Rt);
    n = UInt(Rn);
    postindex = true;
    add = (U == 1);
    register_form = false;
    imm32 = ZeroExtend(imm12, 32);
    if (unlikely((((t == 15) || (n == 15)) || (n == t)))) {
        return UnpredictableInstruction("Reason: (((t == 15) || (n == 15)) || (n == t))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldrt;
    ins.m_to_string = decode_ldrt_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldrt_a1";
    ins.encoding = encoding;
    ins.postindex = postindex;
    ins.imm32 = imm32;
    ins.n = n;
    ins.register_form = register_form;
    ins.add = add;
    ins.t = t;
    ins.cond = cond;
    ins.U = U;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldrt_a2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     U = get_bit(opcode, 23);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int  imm5 = get_bits(opcode, 11,  7);
    int  type = get_bits(opcode,  6,  5);
    int    Rm = get_bits(opcode,  3,  0);
    int shift_t = 0;
    int postindex = 0;
    int m = 0;
    int n = 0;
    int register_form = 0;
    int add = 0;
    int t = 0;
    int shift_n = 0;

    t = UInt(Rt);
    n = UInt(Rn);
    m = UInt(Rm);
    postindex = true;
    add = (U == 1);
    register_form = true;
    std::tie(shift_t, shift_n) = DecodeImmShift(type, imm5);
    if (unlikely(((((t == 15) || (n == 15)) || (n == t)) || (m == 15)))) {
        return UnpredictableInstruction("Reason: ((((t == 15) || (n == 15)) || (n == t)) || (m == 15))");
    }
    if (unlikely(((ArchVersion() < 6) && (m == n)))) {
        return UnpredictableInstruction("Reason: ((ArchVersion() < 6) && (m == n))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldrt;
    ins.m_to_string = decode_ldrt_a2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldrt_a2";
    ins.encoding = encoding;
    ins.shift_t = shift_t;
    ins.postindex = postindex;
    ins.m = m;
    ins.n = n;
    ins.register_form = register_form;
    ins.add = add;
    ins.t = t;
    ins.shift_n = shift_n;
    ins.cond = cond;
    ins.U = U;
    ins.type = type;

    return ins;
}

ARMInstruction ARMDecoder::decode_lsl_immediate_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  imm5 = get_bits(opcode, 10,  6);
    int    Rm = get_bits(opcode,  5,  3);
    int    Rd = get_bits(opcode,  2,  0);
    int d = 0;
    int m = 0;
    int imm32 = 0;
    int shift_n = 0;
    int setflags = 0;
    int ignored_0 = 0;

    if (unlikely((imm5 == 0))) {
        return SeeInstruction("MOV (register, Thumb)");
    }
    d = UInt(Rd);
    m = UInt(Rm);
    setflags = !InITBlock();
    std::tie(ignored_0, shift_n) = DecodeImmShift(0, imm5);
    imm32 = shift_n;
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = lsl_immediate;
    ins.m_to_string = decode_lsl_immediate_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_lsl_immediate_t1";
    ins.encoding = encoding;
    ins.d = d;
    ins.m = m;
    ins.imm32 = imm32;
    ins.shift_n = shift_n;
    ins.setflags = setflags;

    return ins;
}

ARMInstruction ARMDecoder::decode_lsl_immediate_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     S = get_bit(opcode, 20);
    int  imm3 = get_bits(opcode, 14, 12);
    int    Rd = get_bits(opcode, 11,  8);
    int  imm2 = get_bits(opcode,  7,  6);
    int    Rm = get_bits(opcode,  3,  0);
    int d = 0;
    int m = 0;
    int imm32 = 0;
    int shift_n = 0;
    int setflags = 0;
    int ignored_0 = 0;

    if (unlikely((Concatenate(imm3, imm2, 2) == 0))) {
        return SeeInstruction("MOV (register, Thumb)");
    }
    d = UInt(Rd);
    m = UInt(Rm);
    setflags = (S == 1);
    std::tie(ignored_0, shift_n) = DecodeImmShift(0, Concatenate(imm3, imm2, 2));
    imm32 = shift_n;
    if (unlikely(((d == 13 || d == 15) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: ((d == 13 || d == 15) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = lsl_immediate;
    ins.m_to_string = decode_lsl_immediate_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_lsl_immediate_t2";
    ins.encoding = encoding;
    ins.d = d;
    ins.m = m;
    ins.imm32 = imm32;
    ins.shift_n = shift_n;
    ins.setflags = setflags;

    return ins;
}

ARMInstruction ARMDecoder::decode_lsl_immediate_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     S = get_bit(opcode, 20);
    int    Rd = get_bits(opcode, 15, 12);
    int  imm5 = get_bits(opcode, 11,  7);
    int    Rm = get_bits(opcode,  3,  0);
    int d = 0;
    int m = 0;
    int imm32 = 0;
    int shift_n = 0;
    int setflags = 0;
    int ignored_0 = 0;

    if (unlikely((imm5 == 0))) {
        return SeeInstruction("MOV (register, ARM)");
    }
    d = UInt(Rd);
    m = UInt(Rm);
    setflags = (S == 1);
    std::tie(ignored_0, shift_n) = DecodeImmShift(0, imm5);
    imm32 = shift_n;
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = lsl_immediate;
    ins.m_to_string = decode_lsl_immediate_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_lsl_immediate_a1";
    ins.encoding = encoding;
    ins.d = d;
    ins.m = m;
    ins.imm32 = imm32;
    ins.shift_n = shift_n;
    ins.setflags = setflags;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_lsl_register_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rm = get_bits(opcode,  5,  3);
    int   Rdn = get_bits(opcode,  2,  0);
    int setflags = 0;
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rdn);
    n = UInt(Rdn);
    m = UInt(Rm);
    setflags = !InITBlock();
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = lsl_register;
    ins.m_to_string = decode_lsl_register_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_lsl_register_t1";
    ins.encoding = encoding;
    ins.setflags = setflags;
    ins.m = m;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_lsl_register_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     S = get_bit(opcode, 20);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 11,  8);
    int    Rm = get_bits(opcode,  3,  0);
    int setflags = 0;
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    setflags = (S == 1);
    if (unlikely((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = lsl_register;
    ins.m_to_string = decode_lsl_register_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_lsl_register_t2";
    ins.encoding = encoding;
    ins.setflags = setflags;
    ins.m = m;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_lsl_register_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     S = get_bit(opcode, 20);
    int    Rd = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode, 11,  8);
    int    Rn = get_bits(opcode,  3,  0);
    int setflags = 0;
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    setflags = (S == 1);
    if (unlikely((((d == 15) || (n == 15)) || (m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 15) || (n == 15)) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = lsl_register;
    ins.m_to_string = decode_lsl_register_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_lsl_register_a1";
    ins.encoding = encoding;
    ins.setflags = setflags;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_lsr_immediate_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  imm5 = get_bits(opcode, 10,  6);
    int    Rm = get_bits(opcode,  5,  3);
    int    Rd = get_bits(opcode,  2,  0);
    int shift_n = 0;
    int setflags = 0;
    int m = 0;
    int d = 0;
    int ignored_0 = 0;

    d = UInt(Rd);
    m = UInt(Rm);
    setflags = !InITBlock();
    std::tie(ignored_0, shift_n) = DecodeImmShift(1, imm5);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = lsr_immediate;
    ins.m_to_string = decode_lsr_immediate_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_lsr_immediate_t1";
    ins.encoding = encoding;
    ins.shift_n = shift_n;
    ins.setflags = setflags;
    ins.m = m;
    ins.d = d;

    return ins;
}

ARMInstruction ARMDecoder::decode_lsr_immediate_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     S = get_bit(opcode, 20);
    int  imm3 = get_bits(opcode, 14, 12);
    int    Rd = get_bits(opcode, 11,  8);
    int  imm2 = get_bits(opcode,  7,  6);
    int    Rm = get_bits(opcode,  3,  0);
    int shift_n = 0;
    int setflags = 0;
    int m = 0;
    int d = 0;
    int ignored_0 = 0;

    d = UInt(Rd);
    m = UInt(Rm);
    setflags = (S == 1);
    std::tie(ignored_0, shift_n) = DecodeImmShift(1, Concatenate(imm3, imm2, 2));
    if (unlikely(((d == 13 || d == 15) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: ((d == 13 || d == 15) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = lsr_immediate;
    ins.m_to_string = decode_lsr_immediate_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_lsr_immediate_t2";
    ins.encoding = encoding;
    ins.shift_n = shift_n;
    ins.setflags = setflags;
    ins.m = m;
    ins.d = d;

    return ins;
}

ARMInstruction ARMDecoder::decode_lsr_immediate_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     S = get_bit(opcode, 20);
    int    Rd = get_bits(opcode, 15, 12);
    int  imm5 = get_bits(opcode, 11,  7);
    int    Rm = get_bits(opcode,  3,  0);
    int shift_n = 0;
    int setflags = 0;
    int m = 0;
    int d = 0;
    int ignored_0 = 0;

    if (unlikely(((Rd == 15) && (S == 1)))) {
        return SeeInstruction("SUBS PC, LR and related instructions");
    }
    d = UInt(Rd);
    m = UInt(Rm);
    setflags = (S == 1);
    std::tie(ignored_0, shift_n) = DecodeImmShift(1, imm5);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = lsr_immediate;
    ins.m_to_string = decode_lsr_immediate_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_lsr_immediate_a1";
    ins.encoding = encoding;
    ins.shift_n = shift_n;
    ins.setflags = setflags;
    ins.m = m;
    ins.d = d;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_lsr_register_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rm = get_bits(opcode,  5,  3);
    int   Rdn = get_bits(opcode,  2,  0);
    int setflags = 0;
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rdn);
    n = UInt(Rdn);
    m = UInt(Rm);
    setflags = !InITBlock();
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = lsr_register;
    ins.m_to_string = decode_lsr_register_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_lsr_register_t1";
    ins.encoding = encoding;
    ins.setflags = setflags;
    ins.m = m;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_lsr_register_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     S = get_bit(opcode, 20);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 11,  8);
    int    Rm = get_bits(opcode,  3,  0);
    int setflags = 0;
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    setflags = (S == 1);
    if (unlikely((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = lsr_register;
    ins.m_to_string = decode_lsr_register_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_lsr_register_t2";
    ins.encoding = encoding;
    ins.setflags = setflags;
    ins.m = m;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_lsr_register_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     S = get_bit(opcode, 20);
    int    Rd = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode, 11,  8);
    int    Rn = get_bits(opcode,  3,  0);
    int setflags = 0;
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    setflags = (S == 1);
    if (unlikely((((d == 15) || (n == 15)) || (m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 15) || (n == 15)) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = lsr_register;
    ins.m_to_string = decode_lsr_register_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_lsr_register_a1";
    ins.encoding = encoding;
    ins.setflags = setflags;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_mcr_mcr2_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  opc1 = get_bits(opcode, 23, 21);
    int   CRn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int coproc = get_bits(opcode, 11,  8);
    int  opc2 = get_bits(opcode,  7,  5);
    int   CRm = get_bits(opcode,  3,  0);
    int cp = 0;
    int t = 0;

    if (unlikely((coproc >= 10 && coproc <= 11))) {
        return SeeInstruction("AdvancedSIMD and Floating-point");
    }
    t = UInt(Rt);
    cp = UInt(coproc);
    if (unlikely(((t == 15) || ((t == 13) && (CurrentInstrSet() != InstrSet_ARM))))) {
        return UnpredictableInstruction("Reason: ((t == 15) || ((t == 13) && (CurrentInstrSet() != InstrSet_ARM)))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = mcr_mcr2;
    ins.m_to_string = decode_mcr_mcr2_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_mcr_mcr2_t1";
    ins.encoding = encoding;
    ins.cp = cp;
    ins.t = t;
    ins.opc1 = opc1;
    ins.CRn = CRn;
    ins.coproc = coproc;
    ins.opc2 = opc2;
    ins.CRm = CRm;

    return ins;
}

ARMInstruction ARMDecoder::decode_mcr_mcr2_a2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  opc1 = get_bits(opcode, 23, 21);
    int   CRn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int coproc = get_bits(opcode, 11,  8);
    int  opc2 = get_bits(opcode,  7,  5);
    int   CRm = get_bits(opcode,  3,  0);
    int cp = 0;
    int t = 0;

    if (unlikely((coproc >= 10 && coproc <= 11))) {
        return UndefinedInstruction("Reason: (coproc >= 10 && coproc <= 11)");
    }
    t = UInt(Rt);
    cp = UInt(coproc);
    if (unlikely(((t == 15) || ((t == 13) && (CurrentInstrSet() != InstrSet_ARM))))) {
        return UnpredictableInstruction("Reason: ((t == 15) || ((t == 13) && (CurrentInstrSet() != InstrSet_ARM)))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = mcr_mcr2;
    ins.m_to_string = decode_mcr_mcr2_a2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_mcr_mcr2_a2";
    ins.encoding = encoding;
    ins.cp = cp;
    ins.t = t;
    ins.opc1 = opc1;
    ins.CRn = CRn;
    ins.coproc = coproc;
    ins.opc2 = opc2;
    ins.CRm = CRm;

    return ins;
}

ARMInstruction ARMDecoder::decode_mcr_mcr2_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int  opc1 = get_bits(opcode, 23, 21);
    int   CRn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int coproc = get_bits(opcode, 11,  8);
    int  opc2 = get_bits(opcode,  7,  5);
    int   CRm = get_bits(opcode,  3,  0);
    int cp = 0;
    int t = 0;

    if (unlikely((coproc >= 10 && coproc <= 11))) {
        return SeeInstruction("AdvancedSIMD and Floating-point");
    }
    t = UInt(Rt);
    cp = UInt(coproc);
    if (unlikely(((t == 15) || ((t == 13) && (CurrentInstrSet() != InstrSet_ARM))))) {
        return UnpredictableInstruction("Reason: ((t == 15) || ((t == 13) && (CurrentInstrSet() != InstrSet_ARM)))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = mcr_mcr2;
    ins.m_to_string = decode_mcr_mcr2_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_mcr_mcr2_a1";
    ins.encoding = encoding;
    ins.cp = cp;
    ins.t = t;
    ins.cond = cond;
    ins.opc1 = opc1;
    ins.CRn = CRn;
    ins.coproc = coproc;
    ins.opc2 = opc2;
    ins.CRm = CRm;

    return ins;
}

ARMInstruction ARMDecoder::decode_mcr_mcr2_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  opc1 = get_bits(opcode, 23, 21);
    int   CRn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int coproc = get_bits(opcode, 11,  8);
    int  opc2 = get_bits(opcode,  7,  5);
    int   CRm = get_bits(opcode,  3,  0);
    int cp = 0;
    int t = 0;

    if (unlikely((coproc >= 10 && coproc <= 11))) {
        return UndefinedInstruction("Reason: (coproc >= 10 && coproc <= 11)");
    }
    t = UInt(Rt);
    cp = UInt(coproc);
    if (unlikely(((t == 15) || ((t == 13) && (CurrentInstrSet() != InstrSet_ARM))))) {
        return UnpredictableInstruction("Reason: ((t == 15) || ((t == 13) && (CurrentInstrSet() != InstrSet_ARM)))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = mcr_mcr2;
    ins.m_to_string = decode_mcr_mcr2_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_mcr_mcr2_t2";
    ins.encoding = encoding;
    ins.cp = cp;
    ins.t = t;
    ins.opc1 = opc1;
    ins.CRn = CRn;
    ins.coproc = coproc;
    ins.opc2 = opc2;
    ins.CRm = CRm;

    return ins;
}

ARMInstruction ARMDecoder::decode_mcrr_mcrr2_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int   Rt2 = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int coproc = get_bits(opcode, 11,  8);
    int  opc1 = get_bits(opcode,  7,  4);
    int   CRm = get_bits(opcode,  3,  0);
    int cp = 0;
    int t2 = 0;
    int t = 0;

    if (unlikely((coproc >= 10 && coproc <= 11))) {
        return SeeInstruction("AdvancedSIMD and Floating-point");
    }
    t = UInt(Rt);
    t2 = UInt(Rt2);
    cp = UInt(coproc);
    if (unlikely(((t == 15) || (t2 == 15)))) {
        return UnpredictableInstruction("Reason: ((t == 15) || (t2 == 15))");
    }
    if (unlikely((((t == 13) || (t2 == 13)) && (CurrentInstrSet() != InstrSet_ARM)))) {
        return UnpredictableInstruction("Reason: (((t == 13) || (t2 == 13)) && (CurrentInstrSet() != InstrSet_ARM))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = mcrr_mcrr2;
    ins.m_to_string = decode_mcrr_mcrr2_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_mcrr_mcrr2_t1";
    ins.encoding = encoding;
    ins.cp = cp;
    ins.t2 = t2;
    ins.t = t;
    ins.coproc = coproc;
    ins.opc1 = opc1;
    ins.CRm = CRm;

    return ins;
}

ARMInstruction ARMDecoder::decode_mcrr_mcrr2_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int   Rt2 = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int coproc = get_bits(opcode, 11,  8);
    int  opc1 = get_bits(opcode,  7,  4);
    int   CRm = get_bits(opcode,  3,  0);
    int cp = 0;
    int t2 = 0;
    int t = 0;

    if (unlikely((coproc >= 10 && coproc <= 11))) {
        return UndefinedInstruction("Reason: (coproc >= 10 && coproc <= 11)");
    }
    t = UInt(Rt);
    t2 = UInt(Rt2);
    cp = UInt(coproc);
    if (unlikely(((t == 15) || (t2 == 15)))) {
        return UnpredictableInstruction("Reason: ((t == 15) || (t2 == 15))");
    }
    if (unlikely((((t == 13) || (t2 == 13)) && (CurrentInstrSet() != InstrSet_ARM)))) {
        return UnpredictableInstruction("Reason: (((t == 13) || (t2 == 13)) && (CurrentInstrSet() != InstrSet_ARM))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = mcrr_mcrr2;
    ins.m_to_string = decode_mcrr_mcrr2_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_mcrr_mcrr2_t2";
    ins.encoding = encoding;
    ins.cp = cp;
    ins.t2 = t2;
    ins.t = t;
    ins.coproc = coproc;
    ins.opc1 = opc1;
    ins.CRm = CRm;

    return ins;
}

ARMInstruction ARMDecoder::decode_mcrr_mcrr2_a2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int   Rt2 = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int coproc = get_bits(opcode, 11,  8);
    int  opc1 = get_bits(opcode,  7,  4);
    int   CRm = get_bits(opcode,  3,  0);
    int cp = 0;
    int t2 = 0;
    int t = 0;

    if (unlikely((coproc >= 10 && coproc <= 11))) {
        return UndefinedInstruction("Reason: (coproc >= 10 && coproc <= 11)");
    }
    t = UInt(Rt);
    t2 = UInt(Rt2);
    cp = UInt(coproc);
    if (unlikely(((t == 15) || (t2 == 15)))) {
        return UnpredictableInstruction("Reason: ((t == 15) || (t2 == 15))");
    }
    if (unlikely((((t == 13) || (t2 == 13)) && (CurrentInstrSet() != InstrSet_ARM)))) {
        return UnpredictableInstruction("Reason: (((t == 13) || (t2 == 13)) && (CurrentInstrSet() != InstrSet_ARM))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = mcrr_mcrr2;
    ins.m_to_string = decode_mcrr_mcrr2_a2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_mcrr_mcrr2_a2";
    ins.encoding = encoding;
    ins.cp = cp;
    ins.t2 = t2;
    ins.t = t;
    ins.coproc = coproc;
    ins.opc1 = opc1;
    ins.CRm = CRm;

    return ins;
}

ARMInstruction ARMDecoder::decode_mcrr_mcrr2_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int   Rt2 = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int coproc = get_bits(opcode, 11,  8);
    int  opc1 = get_bits(opcode,  7,  4);
    int   CRm = get_bits(opcode,  3,  0);
    int cp = 0;
    int t2 = 0;
    int t = 0;

    if (unlikely((coproc >= 10 && coproc <= 11))) {
        return SeeInstruction("AdvancedSIMD and Floating-point");
    }
    t = UInt(Rt);
    t2 = UInt(Rt2);
    cp = UInt(coproc);
    if (unlikely(((t == 15) || (t2 == 15)))) {
        return UnpredictableInstruction("Reason: ((t == 15) || (t2 == 15))");
    }
    if (unlikely((((t == 13) || (t2 == 13)) && (CurrentInstrSet() != InstrSet_ARM)))) {
        return UnpredictableInstruction("Reason: (((t == 13) || (t2 == 13)) && (CurrentInstrSet() != InstrSet_ARM))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = mcrr_mcrr2;
    ins.m_to_string = decode_mcrr_mcrr2_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_mcrr_mcrr2_a1";
    ins.encoding = encoding;
    ins.cp = cp;
    ins.t2 = t2;
    ins.t = t;
    ins.cond = cond;
    ins.coproc = coproc;
    ins.opc1 = opc1;
    ins.CRm = CRm;

    return ins;
}

ARMInstruction ARMDecoder::decode_mla_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Ra = get_bits(opcode, 15, 12);
    int    Rd = get_bits(opcode, 11,  8);
    int    Rm = get_bits(opcode,  3,  0);
    int a = 0;
    int setflags = 0;
    int m = 0;
    int d = 0;
    int n = 0;

    if (unlikely((Ra == 15))) {
        return SeeInstruction("MUL");
    }
    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    a = UInt(Ra);
    setflags = false;
    if (unlikely(((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)) || (a == 13)))) {
        return UnpredictableInstruction("Reason: ((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)) || (a == 13))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = mla;
    ins.m_to_string = decode_mla_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_mla_t1";
    ins.encoding = encoding;
    ins.a = a;
    ins.setflags = setflags;
    ins.m = m;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_mla_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     S = get_bit(opcode, 20);
    int    Rd = get_bits(opcode, 19, 16);
    int    Ra = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode, 11,  8);
    int    Rn = get_bits(opcode,  3,  0);
    int a = 0;
    int setflags = 0;
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    a = UInt(Ra);
    setflags = (S == 1);
    if (unlikely(((((d == 15) || (n == 15)) || (m == 15)) || (a == 15)))) {
        return UnpredictableInstruction("Reason: ((((d == 15) || (n == 15)) || (m == 15)) || (a == 15))");
    }
    if (unlikely(((ArchVersion() < 6) && (d == n)))) {
        return UnpredictableInstruction("Reason: ((ArchVersion() < 6) && (d == n))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = mla;
    ins.m_to_string = decode_mla_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_mla_a1";
    ins.encoding = encoding;
    ins.a = a;
    ins.setflags = setflags;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_mls_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Ra = get_bits(opcode, 15, 12);
    int    Rd = get_bits(opcode, 11,  8);
    int    Rm = get_bits(opcode,  3,  0);
    int a = 0;
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    a = UInt(Ra);
    if (unlikely(((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)) || (a == 13 || a == 15)))) {
        return UnpredictableInstruction("Reason: ((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)) || (a == 13 || a == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = mls;
    ins.m_to_string = decode_mls_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_mls_t1";
    ins.encoding = encoding;
    ins.a = a;
    ins.m = m;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_mls_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rd = get_bits(opcode, 19, 16);
    int    Ra = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode, 11,  8);
    int    Rn = get_bits(opcode,  3,  0);
    int a = 0;
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    a = UInt(Ra);
    if (unlikely(((((d == 15) || (n == 15)) || (m == 15)) || (a == 15)))) {
        return UnpredictableInstruction("Reason: ((((d == 15) || (n == 15)) || (m == 15)) || (a == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = mls;
    ins.m_to_string = decode_mls_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_mls_a1";
    ins.encoding = encoding;
    ins.a = a;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_mov_immediate_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rd = get_bits(opcode, 10,  8);
    int  imm8 = get_bits(opcode,  7,  0);
    int setflags = 0;
    int imm12 = 0;
    int d = 0;
    int imm32 = 0;

    d = UInt(Rd);
    setflags = !InITBlock();
    imm12 = imm8;
    imm32 = ZeroExtend(imm8, 32);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = mov_immediate;
    ins.m_to_string = decode_mov_immediate_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_mov_immediate_t1";
    ins.encoding = encoding;
    ins.setflags = setflags;
    ins.imm12 = imm12;
    ins.d = d;
    ins.imm32 = imm32;

    return ins;
}

ARMInstruction ARMDecoder::decode_mov_immediate_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     i = get_bit(opcode, 26);
    int     S = get_bit(opcode, 20);
    int  imm3 = get_bits(opcode, 14, 12);
    int    Rd = get_bits(opcode, 11,  8);
    int  imm8 = get_bits(opcode,  7,  0);
    int setflags = 0;
    int imm12 = 0;
    int d = 0;
    int imm32 = 0;

    d = UInt(Rd);
    setflags = (S == 1);
    imm12 = Concatenate(Concatenate(i, imm3, 3), imm8, 8);
    imm32 = ThumbExpandImm(imm12);
    if (unlikely((d == 13 || d == 15))) {
        return UnpredictableInstruction("Reason: (d == 13 || d == 15)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = mov_immediate;
    ins.m_to_string = decode_mov_immediate_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_mov_immediate_t2";
    ins.encoding = encoding;
    ins.setflags = setflags;
    ins.imm12 = imm12;
    ins.d = d;
    ins.imm32 = imm32;

    return ins;
}

ARMInstruction ARMDecoder::decode_mov_immediate_t3(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     i = get_bit(opcode, 26);
    int  imm4 = get_bits(opcode, 19, 16);
    int  imm3 = get_bits(opcode, 14, 12);
    int    Rd = get_bits(opcode, 11,  8);
    int  imm8 = get_bits(opcode,  7,  0);
    int setflags = 0;
    int d = 0;
    int imm32 = 0;

    d = UInt(Rd);
    setflags = false;
    imm32 = ZeroExtend(Concatenate(Concatenate(Concatenate(imm4, i, 1), imm3, 3), imm8, 8), 32);
    if (unlikely((d == 13 || d == 15))) {
        return UnpredictableInstruction("Reason: (d == 13 || d == 15)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = mov_immediate;
    ins.m_to_string = decode_mov_immediate_t3_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_mov_immediate_t3";
    ins.encoding = encoding;
    ins.setflags = setflags;
    ins.d = d;
    ins.imm32 = imm32;

    return ins;
}

ARMInstruction ARMDecoder::decode_mov_immediate_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     S = get_bit(opcode, 20);
    int    Rd = get_bits(opcode, 15, 12);
    int imm12 = get_bits(opcode, 11,  0);
    int setflags = 0;
    int d = 0;
    int imm32 = 0;

    if (unlikely(((Rd == 15) && (S == 1)))) {
        return SeeInstruction("SUBS PC, LR and related instructions");
    }
    d = UInt(Rd);
    setflags = (S == 1);
    imm32 = ARMExpandImm(imm12);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = mov_immediate;
    ins.m_to_string = decode_mov_immediate_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_mov_immediate_a1";
    ins.encoding = encoding;
    ins.setflags = setflags;
    ins.d = d;
    ins.imm32 = imm32;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_mov_immediate_a2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int  imm4 = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int imm12 = get_bits(opcode, 11,  0);
    int setflags = 0;
    int d = 0;
    int imm32 = 0;

    d = UInt(Rd);
    setflags = false;
    imm32 = ZeroExtend(Concatenate(imm4, imm12, 12), 32);
    if (unlikely((d == 15))) {
        return UnpredictableInstruction("Reason: (d == 15)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = mov_immediate;
    ins.m_to_string = decode_mov_immediate_a2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_mov_immediate_a2";
    ins.encoding = encoding;
    ins.setflags = setflags;
    ins.d = d;
    ins.imm32 = imm32;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_mov_register_thumb_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode,  7);
    int    Rm = get_bits(opcode,  6,  3);
    int    Rd = get_bits(opcode,  2,  0);
    int setflags = 0;
    int m = 0;
    int d = 0;

    d = UInt(Concatenate(D, Rd, 3));
    m = UInt(Rm);
    setflags = false;
    if (unlikely((((d == 15) && InITBlock()) && !LastInITBlock()))) {
        return UnpredictableInstruction("Reason: (((d == 15) && InITBlock()) && !LastInITBlock())");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = mov_register_thumb;
    ins.m_to_string = decode_mov_register_thumb_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_mov_register_thumb_t1";
    ins.encoding = encoding;
    ins.setflags = setflags;
    ins.m = m;
    ins.d = d;
    ins.D = D;

    return ins;
}

ARMInstruction ARMDecoder::decode_mov_register_thumb_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rm = get_bits(opcode,  5,  3);
    int    Rd = get_bits(opcode,  2,  0);
    int setflags = 0;
    int m = 0;
    int d = 0;

    d = UInt(Rd);
    m = UInt(Rm);
    setflags = true;
    if (unlikely(InITBlock())) {
        return UnpredictableInstruction("Reason: InITBlock()");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = mov_register_thumb;
    ins.m_to_string = decode_mov_register_thumb_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_mov_register_thumb_t2";
    ins.encoding = encoding;
    ins.setflags = setflags;
    ins.m = m;
    ins.d = d;

    return ins;
}

ARMInstruction ARMDecoder::decode_mov_register_thumb_t3(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     S = get_bit(opcode, 20);
    int    Rd = get_bits(opcode, 11,  8);
    int    Rm = get_bits(opcode,  3,  0);
    int setflags = 0;
    int m = 0;
    int d = 0;

    d = UInt(Rd);
    m = UInt(Rm);
    setflags = (S == 1);
    if (unlikely((setflags && ((d == 13 || d == 15) || (m == 13 || m == 15))))) {
        return UnpredictableInstruction("Reason: (setflags && ((d == 13 || d == 15) || (m == 13 || m == 15)))");
    }
    if (unlikely((!setflags && (((d == 15) || (m == 15)) || ((d == 13) && (m == 13)))))) {
        return UnpredictableInstruction("Reason: (!setflags && (((d == 15) || (m == 15)) || ((d == 13) && (m == 13))))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = mov_register_thumb;
    ins.m_to_string = decode_mov_register_thumb_t3_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_mov_register_thumb_t3";
    ins.encoding = encoding;
    ins.setflags = setflags;
    ins.m = m;
    ins.d = d;

    return ins;
}

ARMInstruction ARMDecoder::decode_mov_register_arm_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     S = get_bit(opcode, 20);
    int    Rd = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode,  3,  0);
    int setflags = 0;
    int m = 0;
    int d = 0;

    if (unlikely(((Rd == 15) && (S == 1)))) {
        return SeeInstruction("SUBS PC, LR and related instructions");
    }
    d = UInt(Rd);
    m = UInt(Rm);
    setflags = (S == 1);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = mov_register_arm;
    ins.m_to_string = decode_mov_register_arm_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_mov_register_arm_a1";
    ins.encoding = encoding;
    ins.setflags = setflags;
    ins.m = m;
    ins.d = d;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_movt_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     i = get_bit(opcode, 26);
    int  imm4 = get_bits(opcode, 19, 16);
    int  imm3 = get_bits(opcode, 14, 12);
    int    Rd = get_bits(opcode, 11,  8);
    int  imm8 = get_bits(opcode,  7,  0);
    int d = 0;
    int imm32 = 0;

    d = UInt(Rd);
    imm32 = Concatenate(Concatenate(Concatenate(imm4, i, 1), imm3, 3), imm8, 8);
    if (unlikely((d == 13 || d == 15))) {
        return UnpredictableInstruction("Reason: (d == 13 || d == 15)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = movt;
    ins.m_to_string = decode_movt_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_movt_t1";
    ins.encoding = encoding;
    ins.d = d;
    ins.imm32 = imm32;

    return ins;
}

ARMInstruction ARMDecoder::decode_movt_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int  imm4 = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int imm12 = get_bits(opcode, 11,  0);
    int d = 0;
    int imm32 = 0;

    d = UInt(Rd);
    imm32 = Concatenate(imm4, imm12, 12);
    if (unlikely((d == 15))) {
        return UnpredictableInstruction("Reason: (d == 15)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = movt;
    ins.m_to_string = decode_movt_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_movt_a1";
    ins.encoding = encoding;
    ins.d = d;
    ins.imm32 = imm32;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_mrc_mrc2_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  opc1 = get_bits(opcode, 23, 21);
    int   CRn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int coproc = get_bits(opcode, 11,  8);
    int  opc2 = get_bits(opcode,  7,  5);
    int   CRm = get_bits(opcode,  3,  0);
    int cp = 0;
    int t = 0;

    if (unlikely((coproc >= 10 && coproc <= 11))) {
        return SeeInstruction("AdvancedSIMD and Floating-point");
    }
    t = UInt(Rt);
    cp = UInt(coproc);
    if (unlikely(((t == 13) && (CurrentInstrSet() != InstrSet_ARM)))) {
        return UnpredictableInstruction("Reason: ((t == 13) && (CurrentInstrSet() != InstrSet_ARM))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = mrc_mrc2;
    ins.m_to_string = decode_mrc_mrc2_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_mrc_mrc2_t1";
    ins.encoding = encoding;
    ins.cp = cp;
    ins.t = t;
    ins.opc1 = opc1;
    ins.CRn = CRn;
    ins.coproc = coproc;
    ins.opc2 = opc2;
    ins.CRm = CRm;

    return ins;
}

ARMInstruction ARMDecoder::decode_mrc_mrc2_a2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  opc1 = get_bits(opcode, 23, 21);
    int   CRn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int coproc = get_bits(opcode, 11,  8);
    int  opc2 = get_bits(opcode,  7,  5);
    int   CRm = get_bits(opcode,  3,  0);
    int cp = 0;
    int t = 0;

    if (unlikely((coproc >= 10 && coproc <= 11))) {
        return UndefinedInstruction("Reason: (coproc >= 10 && coproc <= 11)");
    }
    t = UInt(Rt);
    cp = UInt(coproc);
    if (unlikely(((t == 13) && (CurrentInstrSet() != InstrSet_ARM)))) {
        return UnpredictableInstruction("Reason: ((t == 13) && (CurrentInstrSet() != InstrSet_ARM))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = mrc_mrc2;
    ins.m_to_string = decode_mrc_mrc2_a2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_mrc_mrc2_a2";
    ins.encoding = encoding;
    ins.cp = cp;
    ins.t = t;
    ins.opc1 = opc1;
    ins.CRn = CRn;
    ins.coproc = coproc;
    ins.opc2 = opc2;
    ins.CRm = CRm;

    return ins;
}

ARMInstruction ARMDecoder::decode_mrc_mrc2_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int  opc1 = get_bits(opcode, 23, 21);
    int   CRn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int coproc = get_bits(opcode, 11,  8);
    int  opc2 = get_bits(opcode,  7,  5);
    int   CRm = get_bits(opcode,  3,  0);
    int cp = 0;
    int t = 0;

    if (unlikely((coproc >= 10 && coproc <= 11))) {
        return SeeInstruction("AdvancedSIMD and Floating-point");
    }
    t = UInt(Rt);
    cp = UInt(coproc);
    if (unlikely(((t == 13) && (CurrentInstrSet() != InstrSet_ARM)))) {
        return UnpredictableInstruction("Reason: ((t == 13) && (CurrentInstrSet() != InstrSet_ARM))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = mrc_mrc2;
    ins.m_to_string = decode_mrc_mrc2_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_mrc_mrc2_a1";
    ins.encoding = encoding;
    ins.cp = cp;
    ins.t = t;
    ins.cond = cond;
    ins.opc1 = opc1;
    ins.CRn = CRn;
    ins.coproc = coproc;
    ins.opc2 = opc2;
    ins.CRm = CRm;

    return ins;
}

ARMInstruction ARMDecoder::decode_mrc_mrc2_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  opc1 = get_bits(opcode, 23, 21);
    int   CRn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int coproc = get_bits(opcode, 11,  8);
    int  opc2 = get_bits(opcode,  7,  5);
    int   CRm = get_bits(opcode,  3,  0);
    int cp = 0;
    int t = 0;

    if (unlikely((coproc >= 10 && coproc <= 11))) {
        return UndefinedInstruction("Reason: (coproc >= 10 && coproc <= 11)");
    }
    t = UInt(Rt);
    cp = UInt(coproc);
    if (unlikely(((t == 13) && (CurrentInstrSet() != InstrSet_ARM)))) {
        return UnpredictableInstruction("Reason: ((t == 13) && (CurrentInstrSet() != InstrSet_ARM))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = mrc_mrc2;
    ins.m_to_string = decode_mrc_mrc2_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_mrc_mrc2_t2";
    ins.encoding = encoding;
    ins.cp = cp;
    ins.t = t;
    ins.opc1 = opc1;
    ins.CRn = CRn;
    ins.coproc = coproc;
    ins.opc2 = opc2;
    ins.CRm = CRm;

    return ins;
}

ARMInstruction ARMDecoder::decode_mrrc_mrrc2_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int   Rt2 = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int coproc = get_bits(opcode, 11,  8);
    int  opc1 = get_bits(opcode,  7,  4);
    int   CRm = get_bits(opcode,  3,  0);
    int cp = 0;
    int t2 = 0;
    int t = 0;

    if (unlikely((coproc >= 10 && coproc <= 11))) {
        return SeeInstruction("AdvancedSIMD and Floating-point");
    }
    t = UInt(Rt);
    t2 = UInt(Rt2);
    cp = UInt(coproc);
    if (unlikely((((t == 15) || (t2 == 15)) || (t == t2)))) {
        return UnpredictableInstruction("Reason: (((t == 15) || (t2 == 15)) || (t == t2))");
    }
    if (unlikely((((t == 13) || (t2 == 13)) && (CurrentInstrSet() != InstrSet_ARM)))) {
        return UnpredictableInstruction("Reason: (((t == 13) || (t2 == 13)) && (CurrentInstrSet() != InstrSet_ARM))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = mrrc_mrrc2;
    ins.m_to_string = decode_mrrc_mrrc2_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_mrrc_mrrc2_t1";
    ins.encoding = encoding;
    ins.cp = cp;
    ins.t2 = t2;
    ins.t = t;
    ins.coproc = coproc;
    ins.opc1 = opc1;
    ins.CRm = CRm;

    return ins;
}

ARMInstruction ARMDecoder::decode_mrrc_mrrc2_a2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int   Rt2 = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int coproc = get_bits(opcode, 11,  8);
    int  opc1 = get_bits(opcode,  7,  4);
    int   CRm = get_bits(opcode,  3,  0);
    int cp = 0;
    int t2 = 0;
    int t = 0;

    if (unlikely((coproc >= 10 && coproc <= 11))) {
        return UndefinedInstruction("Reason: (coproc >= 10 && coproc <= 11)");
    }
    t = UInt(Rt);
    t2 = UInt(Rt2);
    cp = UInt(coproc);
    if (unlikely((((t == 15) || (t2 == 15)) || (t == t2)))) {
        return UnpredictableInstruction("Reason: (((t == 15) || (t2 == 15)) || (t == t2))");
    }
    if (unlikely((((t == 13) || (t2 == 13)) && (CurrentInstrSet() != InstrSet_ARM)))) {
        return UnpredictableInstruction("Reason: (((t == 13) || (t2 == 13)) && (CurrentInstrSet() != InstrSet_ARM))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = mrrc_mrrc2;
    ins.m_to_string = decode_mrrc_mrrc2_a2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_mrrc_mrrc2_a2";
    ins.encoding = encoding;
    ins.cp = cp;
    ins.t2 = t2;
    ins.t = t;
    ins.coproc = coproc;
    ins.opc1 = opc1;
    ins.CRm = CRm;

    return ins;
}

ARMInstruction ARMDecoder::decode_mrrc_mrrc2_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int   Rt2 = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int coproc = get_bits(opcode, 11,  8);
    int  opc1 = get_bits(opcode,  7,  4);
    int   CRm = get_bits(opcode,  3,  0);
    int cp = 0;
    int t2 = 0;
    int t = 0;

    if (unlikely((coproc >= 10 && coproc <= 11))) {
        return SeeInstruction("AdvancedSIMD and Floating-point");
    }
    t = UInt(Rt);
    t2 = UInt(Rt2);
    cp = UInt(coproc);
    if (unlikely((((t == 15) || (t2 == 15)) || (t == t2)))) {
        return UnpredictableInstruction("Reason: (((t == 15) || (t2 == 15)) || (t == t2))");
    }
    if (unlikely((((t == 13) || (t2 == 13)) && (CurrentInstrSet() != InstrSet_ARM)))) {
        return UnpredictableInstruction("Reason: (((t == 13) || (t2 == 13)) && (CurrentInstrSet() != InstrSet_ARM))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = mrrc_mrrc2;
    ins.m_to_string = decode_mrrc_mrrc2_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_mrrc_mrrc2_a1";
    ins.encoding = encoding;
    ins.cp = cp;
    ins.t2 = t2;
    ins.t = t;
    ins.cond = cond;
    ins.coproc = coproc;
    ins.opc1 = opc1;
    ins.CRm = CRm;

    return ins;
}

ARMInstruction ARMDecoder::decode_mrrc_mrrc2_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int   Rt2 = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int coproc = get_bits(opcode, 11,  8);
    int  opc1 = get_bits(opcode,  7,  4);
    int   CRm = get_bits(opcode,  3,  0);
    int cp = 0;
    int t2 = 0;
    int t = 0;

    if (unlikely((coproc >= 10 && coproc <= 11))) {
        return UndefinedInstruction("Reason: (coproc >= 10 && coproc <= 11)");
    }
    t = UInt(Rt);
    t2 = UInt(Rt2);
    cp = UInt(coproc);
    if (unlikely((((t == 15) || (t2 == 15)) || (t == t2)))) {
        return UnpredictableInstruction("Reason: (((t == 15) || (t2 == 15)) || (t == t2))");
    }
    if (unlikely((((t == 13) || (t2 == 13)) && (CurrentInstrSet() != InstrSet_ARM)))) {
        return UnpredictableInstruction("Reason: (((t == 13) || (t2 == 13)) && (CurrentInstrSet() != InstrSet_ARM))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = mrrc_mrrc2;
    ins.m_to_string = decode_mrrc_mrrc2_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_mrrc_mrrc2_t2";
    ins.encoding = encoding;
    ins.cp = cp;
    ins.t2 = t2;
    ins.t = t;
    ins.coproc = coproc;
    ins.opc1 = opc1;
    ins.CRm = CRm;

    return ins;
}

ARMInstruction ARMDecoder::decode_mrs_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     R = get_bit(opcode, 20);
    int    Rd = get_bits(opcode, 11,  8);
    int read_spsr = 0;
    int d = 0;

    d = UInt(Rd);
    read_spsr = (R == 1);
    if (unlikely((d == 13 || d == 15))) {
        return UnpredictableInstruction("Reason: (d == 13 || d == 15)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = mrs;
    ins.m_to_string = decode_mrs_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_mrs_t1";
    ins.encoding = encoding;
    ins.read_spsr = read_spsr;
    ins.d = d;

    return ins;
}

ARMInstruction ARMDecoder::decode_mrs_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     R = get_bit(opcode, 22);
    int    Rd = get_bits(opcode, 15, 12);
    int read_spsr = 0;
    int d = 0;

    d = UInt(Rd);
    read_spsr = (R == 1);
    if (unlikely((d == 15))) {
        return UnpredictableInstruction("Reason: (d == 15)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = mrs;
    ins.m_to_string = decode_mrs_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_mrs_a1";
    ins.encoding = encoding;
    ins.read_spsr = read_spsr;
    ins.d = d;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_msr_immediate_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     R = get_bit(opcode, 22);
    int  mask = get_bits(opcode, 19, 16);
    int imm12 = get_bits(opcode, 11,  0);
    int write_g = 0;
    int imm32 = 0;
    int write_nzcvq = 0;

    if (unlikely((mask == 0))) {
        return SeeInstruction("Related encodings");
    }
    imm32 = ARMExpandImm(imm12);
    write_nzcvq = (get_bit(mask, 1) == 1);
    write_g = (get_bit(mask, 0) == 1);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = msr_immediate;
    ins.m_to_string = decode_msr_immediate_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_msr_immediate_a1";
    ins.encoding = encoding;
    ins.write_g = write_g;
    ins.imm32 = imm32;
    ins.write_nzcvq = write_nzcvq;
    ins.cond = cond;
    ins.mask = mask;

    return ins;
}

ARMInstruction ARMDecoder::decode_msr_register_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     R = get_bit(opcode, 20);
    int    Rn = get_bits(opcode, 19, 16);
    int  mask = get_bits(opcode, 11,  8);
    int write_spsr = 0;
    int n = 0;

    n = UInt(Rn);
    write_spsr = (R == 1);
    if (unlikely((mask == 0))) {
        return UnpredictableInstruction("Reason: (mask == 0)");
    }
    if (unlikely((n == 13 || n == 15))) {
        return UnpredictableInstruction("Reason: (n == 13 || n == 15)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = msr_register;
    ins.m_to_string = decode_msr_register_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_msr_register_t1";
    ins.encoding = encoding;
    ins.write_spsr = write_spsr;
    ins.n = n;
    ins.mask = mask;

    return ins;
}

ARMInstruction ARMDecoder::decode_msr_register_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     R = get_bit(opcode, 22);
    int  mask = get_bits(opcode, 19, 16);
    int    Rn = get_bits(opcode,  3,  0);
    int write_spsr = 0;
    int n = 0;

    n = UInt(Rn);
    write_spsr = (R == 1);
    if (unlikely((mask == 0))) {
        return UnpredictableInstruction("Reason: (mask == 0)");
    }
    if (unlikely((n == 15))) {
        return UnpredictableInstruction("Reason: (n == 15)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = msr_register;
    ins.m_to_string = decode_msr_register_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_msr_register_a1";
    ins.encoding = encoding;
    ins.write_spsr = write_spsr;
    ins.n = n;
    ins.cond = cond;
    ins.mask = mask;

    return ins;
}

ARMInstruction ARMDecoder::decode_mul_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode,  5,  3);
    int   Rdm = get_bits(opcode,  2,  0);
    int setflags = 0;
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rdm);
    n = UInt(Rn);
    m = UInt(Rdm);
    setflags = !InITBlock();
    if (unlikely(((ArchVersion() < 6) && (d == n)))) {
        return UnpredictableInstruction("Reason: ((ArchVersion() < 6) && (d == n))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = mul;
    ins.m_to_string = decode_mul_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_mul_t1";
    ins.encoding = encoding;
    ins.setflags = setflags;
    ins.m = m;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_mul_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 11,  8);
    int    Rm = get_bits(opcode,  3,  0);
    int setflags = 0;
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    setflags = false;
    if (unlikely((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = mul;
    ins.m_to_string = decode_mul_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_mul_t2";
    ins.encoding = encoding;
    ins.setflags = setflags;
    ins.m = m;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_mul_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     S = get_bit(opcode, 20);
    int    Rd = get_bits(opcode, 19, 16);
    int    Rm = get_bits(opcode, 11,  8);
    int    Rn = get_bits(opcode,  3,  0);
    int setflags = 0;
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    setflags = (S == 1);
    if (unlikely((((d == 15) || (n == 15)) || (m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 15) || (n == 15)) || (m == 15))");
    }
    if (unlikely(((ArchVersion() < 6) && (d == n)))) {
        return UnpredictableInstruction("Reason: ((ArchVersion() < 6) && (d == n))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = mul;
    ins.m_to_string = decode_mul_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_mul_a1";
    ins.encoding = encoding;
    ins.setflags = setflags;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_mvn_immediate_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     i = get_bit(opcode, 26);
    int     S = get_bit(opcode, 20);
    int  imm3 = get_bits(opcode, 14, 12);
    int    Rd = get_bits(opcode, 11,  8);
    int  imm8 = get_bits(opcode,  7,  0);
    int setflags = 0;
    int imm12 = 0;
    int d = 0;
    int imm32 = 0;

    d = UInt(Rd);
    setflags = (S == 1);
    imm12 = Concatenate(Concatenate(i, imm3, 3), imm8, 8);
    imm32 = ThumbExpandImm(imm12);
    if (unlikely((d == 13 || d == 15))) {
        return UnpredictableInstruction("Reason: (d == 13 || d == 15)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = mvn_immediate;
    ins.m_to_string = decode_mvn_immediate_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_mvn_immediate_t1";
    ins.encoding = encoding;
    ins.setflags = setflags;
    ins.imm12 = imm12;
    ins.d = d;
    ins.imm32 = imm32;

    return ins;
}

ARMInstruction ARMDecoder::decode_mvn_immediate_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     S = get_bit(opcode, 20);
    int    Rd = get_bits(opcode, 15, 12);
    int imm12 = get_bits(opcode, 11,  0);
    int setflags = 0;
    int d = 0;
    int imm32 = 0;

    if (unlikely(((Rd == 15) && (S == 1)))) {
        return SeeInstruction("SUBS PC, LR and related instructions");
    }
    d = UInt(Rd);
    setflags = (S == 1);
    imm32 = ARMExpandImm(imm12);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = mvn_immediate;
    ins.m_to_string = decode_mvn_immediate_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_mvn_immediate_a1";
    ins.encoding = encoding;
    ins.setflags = setflags;
    ins.d = d;
    ins.imm32 = imm32;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_mvn_register_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rm = get_bits(opcode,  5,  3);
    int    Rd = get_bits(opcode,  2,  0);
    int shift_n = 0;
    int setflags = 0;
    int shift_t = 0;
    int m = 0;
    int d = 0;

    d = UInt(Rd);
    m = UInt(Rm);
    setflags = !InITBlock();
    shift_t = SRType_LSL, shift_n = 0;
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = mvn_register;
    ins.m_to_string = decode_mvn_register_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_mvn_register_t1";
    ins.encoding = encoding;
    ins.shift_n = shift_n;
    ins.setflags = setflags;
    ins.shift_t = shift_t;
    ins.m = m;
    ins.d = d;

    return ins;
}

ARMInstruction ARMDecoder::decode_mvn_register_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     S = get_bit(opcode, 20);
    int  imm3 = get_bits(opcode, 14, 12);
    int    Rd = get_bits(opcode, 11,  8);
    int  imm2 = get_bits(opcode,  7,  6);
    int  type = get_bits(opcode,  5,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int shift_n = 0;
    int setflags = 0;
    int shift_t = 0;
    int m = 0;
    int d = 0;

    d = UInt(Rd);
    m = UInt(Rm);
    setflags = (S == 1);
    std::tie(shift_t, shift_n) = DecodeImmShift(type, Concatenate(imm3, imm2, 2));
    if (unlikely(((d == 13 || d == 15) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: ((d == 13 || d == 15) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = mvn_register;
    ins.m_to_string = decode_mvn_register_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_mvn_register_t2";
    ins.encoding = encoding;
    ins.shift_n = shift_n;
    ins.setflags = setflags;
    ins.shift_t = shift_t;
    ins.m = m;
    ins.d = d;
    ins.type = type;

    return ins;
}

ARMInstruction ARMDecoder::decode_mvn_register_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     S = get_bit(opcode, 20);
    int    Rd = get_bits(opcode, 15, 12);
    int  imm5 = get_bits(opcode, 11,  7);
    int  type = get_bits(opcode,  6,  5);
    int    Rm = get_bits(opcode,  3,  0);
    int shift_n = 0;
    int setflags = 0;
    int shift_t = 0;
    int m = 0;
    int d = 0;

    if (unlikely(((Rd == 15) && (S == 1)))) {
        return SeeInstruction("SUBS PC, LR and related instructions");
    }
    d = UInt(Rd);
    m = UInt(Rm);
    setflags = (S == 1);
    std::tie(shift_t, shift_n) = DecodeImmShift(type, imm5);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = mvn_register;
    ins.m_to_string = decode_mvn_register_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_mvn_register_a1";
    ins.encoding = encoding;
    ins.shift_n = shift_n;
    ins.setflags = setflags;
    ins.shift_t = shift_t;
    ins.m = m;
    ins.d = d;
    ins.cond = cond;
    ins.type = type;

    return ins;
}

ARMInstruction ARMDecoder::decode_mvn_register_shifted_register_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     S = get_bit(opcode, 20);
    int    Rd = get_bits(opcode, 15, 12);
    int    Rs = get_bits(opcode, 11,  8);
    int  type = get_bits(opcode,  6,  5);
    int    Rm = get_bits(opcode,  3,  0);
    int setflags = 0;
    int s = 0;
    int m = 0;
    int d = 0;
    int shift_t = 0;

    d = UInt(Rd);
    m = UInt(Rm);
    s = UInt(Rs);
    setflags = (S == 1);
    shift_t = DecodeRegShift(type);
    if (unlikely((((d == 15) || (m == 15)) || (s == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 15) || (m == 15)) || (s == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = mvn_register_shifted_register;
    ins.m_to_string = decode_mvn_register_shifted_register_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_mvn_register_shifted_register_a1";
    ins.encoding = encoding;
    ins.setflags = setflags;
    ins.s = s;
    ins.m = m;
    ins.d = d;
    ins.shift_t = shift_t;
    ins.cond = cond;
    ins.type = type;

    return ins;
}

ARMInstruction ARMDecoder::decode_nop_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {

    NOP();
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = nop;
    ins.m_to_string = decode_nop_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_nop_t1";
    ins.encoding = encoding;

    return ins;
}

ARMInstruction ARMDecoder::decode_nop_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {

    NOP();
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = nop;
    ins.m_to_string = decode_nop_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_nop_t2";
    ins.encoding = encoding;

    return ins;
}

ARMInstruction ARMDecoder::decode_nop_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);

    NOP();
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = nop;
    ins.m_to_string = decode_nop_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_nop_a1";
    ins.encoding = encoding;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_orn_immediate_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     i = get_bit(opcode, 26);
    int     S = get_bit(opcode, 20);
    int    Rn = get_bits(opcode, 19, 16);
    int  imm3 = get_bits(opcode, 14, 12);
    int    Rd = get_bits(opcode, 11,  8);
    int  imm8 = get_bits(opcode,  7,  0);
    int setflags = 0;
    int imm32 = 0;
    int imm12 = 0;
    int d = 0;
    int n = 0;

    if (unlikely((Rn == 15))) {
        return SeeInstruction("MVN (immediate)");
    }
    d = UInt(Rd);
    n = UInt(Rn);
    setflags = (S == 1);
    imm12 = Concatenate(Concatenate(i, imm3, 3), imm8, 8);
    imm32 = ThumbExpandImm(imm12);
    if (unlikely(((d == 13 || d == 15) || (n == 13)))) {
        return UnpredictableInstruction("Reason: ((d == 13 || d == 15) || (n == 13))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = orn_immediate;
    ins.m_to_string = decode_orn_immediate_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_orn_immediate_t1";
    ins.encoding = encoding;
    ins.setflags = setflags;
    ins.imm32 = imm32;
    ins.imm12 = imm12;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_orn_register_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     S = get_bit(opcode, 20);
    int    Rn = get_bits(opcode, 19, 16);
    int  imm3 = get_bits(opcode, 14, 12);
    int    Rd = get_bits(opcode, 11,  8);
    int  imm2 = get_bits(opcode,  7,  6);
    int  type = get_bits(opcode,  5,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int shift_t = 0;
    int d = 0;
    int m = 0;
    int n = 0;
    int shift_n = 0;
    int setflags = 0;

    if (unlikely((Rn == 15))) {
        return SeeInstruction("MVN (register)");
    }
    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    setflags = (S == 1);
    std::tie(shift_t, shift_n) = DecodeImmShift(type, Concatenate(imm3, imm2, 2));
    if (unlikely((((d == 13 || d == 15) || (n == 13)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 13 || d == 15) || (n == 13)) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = orn_register;
    ins.m_to_string = decode_orn_register_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_orn_register_t1";
    ins.encoding = encoding;
    ins.shift_t = shift_t;
    ins.d = d;
    ins.m = m;
    ins.n = n;
    ins.shift_n = shift_n;
    ins.setflags = setflags;
    ins.type = type;

    return ins;
}

ARMInstruction ARMDecoder::decode_orr_immediate_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     i = get_bit(opcode, 26);
    int     S = get_bit(opcode, 20);
    int    Rn = get_bits(opcode, 19, 16);
    int  imm3 = get_bits(opcode, 14, 12);
    int    Rd = get_bits(opcode, 11,  8);
    int  imm8 = get_bits(opcode,  7,  0);
    int setflags = 0;
    int imm32 = 0;
    int imm12 = 0;
    int d = 0;
    int n = 0;

    if (unlikely((Rn == 15))) {
        return SeeInstruction("MOV (immediate)");
    }
    d = UInt(Rd);
    n = UInt(Rn);
    setflags = (S == 1);
    imm12 = Concatenate(Concatenate(i, imm3, 3), imm8, 8);
    imm32 = ThumbExpandImm(imm12);
    if (unlikely(((d == 13 || d == 15) || (n == 13)))) {
        return UnpredictableInstruction("Reason: ((d == 13 || d == 15) || (n == 13))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = orr_immediate;
    ins.m_to_string = decode_orr_immediate_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_orr_immediate_t1";
    ins.encoding = encoding;
    ins.setflags = setflags;
    ins.imm32 = imm32;
    ins.imm12 = imm12;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_orr_immediate_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     S = get_bit(opcode, 20);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int imm12 = get_bits(opcode, 11,  0);
    int setflags = 0;
    int imm32 = 0;
    int d = 0;
    int n = 0;

    if (unlikely(((Rd == 15) && (S == 1)))) {
        return SeeInstruction("SUBS PC, LR and related instructions");
    }
    d = UInt(Rd);
    n = UInt(Rn);
    setflags = (S == 1);
    imm32 = ARMExpandImm(imm12);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = orr_immediate;
    ins.m_to_string = decode_orr_immediate_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_orr_immediate_a1";
    ins.encoding = encoding;
    ins.setflags = setflags;
    ins.imm32 = imm32;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_orr_register_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rm = get_bits(opcode,  5,  3);
    int   Rdn = get_bits(opcode,  2,  0);
    int shift_t = 0;
    int d = 0;
    int m = 0;
    int n = 0;
    int shift_n = 0;
    int setflags = 0;

    d = UInt(Rdn);
    n = UInt(Rdn);
    m = UInt(Rm);
    setflags = !InITBlock();
    shift_t = SRType_LSL, shift_n = 0;
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = orr_register;
    ins.m_to_string = decode_orr_register_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_orr_register_t1";
    ins.encoding = encoding;
    ins.shift_t = shift_t;
    ins.d = d;
    ins.m = m;
    ins.n = n;
    ins.shift_n = shift_n;
    ins.setflags = setflags;

    return ins;
}

ARMInstruction ARMDecoder::decode_orr_register_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     S = get_bit(opcode, 20);
    int    Rn = get_bits(opcode, 19, 16);
    int  imm3 = get_bits(opcode, 14, 12);
    int    Rd = get_bits(opcode, 11,  8);
    int  imm2 = get_bits(opcode,  7,  6);
    int  type = get_bits(opcode,  5,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int shift_t = 0;
    int d = 0;
    int m = 0;
    int n = 0;
    int shift_n = 0;
    int setflags = 0;

    if (unlikely((Rn == 15))) {
        return SeeInstruction("Related encodings");
    }
    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    setflags = (S == 1);
    std::tie(shift_t, shift_n) = DecodeImmShift(type, Concatenate(imm3, imm2, 2));
    if (unlikely((((d == 13 || d == 15) || (n == 13)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 13 || d == 15) || (n == 13)) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = orr_register;
    ins.m_to_string = decode_orr_register_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_orr_register_t2";
    ins.encoding = encoding;
    ins.shift_t = shift_t;
    ins.d = d;
    ins.m = m;
    ins.n = n;
    ins.shift_n = shift_n;
    ins.setflags = setflags;
    ins.type = type;

    return ins;
}

ARMInstruction ARMDecoder::decode_orr_register_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     S = get_bit(opcode, 20);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int  imm5 = get_bits(opcode, 11,  7);
    int  type = get_bits(opcode,  6,  5);
    int    Rm = get_bits(opcode,  3,  0);
    int shift_t = 0;
    int d = 0;
    int m = 0;
    int n = 0;
    int shift_n = 0;
    int setflags = 0;

    if (unlikely(((Rd == 15) && (S == 1)))) {
        return SeeInstruction("SUBS PC, LR and related instructions");
    }
    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    setflags = (S == 1);
    std::tie(shift_t, shift_n) = DecodeImmShift(type, imm5);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = orr_register;
    ins.m_to_string = decode_orr_register_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_orr_register_a1";
    ins.encoding = encoding;
    ins.shift_t = shift_t;
    ins.d = d;
    ins.m = m;
    ins.n = n;
    ins.shift_n = shift_n;
    ins.setflags = setflags;
    ins.cond = cond;
    ins.type = type;

    return ins;
}

ARMInstruction ARMDecoder::decode_orr_register_shifted_register_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     S = get_bit(opcode, 20);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int    Rs = get_bits(opcode, 11,  8);
    int  type = get_bits(opcode,  6,  5);
    int    Rm = get_bits(opcode,  3,  0);
    int shift_t = 0;
    int d = 0;
    int m = 0;
    int n = 0;
    int s = 0;
    int setflags = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    s = UInt(Rs);
    setflags = (S == 1);
    shift_t = DecodeRegShift(type);
    if (unlikely(((((d == 15) || (n == 15)) || (m == 15)) || (s == 15)))) {
        return UnpredictableInstruction("Reason: ((((d == 15) || (n == 15)) || (m == 15)) || (s == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = orr_register_shifted_register;
    ins.m_to_string = decode_orr_register_shifted_register_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_orr_register_shifted_register_a1";
    ins.encoding = encoding;
    ins.shift_t = shift_t;
    ins.d = d;
    ins.m = m;
    ins.n = n;
    ins.s = s;
    ins.setflags = setflags;
    ins.cond = cond;
    ins.type = type;

    return ins;
}

ARMInstruction ARMDecoder::decode_pkh_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     S = get_bit(opcode, 20);
    int    Rn = get_bits(opcode, 19, 16);
    int  imm3 = get_bits(opcode, 14, 12);
    int    Rd = get_bits(opcode, 11,  8);
    int  imm2 = get_bits(opcode,  7,  6);
    int    tb = get_bit(opcode,  5);
    int     T = get_bit(opcode,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int shift_t = 0;
    int d = 0;
    int m = 0;
    int tbform = 0;
    int n = 0;
    int shift_n = 0;

    if (unlikely(((S == 1) || (T == 1)))) {
        return UndefinedInstruction("Reason: ((S == 1) || (T == 1))");
    }
    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    tbform = (tb == 1);
    std::tie(shift_t, shift_n) = DecodeImmShift(Concatenate(tb, 0, 1), Concatenate(imm3, imm2, 2));
    if (unlikely((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = pkh;
    ins.m_to_string = decode_pkh_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_pkh_t1";
    ins.encoding = encoding;
    ins.shift_t = shift_t;
    ins.d = d;
    ins.m = m;
    ins.tbform = tbform;
    ins.n = n;
    ins.shift_n = shift_n;
    ins.T = T;

    return ins;
}

ARMInstruction ARMDecoder::decode_pkh_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int  imm5 = get_bits(opcode, 11,  7);
    int    tb = get_bit(opcode,  6);
    int    Rm = get_bits(opcode,  3,  0);
    int shift_t = 0;
    int d = 0;
    int m = 0;
    int tbform = 0;
    int n = 0;
    int shift_n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    tbform = (tb == 1);
    std::tie(shift_t, shift_n) = DecodeImmShift(Concatenate(tb, 0, 1), imm5);
    if (unlikely((((d == 15) || (n == 15)) || (m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 15) || (n == 15)) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = pkh;
    ins.m_to_string = decode_pkh_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_pkh_a1";
    ins.encoding = encoding;
    ins.shift_t = shift_t;
    ins.d = d;
    ins.m = m;
    ins.tbform = tbform;
    ins.n = n;
    ins.shift_n = shift_n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_pld_pldw_immediate_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     W = get_bit(opcode, 21);
    int    Rn = get_bits(opcode, 19, 16);
    int imm12 = get_bits(opcode, 11,  0);
    int add = 0;
    int is_pldw = 0;
    int imm32 = 0;
    int n = 0;

    if (unlikely((Rn == 15))) {
        return SeeInstruction("PLD (literal)");
    }
    n = UInt(Rn);
    imm32 = ZeroExtend(imm12, 32);
    add = true;
    is_pldw = (W == 1);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = pld_pldw_immediate;
    ins.m_to_string = decode_pld_pldw_immediate_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_pld_pldw_immediate_t1";
    ins.encoding = encoding;
    ins.add = add;
    ins.is_pldw = is_pldw;
    ins.imm32 = imm32;
    ins.n = n;
    ins.W = W;

    return ins;
}

ARMInstruction ARMDecoder::decode_pld_pldw_immediate_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     W = get_bit(opcode, 21);
    int    Rn = get_bits(opcode, 19, 16);
    int  imm8 = get_bits(opcode,  7,  0);
    int add = 0;
    int is_pldw = 0;
    int imm32 = 0;
    int n = 0;

    if (unlikely((Rn == 15))) {
        return SeeInstruction("PLD (literal)");
    }
    n = UInt(Rn);
    imm32 = ZeroExtend(imm8, 32);
    add = false;
    is_pldw = (W == 1);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = pld_pldw_immediate;
    ins.m_to_string = decode_pld_pldw_immediate_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_pld_pldw_immediate_t2";
    ins.encoding = encoding;
    ins.add = add;
    ins.is_pldw = is_pldw;
    ins.imm32 = imm32;
    ins.n = n;
    ins.W = W;

    return ins;
}

ARMInstruction ARMDecoder::decode_pld_literal_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 23);
    int imm12 = get_bits(opcode, 11,  0);
    int add = 0;
    int imm32 = 0;

    imm32 = ZeroExtend(imm12, 32);
    add = (U == 1);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = pld_literal;
    ins.m_to_string = decode_pld_literal_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_pld_literal_t1";
    ins.encoding = encoding;
    ins.add = add;
    ins.imm32 = imm32;
    ins.U = U;

    return ins;
}

ARMInstruction ARMDecoder::decode_pld_pldw_register_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     W = get_bit(opcode, 21);
    int    Rn = get_bits(opcode, 19, 16);
    int  imm2 = get_bits(opcode,  5,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int shift_t = 0;
    int m = 0;
    int n = 0;
    int add = 0;
    int is_pldw = 0;
    int shift_n = 0;

    if (unlikely((Rn == 15))) {
        return SeeInstruction("PLD (literal)");
    }
    n = UInt(Rn);
    m = UInt(Rm);
    add = true;
    is_pldw = (W == 1);
    shift_t = SRType_LSL, shift_n = UInt(imm2);
    if (unlikely((m == 13 || m == 15))) {
        return UnpredictableInstruction("Reason: (m == 13 || m == 15)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = pld_pldw_register;
    ins.m_to_string = decode_pld_pldw_register_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_pld_pldw_register_t1";
    ins.encoding = encoding;
    ins.shift_t = shift_t;
    ins.m = m;
    ins.n = n;
    ins.add = add;
    ins.is_pldw = is_pldw;
    ins.shift_n = shift_n;
    ins.W = W;

    return ins;
}

ARMInstruction ARMDecoder::decode_pli_immediate_literal_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int imm12 = get_bits(opcode, 11,  0);
    int add = 0;
    int imm32 = 0;
    int n = 0;

    if (unlikely((Rn == 15))) {
        return SeeInstruction("encoding T3");
    }
    n = UInt(Rn);
    imm32 = ZeroExtend(imm12, 32);
    add = true;
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = pli_immediate_literal;
    ins.m_to_string = decode_pli_immediate_literal_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_pli_immediate_literal_t1";
    ins.encoding = encoding;
    ins.add = add;
    ins.imm32 = imm32;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_pli_immediate_literal_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int  imm8 = get_bits(opcode,  7,  0);
    int add = 0;
    int imm32 = 0;
    int n = 0;

    if (unlikely((Rn == 15))) {
        return SeeInstruction("encoding T3");
    }
    n = UInt(Rn);
    imm32 = ZeroExtend(imm8, 32);
    add = false;
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = pli_immediate_literal;
    ins.m_to_string = decode_pli_immediate_literal_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_pli_immediate_literal_t2";
    ins.encoding = encoding;
    ins.add = add;
    ins.imm32 = imm32;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_pli_immediate_literal_t3(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 23);
    int imm12 = get_bits(opcode, 11,  0);
    int add = 0;
    int imm32 = 0;
    int n = 0;

    n = 15;
    imm32 = ZeroExtend(imm12, 32);
    add = (U == 1);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = pli_immediate_literal;
    ins.m_to_string = decode_pli_immediate_literal_t3_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_pli_immediate_literal_t3";
    ins.encoding = encoding;
    ins.add = add;
    ins.imm32 = imm32;
    ins.n = n;
    ins.U = U;

    return ins;
}

ARMInstruction ARMDecoder::decode_pop_thumb_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     P = get_bit(opcode,  8);
    int register_list = get_bits(opcode,  7,  0);
    int registers = 0;
    int UnalignedAllowed = 0;

    registers = Concatenate(Concatenate(P, 0, 7), register_list, 8);
    UnalignedAllowed = false;
    if (unlikely((BitCount(registers) < 1))) {
        return UnpredictableInstruction("Reason: (BitCount(registers) < 1)");
    }
    if (unlikely((((get_bit(registers, 15) == 1) && InITBlock()) && !LastInITBlock()))) {
        return UnpredictableInstruction("Reason: (((get_bit(registers, 15) == 1) && InITBlock()) && !LastInITBlock())");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = pop_thumb;
    ins.m_to_string = decode_pop_thumb_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_pop_thumb_t1";
    ins.encoding = encoding;
    ins.registers = registers;
    ins.UnalignedAllowed = UnalignedAllowed;
    ins.P = P;

    return ins;
}

ARMInstruction ARMDecoder::decode_pop_thumb_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     P = get_bit(opcode, 15);
    int     M = get_bit(opcode, 14);
    int register_list = get_bits(opcode, 12,  0);
    int registers = 0;
    int UnalignedAllowed = 0;

    registers = Concatenate(Concatenate(Concatenate(P, M, 1), 0, 1), register_list, 13);
    UnalignedAllowed = false;
    if (unlikely(((BitCount(registers) < 2) || ((P == 1) && (M == 1))))) {
        return UnpredictableInstruction("Reason: ((BitCount(registers) < 2) || ((P == 1) && (M == 1)))");
    }
    if (unlikely((((get_bit(registers, 15) == 1) && InITBlock()) && !LastInITBlock()))) {
        return UnpredictableInstruction("Reason: (((get_bit(registers, 15) == 1) && InITBlock()) && !LastInITBlock())");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = pop_thumb;
    ins.m_to_string = decode_pop_thumb_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_pop_thumb_t2";
    ins.encoding = encoding;
    ins.registers = registers;
    ins.UnalignedAllowed = UnalignedAllowed;
    ins.P = P;

    return ins;
}

ARMInstruction ARMDecoder::decode_pop_thumb_t3(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rt = get_bits(opcode, 15, 12);
    int registers = 0;
    int t = 0;
    int UnalignedAllowed = 0;

    t = UInt(Rt);
    registers = Zeros(16);
    registers = (1 << t);
    UnalignedAllowed = true;
    if (unlikely(((t == 13) || (((t == 15) && InITBlock()) && !LastInITBlock())))) {
        return UnpredictableInstruction("Reason: ((t == 13) || (((t == 15) && InITBlock()) && !LastInITBlock()))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = pop_thumb;
    ins.m_to_string = decode_pop_thumb_t3_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_pop_thumb_t3";
    ins.encoding = encoding;
    ins.registers = registers;
    ins.t = t;
    ins.UnalignedAllowed = UnalignedAllowed;

    return ins;
}

ARMInstruction ARMDecoder::decode_pop_arm_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int register_list = get_bits(opcode, 15,  0);
    int registers = 0;
    int UnalignedAllowed = 0;

    if (unlikely((BitCount(register_list) < 2))) {
        return SeeInstruction("LDM/LDMIA/LDMFD (ARM)");
    }
    registers = register_list;
    UnalignedAllowed = false;
    if (unlikely(((get_bit(registers, 13) == 1) && (ArchVersion() >= 7)))) {
        return UnpredictableInstruction("Reason: ((get_bit(registers, 13) == 1) && (ArchVersion() >= 7))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = pop_arm;
    ins.m_to_string = decode_pop_arm_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_pop_arm_a1";
    ins.encoding = encoding;
    ins.registers = registers;
    ins.UnalignedAllowed = UnalignedAllowed;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_pop_arm_a2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rt = get_bits(opcode, 15, 12);
    int registers = 0;
    int t = 0;
    int UnalignedAllowed = 0;

    t = UInt(Rt);
    registers = Zeros(16);
    registers = (1 << t);
    UnalignedAllowed = true;
    if (unlikely((t == 13))) {
        return UnpredictableInstruction("Reason: (t == 13)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = pop_arm;
    ins.m_to_string = decode_pop_arm_a2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_pop_arm_a2";
    ins.encoding = encoding;
    ins.registers = registers;
    ins.t = t;
    ins.UnalignedAllowed = UnalignedAllowed;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_push_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     M = get_bit(opcode,  8);
    int register_list = get_bits(opcode,  7,  0);
    int registers = 0;
    int UnalignedAllowed = 0;

    registers = Concatenate(Concatenate(Concatenate(0, M, 1), 0, 6), register_list, 8);
    UnalignedAllowed = false;
    if (unlikely((BitCount(registers) < 1))) {
        return UnpredictableInstruction("Reason: (BitCount(registers) < 1)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = push;
    ins.m_to_string = decode_push_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_push_t1";
    ins.encoding = encoding;
    ins.registers = registers;
    ins.UnalignedAllowed = UnalignedAllowed;

    return ins;
}

ARMInstruction ARMDecoder::decode_push_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     M = get_bit(opcode, 14);
    int register_list = get_bits(opcode, 12,  0);
    int registers = 0;
    int UnalignedAllowed = 0;

    registers = Concatenate(Concatenate(Concatenate(0, M, 1), 0, 1), register_list, 13);
    UnalignedAllowed = false;
    if (unlikely((BitCount(registers) < 2))) {
        return UnpredictableInstruction("Reason: (BitCount(registers) < 2)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = push;
    ins.m_to_string = decode_push_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_push_t2";
    ins.encoding = encoding;
    ins.registers = registers;
    ins.UnalignedAllowed = UnalignedAllowed;

    return ins;
}

ARMInstruction ARMDecoder::decode_push_t3(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rt = get_bits(opcode, 15, 12);
    int registers = 0;
    int t = 0;
    int UnalignedAllowed = 0;

    t = UInt(Rt);
    registers = Zeros(16);
    registers = (1 << t);
    UnalignedAllowed = true;
    if (unlikely((t == 13 || t == 15))) {
        return UnpredictableInstruction("Reason: (t == 13 || t == 15)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = push;
    ins.m_to_string = decode_push_t3_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_push_t3";
    ins.encoding = encoding;
    ins.registers = registers;
    ins.t = t;
    ins.UnalignedAllowed = UnalignedAllowed;

    return ins;
}

ARMInstruction ARMDecoder::decode_push_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int register_list = get_bits(opcode, 15,  0);
    int registers = 0;
    int UnalignedAllowed = 0;

    if (unlikely((BitCount(register_list) < 2))) {
        return SeeInstruction("STMDB (STMFD)");
    }
    registers = register_list;
    UnalignedAllowed = false;
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = push;
    ins.m_to_string = decode_push_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_push_a1";
    ins.encoding = encoding;
    ins.registers = registers;
    ins.UnalignedAllowed = UnalignedAllowed;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_push_a2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rt = get_bits(opcode, 15, 12);
    int registers = 0;
    int t = 0;
    int UnalignedAllowed = 0;

    t = UInt(Rt);
    registers = Zeros(16);
    registers = (1 << t);
    UnalignedAllowed = true;
    if (unlikely((t == 13))) {
        return UnpredictableInstruction("Reason: (t == 13)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = push;
    ins.m_to_string = decode_push_a2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_push_a2";
    ins.encoding = encoding;
    ins.registers = registers;
    ins.t = t;
    ins.UnalignedAllowed = UnalignedAllowed;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_qadd_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 11,  8);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = qadd;
    ins.m_to_string = decode_qadd_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_qadd_t1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_qadd_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 15) || (n == 15)) || (m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 15) || (n == 15)) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = qadd;
    ins.m_to_string = decode_qadd_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_qadd_a1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_qadd16_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 11,  8);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = qadd16;
    ins.m_to_string = decode_qadd16_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_qadd16_t1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_qadd16_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 15) || (n == 15)) || (m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 15) || (n == 15)) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = qadd16;
    ins.m_to_string = decode_qadd16_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_qadd16_a1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_qadd8_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 11,  8);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = qadd8;
    ins.m_to_string = decode_qadd8_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_qadd8_t1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_qadd8_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 15) || (n == 15)) || (m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 15) || (n == 15)) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = qadd8;
    ins.m_to_string = decode_qadd8_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_qadd8_a1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_qasx_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 11,  8);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = qasx;
    ins.m_to_string = decode_qasx_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_qasx_t1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_qasx_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 15) || (n == 15)) || (m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 15) || (n == 15)) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = qasx;
    ins.m_to_string = decode_qasx_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_qasx_a1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_qdadd_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 11,  8);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = qdadd;
    ins.m_to_string = decode_qdadd_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_qdadd_t1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_qdadd_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 15) || (n == 15)) || (m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 15) || (n == 15)) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = qdadd;
    ins.m_to_string = decode_qdadd_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_qdadd_a1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_qdsub_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 11,  8);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = qdsub;
    ins.m_to_string = decode_qdsub_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_qdsub_t1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_qdsub_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 15) || (n == 15)) || (m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 15) || (n == 15)) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = qdsub;
    ins.m_to_string = decode_qdsub_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_qdsub_a1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_qsax_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 11,  8);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = qsax;
    ins.m_to_string = decode_qsax_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_qsax_t1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_qsax_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 15) || (n == 15)) || (m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 15) || (n == 15)) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = qsax;
    ins.m_to_string = decode_qsax_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_qsax_a1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_qsub_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 11,  8);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = qsub;
    ins.m_to_string = decode_qsub_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_qsub_t1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_qsub_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 15) || (n == 15)) || (m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 15) || (n == 15)) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = qsub;
    ins.m_to_string = decode_qsub_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_qsub_a1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_qsub16_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 11,  8);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = qsub16;
    ins.m_to_string = decode_qsub16_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_qsub16_t1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_qsub16_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 15) || (n == 15)) || (m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 15) || (n == 15)) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = qsub16;
    ins.m_to_string = decode_qsub16_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_qsub16_a1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_qsub8_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 11,  8);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = qsub8;
    ins.m_to_string = decode_qsub8_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_qsub8_t1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_qsub8_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 15) || (n == 15)) || (m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 15) || (n == 15)) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = qsub8;
    ins.m_to_string = decode_qsub8_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_qsub8_a1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_rbit_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int   Rm_ = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 11,  8);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;

    if (unlikely(!(Rm == Rm_))) {
        return UnpredictableInstruction("Reason: !(Rm == Rm_)");
    }
    d = UInt(Rd);
    m = UInt(Rm);
    if (unlikely(((d == 13 || d == 15) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: ((d == 13 || d == 15) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = rbit;
    ins.m_to_string = decode_rbit_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_rbit_t1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;

    return ins;
}

ARMInstruction ARMDecoder::decode_rbit_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rd = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;

    d = UInt(Rd);
    m = UInt(Rm);
    if (unlikely(((d == 15) || (m == 15)))) {
        return UnpredictableInstruction("Reason: ((d == 15) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = rbit;
    ins.m_to_string = decode_rbit_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_rbit_a1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_rev_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rm = get_bits(opcode,  5,  3);
    int    Rd = get_bits(opcode,  2,  0);
    int m = 0;
    int d = 0;

    d = UInt(Rd);
    m = UInt(Rm);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = rev;
    ins.m_to_string = decode_rev_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_rev_t1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;

    return ins;
}

ARMInstruction ARMDecoder::decode_rev_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int   Rm_ = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 11,  8);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;

    if (unlikely(!(Rm == Rm_))) {
        return UnpredictableInstruction("Reason: !(Rm == Rm_)");
    }
    d = UInt(Rd);
    m = UInt(Rm);
    if (unlikely(((d == 13 || d == 15) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: ((d == 13 || d == 15) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = rev;
    ins.m_to_string = decode_rev_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_rev_t2";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;

    return ins;
}

ARMInstruction ARMDecoder::decode_rev_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rd = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;

    d = UInt(Rd);
    m = UInt(Rm);
    if (unlikely(((d == 15) || (m == 15)))) {
        return UnpredictableInstruction("Reason: ((d == 15) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = rev;
    ins.m_to_string = decode_rev_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_rev_a1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_rev16_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rm = get_bits(opcode,  5,  3);
    int    Rd = get_bits(opcode,  2,  0);
    int m = 0;
    int d = 0;

    d = UInt(Rd);
    m = UInt(Rm);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = rev16;
    ins.m_to_string = decode_rev16_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_rev16_t1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;

    return ins;
}

ARMInstruction ARMDecoder::decode_rev16_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int   Rm_ = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 11,  8);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;

    if (unlikely(!(Rm == Rm_))) {
        return UnpredictableInstruction("Reason: !(Rm == Rm_)");
    }
    d = UInt(Rd);
    m = UInt(Rm);
    if (unlikely(((d == 13 || d == 15) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: ((d == 13 || d == 15) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = rev16;
    ins.m_to_string = decode_rev16_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_rev16_t2";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;

    return ins;
}

ARMInstruction ARMDecoder::decode_rev16_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rd = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;

    d = UInt(Rd);
    m = UInt(Rm);
    if (unlikely(((d == 15) || (m == 15)))) {
        return UnpredictableInstruction("Reason: ((d == 15) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = rev16;
    ins.m_to_string = decode_rev16_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_rev16_a1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_revsh_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rm = get_bits(opcode,  5,  3);
    int    Rd = get_bits(opcode,  2,  0);
    int m = 0;
    int d = 0;

    d = UInt(Rd);
    m = UInt(Rm);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = revsh;
    ins.m_to_string = decode_revsh_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_revsh_t1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;

    return ins;
}

ARMInstruction ARMDecoder::decode_revsh_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int   Rm_ = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 11,  8);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;

    if (unlikely(!(Rm == Rm_))) {
        return UnpredictableInstruction("Reason: !(Rm == Rm_)");
    }
    d = UInt(Rd);
    m = UInt(Rm);
    if (unlikely(((d == 13 || d == 15) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: ((d == 13 || d == 15) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = revsh;
    ins.m_to_string = decode_revsh_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_revsh_t2";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;

    return ins;
}

ARMInstruction ARMDecoder::decode_revsh_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rd = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;

    d = UInt(Rd);
    m = UInt(Rm);
    if (unlikely(((d == 15) || (m == 15)))) {
        return UnpredictableInstruction("Reason: ((d == 15) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = revsh;
    ins.m_to_string = decode_revsh_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_revsh_a1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_ror_immediate_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     S = get_bit(opcode, 20);
    int  imm3 = get_bits(opcode, 14, 12);
    int    Rd = get_bits(opcode, 11,  8);
    int  imm2 = get_bits(opcode,  7,  6);
    int    Rm = get_bits(opcode,  3,  0);
    int shift_n = 0;
    int setflags = 0;
    int m = 0;
    int d = 0;
    int ignored_0 = 0;

    if (unlikely((Concatenate(imm3, imm2, 2) == 0))) {
        return SeeInstruction("RRX");
    }
    d = UInt(Rd);
    m = UInt(Rm);
    setflags = (S == 1);
    std::tie(ignored_0, shift_n) = DecodeImmShift(3, Concatenate(imm3, imm2, 2));
    if (unlikely(((d == 13 || d == 15) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: ((d == 13 || d == 15) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ror_immediate;
    ins.m_to_string = decode_ror_immediate_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ror_immediate_t1";
    ins.encoding = encoding;
    ins.shift_n = shift_n;
    ins.setflags = setflags;
    ins.m = m;
    ins.d = d;

    return ins;
}

ARMInstruction ARMDecoder::decode_ror_immediate_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     S = get_bit(opcode, 20);
    int    Rd = get_bits(opcode, 15, 12);
    int  imm5 = get_bits(opcode, 11,  7);
    int    Rm = get_bits(opcode,  3,  0);
    int shift_n = 0;
    int setflags = 0;
    int m = 0;
    int d = 0;
    int ignored_0 = 0;

    if (unlikely(((Rd == 15) && (S == 1)))) {
        return SeeInstruction("SUBS PC, LR and related instructions");
    }
    if (unlikely((imm5 == 0))) {
        return SeeInstruction("RRX");
    }
    d = UInt(Rd);
    m = UInt(Rm);
    setflags = (S == 1);
    std::tie(ignored_0, shift_n) = DecodeImmShift(3, imm5);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ror_immediate;
    ins.m_to_string = decode_ror_immediate_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ror_immediate_a1";
    ins.encoding = encoding;
    ins.shift_n = shift_n;
    ins.setflags = setflags;
    ins.m = m;
    ins.d = d;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_ror_register_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rm = get_bits(opcode,  5,  3);
    int   Rdn = get_bits(opcode,  2,  0);
    int setflags = 0;
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rdn);
    n = UInt(Rdn);
    m = UInt(Rm);
    setflags = !InITBlock();
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ror_register;
    ins.m_to_string = decode_ror_register_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ror_register_t1";
    ins.encoding = encoding;
    ins.setflags = setflags;
    ins.m = m;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_ror_register_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     S = get_bit(opcode, 20);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 11,  8);
    int    Rm = get_bits(opcode,  3,  0);
    int setflags = 0;
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    setflags = (S == 1);
    if (unlikely((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ror_register;
    ins.m_to_string = decode_ror_register_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ror_register_t2";
    ins.encoding = encoding;
    ins.setflags = setflags;
    ins.m = m;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_ror_register_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     S = get_bit(opcode, 20);
    int    Rd = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode, 11,  8);
    int    Rn = get_bits(opcode,  3,  0);
    int setflags = 0;
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    setflags = (S == 1);
    if (unlikely((((d == 15) || (n == 15)) || (m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 15) || (n == 15)) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ror_register;
    ins.m_to_string = decode_ror_register_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ror_register_a1";
    ins.encoding = encoding;
    ins.setflags = setflags;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_rrx_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     S = get_bit(opcode, 20);
    int    Rd = get_bits(opcode, 11,  8);
    int    Rm = get_bits(opcode,  3,  0);
    int setflags = 0;
    int m = 0;
    int d = 0;

    d = UInt(Rd);
    m = UInt(Rm);
    setflags = (S == 1);
    if (unlikely(((d == 13 || d == 15) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: ((d == 13 || d == 15) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = rrx;
    ins.m_to_string = decode_rrx_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_rrx_t1";
    ins.encoding = encoding;
    ins.setflags = setflags;
    ins.m = m;
    ins.d = d;

    return ins;
}

ARMInstruction ARMDecoder::decode_rrx_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     S = get_bit(opcode, 20);
    int    Rd = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode,  3,  0);
    int setflags = 0;
    int m = 0;
    int d = 0;

    if (unlikely(((Rd == 15) && (S == 1)))) {
        return SeeInstruction("SUBS PC, LR and related instructions");
    }
    d = UInt(Rd);
    m = UInt(Rm);
    setflags = (S == 1);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = rrx;
    ins.m_to_string = decode_rrx_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_rrx_a1";
    ins.encoding = encoding;
    ins.setflags = setflags;
    ins.m = m;
    ins.d = d;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_rsb_immediate_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode,  5,  3);
    int    Rd = get_bits(opcode,  2,  0);
    int setflags = 0;
    int imm32 = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    setflags = !InITBlock();
    imm32 = Zeros(32);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = rsb_immediate;
    ins.m_to_string = decode_rsb_immediate_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_rsb_immediate_t1";
    ins.encoding = encoding;
    ins.setflags = setflags;
    ins.imm32 = imm32;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_rsb_immediate_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     i = get_bit(opcode, 26);
    int     S = get_bit(opcode, 20);
    int    Rn = get_bits(opcode, 19, 16);
    int  imm3 = get_bits(opcode, 14, 12);
    int    Rd = get_bits(opcode, 11,  8);
    int  imm8 = get_bits(opcode,  7,  0);
    int setflags = 0;
    int imm32 = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    setflags = (S == 1);
    imm32 = ThumbExpandImm(Concatenate(Concatenate(i, imm3, 3), imm8, 8));
    if (unlikely(((d == 13 || d == 15) || (n == 13 || n == 15)))) {
        return UnpredictableInstruction("Reason: ((d == 13 || d == 15) || (n == 13 || n == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = rsb_immediate;
    ins.m_to_string = decode_rsb_immediate_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_rsb_immediate_t2";
    ins.encoding = encoding;
    ins.setflags = setflags;
    ins.imm32 = imm32;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_rsb_immediate_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     S = get_bit(opcode, 20);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int imm12 = get_bits(opcode, 11,  0);
    int setflags = 0;
    int imm32 = 0;
    int d = 0;
    int n = 0;

    if (unlikely(((Rd == 15) && (S == 1)))) {
        return SeeInstruction("SUBS PC, LR and related instructions");
    }
    d = UInt(Rd);
    n = UInt(Rn);
    setflags = (S == 1);
    imm32 = ARMExpandImm(imm12);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = rsb_immediate;
    ins.m_to_string = decode_rsb_immediate_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_rsb_immediate_a1";
    ins.encoding = encoding;
    ins.setflags = setflags;
    ins.imm32 = imm32;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_rsb_register_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     S = get_bit(opcode, 20);
    int    Rn = get_bits(opcode, 19, 16);
    int  imm3 = get_bits(opcode, 14, 12);
    int    Rd = get_bits(opcode, 11,  8);
    int  imm2 = get_bits(opcode,  7,  6);
    int  type = get_bits(opcode,  5,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int shift_t = 0;
    int d = 0;
    int m = 0;
    int n = 0;
    int shift_n = 0;
    int setflags = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    setflags = (S == 1);
    std::tie(shift_t, shift_n) = DecodeImmShift(type, Concatenate(imm3, imm2, 2));
    if (unlikely((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = rsb_register;
    ins.m_to_string = decode_rsb_register_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_rsb_register_t1";
    ins.encoding = encoding;
    ins.shift_t = shift_t;
    ins.d = d;
    ins.m = m;
    ins.n = n;
    ins.shift_n = shift_n;
    ins.setflags = setflags;
    ins.type = type;

    return ins;
}

ARMInstruction ARMDecoder::decode_rsb_register_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     S = get_bit(opcode, 20);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int  imm5 = get_bits(opcode, 11,  7);
    int  type = get_bits(opcode,  6,  5);
    int    Rm = get_bits(opcode,  3,  0);
    int shift_t = 0;
    int d = 0;
    int m = 0;
    int n = 0;
    int shift_n = 0;
    int setflags = 0;

    if (unlikely(((Rd == 15) && (S == 1)))) {
        return SeeInstruction("SUBS PC, LR and related instructions");
    }
    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    setflags = (S == 1);
    std::tie(shift_t, shift_n) = DecodeImmShift(type, imm5);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = rsb_register;
    ins.m_to_string = decode_rsb_register_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_rsb_register_a1";
    ins.encoding = encoding;
    ins.shift_t = shift_t;
    ins.d = d;
    ins.m = m;
    ins.n = n;
    ins.shift_n = shift_n;
    ins.setflags = setflags;
    ins.cond = cond;
    ins.type = type;

    return ins;
}

ARMInstruction ARMDecoder::decode_rsb_register_shifted_register_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     S = get_bit(opcode, 20);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int    Rs = get_bits(opcode, 11,  8);
    int  type = get_bits(opcode,  6,  5);
    int    Rm = get_bits(opcode,  3,  0);
    int shift_t = 0;
    int d = 0;
    int m = 0;
    int n = 0;
    int s = 0;
    int setflags = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    s = UInt(Rs);
    setflags = (S == 1);
    shift_t = DecodeRegShift(type);
    if (unlikely(((((d == 15) || (n == 15)) || (m == 15)) || (s == 15)))) {
        return UnpredictableInstruction("Reason: ((((d == 15) || (n == 15)) || (m == 15)) || (s == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = rsb_register_shifted_register;
    ins.m_to_string = decode_rsb_register_shifted_register_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_rsb_register_shifted_register_a1";
    ins.encoding = encoding;
    ins.shift_t = shift_t;
    ins.d = d;
    ins.m = m;
    ins.n = n;
    ins.s = s;
    ins.setflags = setflags;
    ins.cond = cond;
    ins.type = type;

    return ins;
}

ARMInstruction ARMDecoder::decode_rsc_immediate_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     S = get_bit(opcode, 20);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int imm12 = get_bits(opcode, 11,  0);
    int setflags = 0;
    int imm32 = 0;
    int d = 0;
    int n = 0;

    if (unlikely(((Rd == 15) && (S == 1)))) {
        return SeeInstruction("SUBS PC, LR and related instructions");
    }
    d = UInt(Rd);
    n = UInt(Rn);
    setflags = (S == 1);
    imm32 = ARMExpandImm(imm12);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = rsc_immediate;
    ins.m_to_string = decode_rsc_immediate_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_rsc_immediate_a1";
    ins.encoding = encoding;
    ins.setflags = setflags;
    ins.imm32 = imm32;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_rsc_register_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     S = get_bit(opcode, 20);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int  imm5 = get_bits(opcode, 11,  7);
    int  type = get_bits(opcode,  6,  5);
    int    Rm = get_bits(opcode,  3,  0);
    int shift_t = 0;
    int d = 0;
    int m = 0;
    int n = 0;
    int shift_n = 0;
    int setflags = 0;

    if (unlikely(((Rd == 15) && (S == 1)))) {
        return SeeInstruction("SUBS PC, LR and related instructions");
    }
    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    setflags = (S == 1);
    std::tie(shift_t, shift_n) = DecodeImmShift(type, imm5);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = rsc_register;
    ins.m_to_string = decode_rsc_register_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_rsc_register_a1";
    ins.encoding = encoding;
    ins.shift_t = shift_t;
    ins.d = d;
    ins.m = m;
    ins.n = n;
    ins.shift_n = shift_n;
    ins.setflags = setflags;
    ins.cond = cond;
    ins.type = type;

    return ins;
}

ARMInstruction ARMDecoder::decode_rsc_register_shifted_register_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     S = get_bit(opcode, 20);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int    Rs = get_bits(opcode, 11,  8);
    int  type = get_bits(opcode,  6,  5);
    int    Rm = get_bits(opcode,  3,  0);
    int shift_t = 0;
    int d = 0;
    int m = 0;
    int n = 0;
    int s = 0;
    int setflags = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    s = UInt(Rs);
    setflags = (S == 1);
    shift_t = DecodeRegShift(type);
    if (unlikely(((((d == 15) || (n == 15)) || (m == 15)) || (s == 15)))) {
        return UnpredictableInstruction("Reason: ((((d == 15) || (n == 15)) || (m == 15)) || (s == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = rsc_register_shifted_register;
    ins.m_to_string = decode_rsc_register_shifted_register_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_rsc_register_shifted_register_a1";
    ins.encoding = encoding;
    ins.shift_t = shift_t;
    ins.d = d;
    ins.m = m;
    ins.n = n;
    ins.s = s;
    ins.setflags = setflags;
    ins.cond = cond;
    ins.type = type;

    return ins;
}

ARMInstruction ARMDecoder::decode_sadd16_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 11,  8);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = sadd16;
    ins.m_to_string = decode_sadd16_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_sadd16_t1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_sadd16_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 15) || (n == 15)) || (m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 15) || (n == 15)) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = sadd16;
    ins.m_to_string = decode_sadd16_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_sadd16_a1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_sadd8_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 11,  8);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = sadd8;
    ins.m_to_string = decode_sadd8_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_sadd8_t1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_sadd8_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 15) || (n == 15)) || (m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 15) || (n == 15)) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = sadd8;
    ins.m_to_string = decode_sadd8_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_sadd8_a1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_sasx_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 11,  8);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = sasx;
    ins.m_to_string = decode_sasx_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_sasx_t1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_sasx_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 15) || (n == 15)) || (m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 15) || (n == 15)) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = sasx;
    ins.m_to_string = decode_sasx_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_sasx_a1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_sbc_immediate_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     i = get_bit(opcode, 26);
    int     S = get_bit(opcode, 20);
    int    Rn = get_bits(opcode, 19, 16);
    int  imm3 = get_bits(opcode, 14, 12);
    int    Rd = get_bits(opcode, 11,  8);
    int  imm8 = get_bits(opcode,  7,  0);
    int setflags = 0;
    int imm32 = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    setflags = (S == 1);
    imm32 = ThumbExpandImm(Concatenate(Concatenate(i, imm3, 3), imm8, 8));
    if (unlikely(((d == 13 || d == 15) || (n == 13 || n == 15)))) {
        return UnpredictableInstruction("Reason: ((d == 13 || d == 15) || (n == 13 || n == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = sbc_immediate;
    ins.m_to_string = decode_sbc_immediate_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_sbc_immediate_t1";
    ins.encoding = encoding;
    ins.setflags = setflags;
    ins.imm32 = imm32;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_sbc_immediate_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     S = get_bit(opcode, 20);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int imm12 = get_bits(opcode, 11,  0);
    int setflags = 0;
    int imm32 = 0;
    int d = 0;
    int n = 0;

    if (unlikely(((Rd == 15) && (S == 1)))) {
        return SeeInstruction("SUBS PC, LR and related instructions");
    }
    d = UInt(Rd);
    n = UInt(Rn);
    setflags = (S == 1);
    imm32 = ARMExpandImm(imm12);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = sbc_immediate;
    ins.m_to_string = decode_sbc_immediate_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_sbc_immediate_a1";
    ins.encoding = encoding;
    ins.setflags = setflags;
    ins.imm32 = imm32;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_sbc_register_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rm = get_bits(opcode,  5,  3);
    int   Rdn = get_bits(opcode,  2,  0);
    int shift_t = 0;
    int d = 0;
    int m = 0;
    int n = 0;
    int shift_n = 0;
    int setflags = 0;

    d = UInt(Rdn);
    n = UInt(Rdn);
    m = UInt(Rm);
    setflags = !InITBlock();
    shift_t = SRType_LSL, shift_n = 0;
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = sbc_register;
    ins.m_to_string = decode_sbc_register_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_sbc_register_t1";
    ins.encoding = encoding;
    ins.shift_t = shift_t;
    ins.d = d;
    ins.m = m;
    ins.n = n;
    ins.shift_n = shift_n;
    ins.setflags = setflags;

    return ins;
}

ARMInstruction ARMDecoder::decode_sbc_register_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     S = get_bit(opcode, 20);
    int    Rn = get_bits(opcode, 19, 16);
    int  imm3 = get_bits(opcode, 14, 12);
    int    Rd = get_bits(opcode, 11,  8);
    int  imm2 = get_bits(opcode,  7,  6);
    int  type = get_bits(opcode,  5,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int shift_t = 0;
    int d = 0;
    int m = 0;
    int n = 0;
    int shift_n = 0;
    int setflags = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    setflags = (S == 1);
    std::tie(shift_t, shift_n) = DecodeImmShift(type, Concatenate(imm3, imm2, 2));
    if (unlikely((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = sbc_register;
    ins.m_to_string = decode_sbc_register_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_sbc_register_t2";
    ins.encoding = encoding;
    ins.shift_t = shift_t;
    ins.d = d;
    ins.m = m;
    ins.n = n;
    ins.shift_n = shift_n;
    ins.setflags = setflags;
    ins.type = type;

    return ins;
}

ARMInstruction ARMDecoder::decode_sbc_register_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     S = get_bit(opcode, 20);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int  imm5 = get_bits(opcode, 11,  7);
    int  type = get_bits(opcode,  6,  5);
    int    Rm = get_bits(opcode,  3,  0);
    int shift_t = 0;
    int d = 0;
    int m = 0;
    int n = 0;
    int shift_n = 0;
    int setflags = 0;

    if (unlikely(((Rd == 15) && (S == 1)))) {
        return SeeInstruction("SUBS PC, LR and related instructions");
    }
    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    setflags = (S == 1);
    std::tie(shift_t, shift_n) = DecodeImmShift(type, imm5);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = sbc_register;
    ins.m_to_string = decode_sbc_register_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_sbc_register_a1";
    ins.encoding = encoding;
    ins.shift_t = shift_t;
    ins.d = d;
    ins.m = m;
    ins.n = n;
    ins.shift_n = shift_n;
    ins.setflags = setflags;
    ins.cond = cond;
    ins.type = type;

    return ins;
}

ARMInstruction ARMDecoder::decode_sbc_register_shifted_register_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     S = get_bit(opcode, 20);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int    Rs = get_bits(opcode, 11,  8);
    int  type = get_bits(opcode,  6,  5);
    int    Rm = get_bits(opcode,  3,  0);
    int shift_t = 0;
    int d = 0;
    int m = 0;
    int n = 0;
    int s = 0;
    int setflags = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    s = UInt(Rs);
    setflags = (S == 1);
    shift_t = DecodeRegShift(type);
    if (unlikely(((((d == 15) || (n == 15)) || (m == 15)) || (s == 15)))) {
        return UnpredictableInstruction("Reason: ((((d == 15) || (n == 15)) || (m == 15)) || (s == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = sbc_register_shifted_register;
    ins.m_to_string = decode_sbc_register_shifted_register_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_sbc_register_shifted_register_a1";
    ins.encoding = encoding;
    ins.shift_t = shift_t;
    ins.d = d;
    ins.m = m;
    ins.n = n;
    ins.s = s;
    ins.setflags = setflags;
    ins.cond = cond;
    ins.type = type;

    return ins;
}

ARMInstruction ARMDecoder::decode_sbfx_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int  imm3 = get_bits(opcode, 14, 12);
    int    Rd = get_bits(opcode, 11,  8);
    int  imm2 = get_bits(opcode,  7,  6);
    int widthm1 = get_bits(opcode,  4,  0);
    int widthminus1 = 0;
    int d = 0;
    int lsbit = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    lsbit = UInt(Concatenate(imm3, imm2, 2));
    widthminus1 = UInt(widthm1);
    if (unlikely(((d == 13 || d == 15) || (n == 13 || n == 15)))) {
        return UnpredictableInstruction("Reason: ((d == 13 || d == 15) || (n == 13 || n == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = sbfx;
    ins.m_to_string = decode_sbfx_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_sbfx_t1";
    ins.encoding = encoding;
    ins.widthminus1 = widthminus1;
    ins.d = d;
    ins.lsbit = lsbit;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_sbfx_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int widthm1 = get_bits(opcode, 20, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int   lsb = get_bits(opcode, 11,  7);
    int    Rn = get_bits(opcode,  3,  0);
    int widthminus1 = 0;
    int d = 0;
    int lsbit = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    lsbit = UInt(lsb);
    widthminus1 = UInt(widthm1);
    if (unlikely(((d == 15) || (n == 15)))) {
        return UnpredictableInstruction("Reason: ((d == 15) || (n == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = sbfx;
    ins.m_to_string = decode_sbfx_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_sbfx_a1";
    ins.encoding = encoding;
    ins.widthminus1 = widthminus1;
    ins.d = d;
    ins.lsbit = lsbit;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_sdiv_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 11,  8);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = sdiv;
    ins.m_to_string = decode_sdiv_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_sdiv_t1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_sdiv_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rd = get_bits(opcode, 19, 16);
    int    Rm = get_bits(opcode, 11,  8);
    int    Rn = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 15) || (n == 15)) || (m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 15) || (n == 15)) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = sdiv;
    ins.m_to_string = decode_sdiv_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_sdiv_a1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_sel_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 11,  8);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = sel;
    ins.m_to_string = decode_sel_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_sel_t1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_sel_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 15) || (n == 15)) || (m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 15) || (n == 15)) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = sel;
    ins.m_to_string = decode_sel_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_sel_a1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_setend_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     E = get_bit(opcode,  3);
    int set_bigend = 0;

    set_bigend = (E == 1);
    if (unlikely(InITBlock())) {
        return UnpredictableInstruction("Reason: InITBlock()");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = setend;
    ins.m_to_string = decode_setend_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_setend_t1";
    ins.encoding = encoding;
    ins.set_bigend = set_bigend;
    ins.E = E;

    return ins;
}

ARMInstruction ARMDecoder::decode_setend_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     E = get_bit(opcode,  9);
    int set_bigend = 0;

    set_bigend = (E == 1);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = setend;
    ins.m_to_string = decode_setend_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_setend_a1";
    ins.encoding = encoding;
    ins.set_bigend = set_bigend;
    ins.E = E;

    return ins;
}

ARMInstruction ARMDecoder::decode_sev_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {

    NOP();
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = sev;
    ins.m_to_string = decode_sev_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_sev_t1";
    ins.encoding = encoding;

    return ins;
}

ARMInstruction ARMDecoder::decode_sev_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {

    NOP();
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = sev;
    ins.m_to_string = decode_sev_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_sev_t2";
    ins.encoding = encoding;

    return ins;
}

ARMInstruction ARMDecoder::decode_sev_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);

    NOP();
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = sev;
    ins.m_to_string = decode_sev_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_sev_a1";
    ins.encoding = encoding;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_shadd16_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 11,  8);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = shadd16;
    ins.m_to_string = decode_shadd16_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_shadd16_t1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_shadd16_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 15) || (n == 15)) || (m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 15) || (n == 15)) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = shadd16;
    ins.m_to_string = decode_shadd16_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_shadd16_a1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_shadd8_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 11,  8);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = shadd8;
    ins.m_to_string = decode_shadd8_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_shadd8_t1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_shadd8_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 15) || (n == 15)) || (m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 15) || (n == 15)) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = shadd8;
    ins.m_to_string = decode_shadd8_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_shadd8_a1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_shasx_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 11,  8);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = shasx;
    ins.m_to_string = decode_shasx_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_shasx_t1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_shasx_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 15) || (n == 15)) || (m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 15) || (n == 15)) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = shasx;
    ins.m_to_string = decode_shasx_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_shasx_a1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_shsax_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 11,  8);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = shsax;
    ins.m_to_string = decode_shsax_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_shsax_t1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_shsax_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 15) || (n == 15)) || (m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 15) || (n == 15)) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = shsax;
    ins.m_to_string = decode_shsax_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_shsax_a1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_shsub16_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 11,  8);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = shsub16;
    ins.m_to_string = decode_shsub16_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_shsub16_t1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_shsub16_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 15) || (n == 15)) || (m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 15) || (n == 15)) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = shsub16;
    ins.m_to_string = decode_shsub16_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_shsub16_a1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_shsub8_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 11,  8);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = shsub8;
    ins.m_to_string = decode_shsub8_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_shsub8_t1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_shsub8_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 15) || (n == 15)) || (m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 15) || (n == 15)) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = shsub8;
    ins.m_to_string = decode_shsub8_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_shsub8_a1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_smlabb_smlabt_smlatb_smlatt_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Ra = get_bits(opcode, 15, 12);
    int    Rd = get_bits(opcode, 11,  8);
    int     N = get_bit(opcode,  5);
    int     M = get_bit(opcode,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int a = 0;
    int d = 0;
    int n_high = 0;
    int m = 0;
    int n = 0;
    int m_high = 0;

    if (unlikely((Ra == 15))) {
        return SeeInstruction("SMULBB, SMULBT, SMULTB, SMULTT");
    }
    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    a = UInt(Ra);
    n_high = (N == 1);
    m_high = (M == 1);
    if (unlikely(((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)) || (a == 13)))) {
        return UnpredictableInstruction("Reason: ((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)) || (a == 13))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = smlabb_smlabt_smlatb_smlatt;
    ins.m_to_string = decode_smlabb_smlabt_smlatb_smlatt_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_smlabb_smlabt_smlatb_smlatt_t1";
    ins.encoding = encoding;
    ins.a = a;
    ins.d = d;
    ins.n_high = n_high;
    ins.m = m;
    ins.n = n;
    ins.m_high = m_high;

    return ins;
}

ARMInstruction ARMDecoder::decode_smlabb_smlabt_smlatb_smlatt_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rd = get_bits(opcode, 19, 16);
    int    Ra = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode, 11,  8);
    int     M = get_bit(opcode,  6);
    int     N = get_bit(opcode,  5);
    int    Rn = get_bits(opcode,  3,  0);
    int a = 0;
    int d = 0;
    int n_high = 0;
    int m = 0;
    int n = 0;
    int m_high = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    a = UInt(Ra);
    n_high = (N == 1);
    m_high = (M == 1);
    if (unlikely(((((d == 15) || (n == 15)) || (m == 15)) || (a == 15)))) {
        return UnpredictableInstruction("Reason: ((((d == 15) || (n == 15)) || (m == 15)) || (a == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = smlabb_smlabt_smlatb_smlatt;
    ins.m_to_string = decode_smlabb_smlabt_smlatb_smlatt_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_smlabb_smlabt_smlatb_smlatt_a1";
    ins.encoding = encoding;
    ins.a = a;
    ins.d = d;
    ins.n_high = n_high;
    ins.m = m;
    ins.n = n;
    ins.m_high = m_high;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_smlad_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Ra = get_bits(opcode, 15, 12);
    int    Rd = get_bits(opcode, 11,  8);
    int     M = get_bit(opcode,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int a = 0;
    int m_swap = 0;
    int m = 0;
    int d = 0;
    int n = 0;

    if (unlikely((Ra == 15))) {
        return SeeInstruction("SMUAD");
    }
    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    a = UInt(Ra);
    m_swap = (M == 1);
    if (unlikely(((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)) || (a == 13)))) {
        return UnpredictableInstruction("Reason: ((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)) || (a == 13))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = smlad;
    ins.m_to_string = decode_smlad_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_smlad_t1";
    ins.encoding = encoding;
    ins.a = a;
    ins.m_swap = m_swap;
    ins.m = m;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_smlad_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rd = get_bits(opcode, 19, 16);
    int    Ra = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode, 11,  8);
    int     M = get_bit(opcode,  5);
    int    Rn = get_bits(opcode,  3,  0);
    int a = 0;
    int m_swap = 0;
    int m = 0;
    int d = 0;
    int n = 0;

    if (unlikely((Ra == 15))) {
        return SeeInstruction("SMUAD");
    }
    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    a = UInt(Ra);
    m_swap = (M == 1);
    if (unlikely((((d == 15) || (n == 15)) || (m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 15) || (n == 15)) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = smlad;
    ins.m_to_string = decode_smlad_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_smlad_a1";
    ins.encoding = encoding;
    ins.a = a;
    ins.m_swap = m_swap;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_smlal_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int  RdLo = get_bits(opcode, 15, 12);
    int  RdHi = get_bits(opcode, 11,  8);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int dLo = 0;
    int setflags = 0;
    int dHi = 0;
    int n = 0;

    dLo = UInt(RdLo);
    dHi = UInt(RdHi);
    n = UInt(Rn);
    m = UInt(Rm);
    setflags = false;
    if (unlikely(((((dLo == 13 || dLo == 15) || (dHi == 13 || dHi == 15)) || (n == 13 || n == 15)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: ((((dLo == 13 || dLo == 15) || (dHi == 13 || dHi == 15)) || (n == 13 || n == 15)) || (m == 13 || m == 15))");
    }
    if (unlikely((dHi == dLo))) {
        return UnpredictableInstruction("Reason: (dHi == dLo)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = smlal;
    ins.m_to_string = decode_smlal_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_smlal_t1";
    ins.encoding = encoding;
    ins.m = m;
    ins.dLo = dLo;
    ins.setflags = setflags;
    ins.dHi = dHi;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_smlal_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     S = get_bit(opcode, 20);
    int  RdHi = get_bits(opcode, 19, 16);
    int  RdLo = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode, 11,  8);
    int    Rn = get_bits(opcode,  3,  0);
    int m = 0;
    int dLo = 0;
    int setflags = 0;
    int dHi = 0;
    int n = 0;

    dLo = UInt(RdLo);
    dHi = UInt(RdHi);
    n = UInt(Rn);
    m = UInt(Rm);
    setflags = (S == 1);
    if (unlikely(((((dLo == 15) || (dHi == 15)) || (n == 15)) || (m == 15)))) {
        return UnpredictableInstruction("Reason: ((((dLo == 15) || (dHi == 15)) || (n == 15)) || (m == 15))");
    }
    if (unlikely((dHi == dLo))) {
        return UnpredictableInstruction("Reason: (dHi == dLo)");
    }
    if (unlikely(((ArchVersion() < 6) && ((dHi == n) || (dLo == n))))) {
        return UnpredictableInstruction("Reason: ((ArchVersion() < 6) && ((dHi == n) || (dLo == n)))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = smlal;
    ins.m_to_string = decode_smlal_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_smlal_a1";
    ins.encoding = encoding;
    ins.m = m;
    ins.dLo = dLo;
    ins.setflags = setflags;
    ins.dHi = dHi;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_smlalbb_smlalbt_smlaltb_smlaltt_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int  RdLo = get_bits(opcode, 15, 12);
    int  RdHi = get_bits(opcode, 11,  8);
    int     N = get_bit(opcode,  5);
    int     M = get_bit(opcode,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int dHi = 0;
    int n_high = 0;
    int dLo = 0;
    int m = 0;
    int n = 0;
    int m_high = 0;

    dLo = UInt(RdLo);
    dHi = UInt(RdHi);
    n = UInt(Rn);
    m = UInt(Rm);
    n_high = (N == 1);
    m_high = (M == 1);
    if (unlikely(((((dLo == 13 || dLo == 15) || (dHi == 13 || dHi == 15)) || (n == 13 || n == 15)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: ((((dLo == 13 || dLo == 15) || (dHi == 13 || dHi == 15)) || (n == 13 || n == 15)) || (m == 13 || m == 15))");
    }
    if (unlikely((dHi == dLo))) {
        return UnpredictableInstruction("Reason: (dHi == dLo)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = smlalbb_smlalbt_smlaltb_smlaltt;
    ins.m_to_string = decode_smlalbb_smlalbt_smlaltb_smlaltt_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_smlalbb_smlalbt_smlaltb_smlaltt_t1";
    ins.encoding = encoding;
    ins.dHi = dHi;
    ins.n_high = n_high;
    ins.dLo = dLo;
    ins.m = m;
    ins.n = n;
    ins.m_high = m_high;

    return ins;
}

ARMInstruction ARMDecoder::decode_smlalbb_smlalbt_smlaltb_smlaltt_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int  RdHi = get_bits(opcode, 19, 16);
    int  RdLo = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode, 11,  8);
    int     M = get_bit(opcode,  6);
    int     N = get_bit(opcode,  5);
    int    Rn = get_bits(opcode,  3,  0);
    int dHi = 0;
    int n_high = 0;
    int dLo = 0;
    int m = 0;
    int n = 0;
    int m_high = 0;

    dLo = UInt(RdLo);
    dHi = UInt(RdHi);
    n = UInt(Rn);
    m = UInt(Rm);
    n_high = (N == 1);
    m_high = (M == 1);
    if (unlikely(((((dLo == 15) || (dHi == 15)) || (n == 15)) || (m == 15)))) {
        return UnpredictableInstruction("Reason: ((((dLo == 15) || (dHi == 15)) || (n == 15)) || (m == 15))");
    }
    if (unlikely((dHi == dLo))) {
        return UnpredictableInstruction("Reason: (dHi == dLo)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = smlalbb_smlalbt_smlaltb_smlaltt;
    ins.m_to_string = decode_smlalbb_smlalbt_smlaltb_smlaltt_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_smlalbb_smlalbt_smlaltb_smlaltt_a1";
    ins.encoding = encoding;
    ins.dHi = dHi;
    ins.n_high = n_high;
    ins.dLo = dLo;
    ins.m = m;
    ins.n = n;
    ins.m_high = m_high;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_smlald_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int  RdLo = get_bits(opcode, 15, 12);
    int  RdHi = get_bits(opcode, 11,  8);
    int     M = get_bit(opcode,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int m_swap = 0;
    int dLo = 0;
    int dHi = 0;
    int n = 0;

    dLo = UInt(RdLo);
    dHi = UInt(RdHi);
    n = UInt(Rn);
    m = UInt(Rm);
    m_swap = (M == 1);
    if (unlikely(((((dLo == 13 || dLo == 15) || (dHi == 13 || dHi == 15)) || (n == 13 || n == 15)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: ((((dLo == 13 || dLo == 15) || (dHi == 13 || dHi == 15)) || (n == 13 || n == 15)) || (m == 13 || m == 15))");
    }
    if (unlikely((dHi == dLo))) {
        return UnpredictableInstruction("Reason: (dHi == dLo)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = smlald;
    ins.m_to_string = decode_smlald_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_smlald_t1";
    ins.encoding = encoding;
    ins.m = m;
    ins.m_swap = m_swap;
    ins.dLo = dLo;
    ins.dHi = dHi;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_smlald_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int  RdHi = get_bits(opcode, 19, 16);
    int  RdLo = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode, 11,  8);
    int     M = get_bit(opcode,  5);
    int    Rn = get_bits(opcode,  3,  0);
    int m = 0;
    int m_swap = 0;
    int dLo = 0;
    int dHi = 0;
    int n = 0;

    dLo = UInt(RdLo);
    dHi = UInt(RdHi);
    n = UInt(Rn);
    m = UInt(Rm);
    m_swap = (M == 1);
    if (unlikely(((((dLo == 15) || (dHi == 15)) || (n == 15)) || (m == 15)))) {
        return UnpredictableInstruction("Reason: ((((dLo == 15) || (dHi == 15)) || (n == 15)) || (m == 15))");
    }
    if (unlikely((dHi == dLo))) {
        return UnpredictableInstruction("Reason: (dHi == dLo)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = smlald;
    ins.m_to_string = decode_smlald_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_smlald_a1";
    ins.encoding = encoding;
    ins.m = m;
    ins.m_swap = m_swap;
    ins.dLo = dLo;
    ins.dHi = dHi;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_smlawb_smlawt_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Ra = get_bits(opcode, 15, 12);
    int    Rd = get_bits(opcode, 11,  8);
    int     M = get_bit(opcode,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int a = 0;
    int m_high = 0;
    int m = 0;
    int d = 0;
    int n = 0;

    if (unlikely((Ra == 15))) {
        return SeeInstruction("SMULWB, SMULWT");
    }
    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    a = UInt(Ra);
    m_high = (M == 1);
    if (unlikely(((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)) || (a == 13)))) {
        return UnpredictableInstruction("Reason: ((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)) || (a == 13))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = smlawb_smlawt;
    ins.m_to_string = decode_smlawb_smlawt_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_smlawb_smlawt_t1";
    ins.encoding = encoding;
    ins.a = a;
    ins.m_high = m_high;
    ins.m = m;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_smlawb_smlawt_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rd = get_bits(opcode, 19, 16);
    int    Ra = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode, 11,  8);
    int     M = get_bit(opcode,  6);
    int    Rn = get_bits(opcode,  3,  0);
    int a = 0;
    int m_high = 0;
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    a = UInt(Ra);
    m_high = (M == 1);
    if (unlikely(((((d == 15) || (n == 15)) || (m == 15)) || (a == 15)))) {
        return UnpredictableInstruction("Reason: ((((d == 15) || (n == 15)) || (m == 15)) || (a == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = smlawb_smlawt;
    ins.m_to_string = decode_smlawb_smlawt_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_smlawb_smlawt_a1";
    ins.encoding = encoding;
    ins.a = a;
    ins.m_high = m_high;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_smlsd_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Ra = get_bits(opcode, 15, 12);
    int    Rd = get_bits(opcode, 11,  8);
    int     M = get_bit(opcode,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int a = 0;
    int m_swap = 0;
    int m = 0;
    int d = 0;
    int n = 0;

    if (unlikely((Ra == 15))) {
        return SeeInstruction("SMUSD");
    }
    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    a = UInt(Ra);
    m_swap = (M == 1);
    if (unlikely(((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)) || (a == 13)))) {
        return UnpredictableInstruction("Reason: ((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)) || (a == 13))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = smlsd;
    ins.m_to_string = decode_smlsd_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_smlsd_t1";
    ins.encoding = encoding;
    ins.a = a;
    ins.m_swap = m_swap;
    ins.m = m;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_smlsd_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rd = get_bits(opcode, 19, 16);
    int    Ra = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode, 11,  8);
    int     M = get_bit(opcode,  5);
    int    Rn = get_bits(opcode,  3,  0);
    int a = 0;
    int m_swap = 0;
    int m = 0;
    int d = 0;
    int n = 0;

    if (unlikely((Ra == 15))) {
        return SeeInstruction("SMUSD");
    }
    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    a = UInt(Ra);
    m_swap = (M == 1);
    if (unlikely((((d == 15) || (n == 15)) || (m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 15) || (n == 15)) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = smlsd;
    ins.m_to_string = decode_smlsd_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_smlsd_a1";
    ins.encoding = encoding;
    ins.a = a;
    ins.m_swap = m_swap;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_smlsld_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int  RdLo = get_bits(opcode, 15, 12);
    int  RdHi = get_bits(opcode, 11,  8);
    int     M = get_bit(opcode,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int m_swap = 0;
    int dLo = 0;
    int dHi = 0;
    int n = 0;

    dLo = UInt(RdLo);
    dHi = UInt(RdHi);
    n = UInt(Rn);
    m = UInt(Rm);
    m_swap = (M == 1);
    if (unlikely(((((dLo == 13 || dLo == 15) || (dHi == 13 || dHi == 15)) || (n == 13 || n == 15)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: ((((dLo == 13 || dLo == 15) || (dHi == 13 || dHi == 15)) || (n == 13 || n == 15)) || (m == 13 || m == 15))");
    }
    if (unlikely((dHi == dLo))) {
        return UnpredictableInstruction("Reason: (dHi == dLo)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = smlsld;
    ins.m_to_string = decode_smlsld_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_smlsld_t1";
    ins.encoding = encoding;
    ins.m = m;
    ins.m_swap = m_swap;
    ins.dLo = dLo;
    ins.dHi = dHi;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_smlsld_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int  RdHi = get_bits(opcode, 19, 16);
    int  RdLo = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode, 11,  8);
    int     M = get_bit(opcode,  5);
    int    Rn = get_bits(opcode,  3,  0);
    int m = 0;
    int m_swap = 0;
    int dLo = 0;
    int dHi = 0;
    int n = 0;

    dLo = UInt(RdLo);
    dHi = UInt(RdHi);
    n = UInt(Rn);
    m = UInt(Rm);
    m_swap = (M == 1);
    if (unlikely(((((dLo == 15) || (dHi == 15)) || (n == 15)) || (m == 15)))) {
        return UnpredictableInstruction("Reason: ((((dLo == 15) || (dHi == 15)) || (n == 15)) || (m == 15))");
    }
    if (unlikely((dHi == dLo))) {
        return UnpredictableInstruction("Reason: (dHi == dLo)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = smlsld;
    ins.m_to_string = decode_smlsld_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_smlsld_a1";
    ins.encoding = encoding;
    ins.m = m;
    ins.m_swap = m_swap;
    ins.dLo = dLo;
    ins.dHi = dHi;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_smmla_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Ra = get_bits(opcode, 15, 12);
    int    Rd = get_bits(opcode, 11,  8);
    int     R = get_bit(opcode,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int a = 0;
    int m = 0;
    int d = 0;
    int round = 0;
    int n = 0;

    if (unlikely((Ra == 15))) {
        return SeeInstruction("SMMUL");
    }
    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    a = UInt(Ra);
    round = (R == 1);
    if (unlikely(((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)) || (a == 13)))) {
        return UnpredictableInstruction("Reason: ((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)) || (a == 13))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = smmla;
    ins.m_to_string = decode_smmla_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_smmla_t1";
    ins.encoding = encoding;
    ins.a = a;
    ins.m = m;
    ins.d = d;
    ins.round = round;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_smmla_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rd = get_bits(opcode, 19, 16);
    int    Ra = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode, 11,  8);
    int     R = get_bit(opcode,  5);
    int    Rn = get_bits(opcode,  3,  0);
    int a = 0;
    int m = 0;
    int d = 0;
    int round = 0;
    int n = 0;

    if (unlikely((Ra == 15))) {
        return SeeInstruction("SMMUL");
    }
    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    a = UInt(Ra);
    round = (R == 1);
    if (unlikely((((d == 15) || (n == 15)) || (m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 15) || (n == 15)) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = smmla;
    ins.m_to_string = decode_smmla_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_smmla_a1";
    ins.encoding = encoding;
    ins.a = a;
    ins.m = m;
    ins.d = d;
    ins.round = round;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_smmls_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Ra = get_bits(opcode, 15, 12);
    int    Rd = get_bits(opcode, 11,  8);
    int     R = get_bit(opcode,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int a = 0;
    int m = 0;
    int d = 0;
    int round = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    a = UInt(Ra);
    round = (R == 1);
    if (unlikely(((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)) || (a == 13 || a == 15)))) {
        return UnpredictableInstruction("Reason: ((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)) || (a == 13 || a == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = smmls;
    ins.m_to_string = decode_smmls_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_smmls_t1";
    ins.encoding = encoding;
    ins.a = a;
    ins.m = m;
    ins.d = d;
    ins.round = round;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_smmls_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rd = get_bits(opcode, 19, 16);
    int    Ra = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode, 11,  8);
    int     R = get_bit(opcode,  5);
    int    Rn = get_bits(opcode,  3,  0);
    int a = 0;
    int m = 0;
    int d = 0;
    int round = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    a = UInt(Ra);
    round = (R == 1);
    if (unlikely(((((d == 15) || (n == 15)) || (m == 15)) || (a == 15)))) {
        return UnpredictableInstruction("Reason: ((((d == 15) || (n == 15)) || (m == 15)) || (a == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = smmls;
    ins.m_to_string = decode_smmls_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_smmls_a1";
    ins.encoding = encoding;
    ins.a = a;
    ins.m = m;
    ins.d = d;
    ins.round = round;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_smmul_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 11,  8);
    int     R = get_bit(opcode,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int round = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    round = (R == 1);
    if (unlikely((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = smmul;
    ins.m_to_string = decode_smmul_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_smmul_t1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.round = round;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_smmul_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rd = get_bits(opcode, 19, 16);
    int    Rm = get_bits(opcode, 11,  8);
    int     R = get_bit(opcode,  5);
    int    Rn = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int round = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    round = (R == 1);
    if (unlikely((((d == 15) || (n == 15)) || (m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 15) || (n == 15)) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = smmul;
    ins.m_to_string = decode_smmul_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_smmul_a1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.round = round;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_smuad_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 11,  8);
    int     M = get_bit(opcode,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int m_swap = 0;
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    m_swap = (M == 1);
    if (unlikely((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = smuad;
    ins.m_to_string = decode_smuad_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_smuad_t1";
    ins.encoding = encoding;
    ins.m_swap = m_swap;
    ins.m = m;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_smuad_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rd = get_bits(opcode, 19, 16);
    int    Rm = get_bits(opcode, 11,  8);
    int     M = get_bit(opcode,  5);
    int    Rn = get_bits(opcode,  3,  0);
    int m_swap = 0;
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    m_swap = (M == 1);
    if (unlikely((((d == 15) || (n == 15)) || (m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 15) || (n == 15)) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = smuad;
    ins.m_to_string = decode_smuad_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_smuad_a1";
    ins.encoding = encoding;
    ins.m_swap = m_swap;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_smulbb_smulbt_smultb_smultt_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 11,  8);
    int     N = get_bit(opcode,  5);
    int     M = get_bit(opcode,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int m_high = 0;
    int n_high = 0;
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    n_high = (N == 1);
    m_high = (M == 1);
    if (unlikely((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = smulbb_smulbt_smultb_smultt;
    ins.m_to_string = decode_smulbb_smulbt_smultb_smultt_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_smulbb_smulbt_smultb_smultt_t1";
    ins.encoding = encoding;
    ins.m_high = m_high;
    ins.n_high = n_high;
    ins.m = m;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_smulbb_smulbt_smultb_smultt_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rd = get_bits(opcode, 19, 16);
    int    Rm = get_bits(opcode, 11,  8);
    int     M = get_bit(opcode,  6);
    int     N = get_bit(opcode,  5);
    int    Rn = get_bits(opcode,  3,  0);
    int m_high = 0;
    int n_high = 0;
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    n_high = (N == 1);
    m_high = (M == 1);
    if (unlikely((((d == 15) || (n == 15)) || (m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 15) || (n == 15)) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = smulbb_smulbt_smultb_smultt;
    ins.m_to_string = decode_smulbb_smulbt_smultb_smultt_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_smulbb_smulbt_smultb_smultt_a1";
    ins.encoding = encoding;
    ins.m_high = m_high;
    ins.n_high = n_high;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_smull_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int  RdLo = get_bits(opcode, 15, 12);
    int  RdHi = get_bits(opcode, 11,  8);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int dLo = 0;
    int setflags = 0;
    int dHi = 0;
    int n = 0;

    dLo = UInt(RdLo);
    dHi = UInt(RdHi);
    n = UInt(Rn);
    m = UInt(Rm);
    setflags = false;
    if (unlikely(((((dLo == 13 || dLo == 15) || (dHi == 13 || dHi == 15)) || (n == 13 || n == 15)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: ((((dLo == 13 || dLo == 15) || (dHi == 13 || dHi == 15)) || (n == 13 || n == 15)) || (m == 13 || m == 15))");
    }
    if (unlikely((dHi == dLo))) {
        return UnpredictableInstruction("Reason: (dHi == dLo)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = smull;
    ins.m_to_string = decode_smull_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_smull_t1";
    ins.encoding = encoding;
    ins.m = m;
    ins.dLo = dLo;
    ins.setflags = setflags;
    ins.dHi = dHi;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_smull_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     S = get_bit(opcode, 20);
    int  RdHi = get_bits(opcode, 19, 16);
    int  RdLo = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode, 11,  8);
    int    Rn = get_bits(opcode,  3,  0);
    int m = 0;
    int dLo = 0;
    int setflags = 0;
    int dHi = 0;
    int n = 0;

    dLo = UInt(RdLo);
    dHi = UInt(RdHi);
    n = UInt(Rn);
    m = UInt(Rm);
    setflags = (S == 1);
    if (unlikely(((((dLo == 15) || (dHi == 15)) || (n == 15)) || (m == 15)))) {
        return UnpredictableInstruction("Reason: ((((dLo == 15) || (dHi == 15)) || (n == 15)) || (m == 15))");
    }
    if (unlikely((dHi == dLo))) {
        return UnpredictableInstruction("Reason: (dHi == dLo)");
    }
    if (unlikely(((ArchVersion() < 6) && ((dHi == n) || (dLo == n))))) {
        return UnpredictableInstruction("Reason: ((ArchVersion() < 6) && ((dHi == n) || (dLo == n)))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = smull;
    ins.m_to_string = decode_smull_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_smull_a1";
    ins.encoding = encoding;
    ins.m = m;
    ins.dLo = dLo;
    ins.setflags = setflags;
    ins.dHi = dHi;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_smulwb_smulwt_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 11,  8);
    int     M = get_bit(opcode,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int m_high = 0;
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    m_high = (M == 1);
    if (unlikely((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = smulwb_smulwt;
    ins.m_to_string = decode_smulwb_smulwt_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_smulwb_smulwt_t1";
    ins.encoding = encoding;
    ins.m_high = m_high;
    ins.m = m;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_smulwb_smulwt_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rd = get_bits(opcode, 19, 16);
    int    Rm = get_bits(opcode, 11,  8);
    int     M = get_bit(opcode,  6);
    int    Rn = get_bits(opcode,  3,  0);
    int m_high = 0;
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    m_high = (M == 1);
    if (unlikely((((d == 15) || (n == 15)) || (m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 15) || (n == 15)) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = smulwb_smulwt;
    ins.m_to_string = decode_smulwb_smulwt_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_smulwb_smulwt_a1";
    ins.encoding = encoding;
    ins.m_high = m_high;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_smusd_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 11,  8);
    int     M = get_bit(opcode,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int m_swap = 0;
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    m_swap = (M == 1);
    if (unlikely((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = smusd;
    ins.m_to_string = decode_smusd_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_smusd_t1";
    ins.encoding = encoding;
    ins.m_swap = m_swap;
    ins.m = m;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_smusd_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rd = get_bits(opcode, 19, 16);
    int    Rm = get_bits(opcode, 11,  8);
    int     M = get_bit(opcode,  5);
    int    Rn = get_bits(opcode,  3,  0);
    int m_swap = 0;
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    m_swap = (M == 1);
    if (unlikely((((d == 15) || (n == 15)) || (m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 15) || (n == 15)) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = smusd;
    ins.m_to_string = decode_smusd_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_smusd_a1";
    ins.encoding = encoding;
    ins.m_swap = m_swap;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_ssat_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    sh = get_bit(opcode, 21);
    int    Rn = get_bits(opcode, 19, 16);
    int  imm3 = get_bits(opcode, 14, 12);
    int    Rd = get_bits(opcode, 11,  8);
    int  imm2 = get_bits(opcode,  7,  6);
    int sat_imm = get_bits(opcode,  4,  0);
    int shift_n = 0;
    int shift_t = 0;
    int d = 0;
    int saturate_to = 0;
    int n = 0;

    if (unlikely(((sh == 1) && (Concatenate(imm3, imm2, 2) == 0)))) {
        return SeeInstruction("SSAT16");
    }
    d = UInt(Rd);
    n = UInt(Rn);
    saturate_to = (UInt(sat_imm) + 1);
    std::tie(shift_t, shift_n) = DecodeImmShift(Concatenate(sh, 0, 1), Concatenate(imm3, imm2, 2));
    if (unlikely(((d == 13 || d == 15) || (n == 13 || n == 15)))) {
        return UnpredictableInstruction("Reason: ((d == 13 || d == 15) || (n == 13 || n == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ssat;
    ins.m_to_string = decode_ssat_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ssat_t1";
    ins.encoding = encoding;
    ins.shift_n = shift_n;
    ins.shift_t = shift_t;
    ins.d = d;
    ins.saturate_to = saturate_to;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_ssat_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int sat_imm = get_bits(opcode, 20, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int  imm5 = get_bits(opcode, 11,  7);
    int    sh = get_bit(opcode,  6);
    int    Rn = get_bits(opcode,  3,  0);
    int shift_n = 0;
    int shift_t = 0;
    int d = 0;
    int saturate_to = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    saturate_to = (UInt(sat_imm) + 1);
    std::tie(shift_t, shift_n) = DecodeImmShift(Concatenate(sh, 0, 1), imm5);
    if (unlikely(((d == 15) || (n == 15)))) {
        return UnpredictableInstruction("Reason: ((d == 15) || (n == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ssat;
    ins.m_to_string = decode_ssat_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ssat_a1";
    ins.encoding = encoding;
    ins.shift_n = shift_n;
    ins.shift_t = shift_t;
    ins.d = d;
    ins.saturate_to = saturate_to;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_ssat16_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 11,  8);
    int sat_imm = get_bits(opcode,  3,  0);
    int d = 0;
    int saturate_to = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    saturate_to = (UInt(sat_imm) + 1);
    if (unlikely(((d == 13 || d == 15) || (n == 13 || n == 15)))) {
        return UnpredictableInstruction("Reason: ((d == 13 || d == 15) || (n == 13 || n == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ssat16;
    ins.m_to_string = decode_ssat16_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ssat16_t1";
    ins.encoding = encoding;
    ins.d = d;
    ins.saturate_to = saturate_to;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_ssat16_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int sat_imm = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int    Rn = get_bits(opcode,  3,  0);
    int d = 0;
    int saturate_to = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    saturate_to = (UInt(sat_imm) + 1);
    if (unlikely(((d == 15) || (n == 15)))) {
        return UnpredictableInstruction("Reason: ((d == 15) || (n == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ssat16;
    ins.m_to_string = decode_ssat16_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ssat16_a1";
    ins.encoding = encoding;
    ins.d = d;
    ins.saturate_to = saturate_to;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_ssax_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 11,  8);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ssax;
    ins.m_to_string = decode_ssax_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ssax_t1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_ssax_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 15) || (n == 15)) || (m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 15) || (n == 15)) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ssax;
    ins.m_to_string = decode_ssax_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ssax_a1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_ssub16_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 11,  8);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ssub16;
    ins.m_to_string = decode_ssub16_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ssub16_t1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_ssub16_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 15) || (n == 15)) || (m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 15) || (n == 15)) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ssub16;
    ins.m_to_string = decode_ssub16_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ssub16_a1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_ssub8_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 11,  8);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ssub8;
    ins.m_to_string = decode_ssub8_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ssub8_t1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_ssub8_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 15) || (n == 15)) || (m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 15) || (n == 15)) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ssub8;
    ins.m_to_string = decode_ssub8_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ssub8_a1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_stc_stc2_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     P = get_bit(opcode, 24);
    int     U = get_bit(opcode, 23);
    int     D = get_bit(opcode, 22);
    int     W = get_bit(opcode, 21);
    int    Rn = get_bits(opcode, 19, 16);
    int   CRd = get_bits(opcode, 15, 12);
    int coproc = get_bits(opcode, 11,  8);
    int  imm8 = get_bits(opcode,  7,  0);
    int index = 0;
    int imm32 = 0;
    int n = 0;
    int add = 0;
    int wback = 0;
    int cp = 0;

    if (unlikely(((((P == 0) && (U == 0)) && (D == 0)) && (W == 0)))) {
        return UndefinedInstruction("Reason: ((((P == 0) && (U == 0)) && (D == 0)) && (W == 0))");
    }
    if (unlikely(((((P == 0) && (U == 0)) && (D == 1)) && (W == 0)))) {
        return SeeInstruction("MCRR, MCRR2");
    }
    if (unlikely((coproc >= 10 && coproc <= 11))) {
        return SeeInstruction("AdvancedSIMD and Floating-point");
    }
    n = UInt(Rn);
    cp = UInt(coproc);
    imm32 = ZeroExtend(Concatenate(imm8, 0, 2), 32);
    index = (P == 1);
    add = (U == 1);
    wback = (W == 1);
    if (unlikely(((n == 15) && (wback || (CurrentInstrSet() != InstrSet_ARM))))) {
        return UnpredictableInstruction("Reason: ((n == 15) && (wback || (CurrentInstrSet() != InstrSet_ARM)))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = stc_stc2;
    ins.m_to_string = decode_stc_stc2_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_stc_stc2_t1";
    ins.encoding = encoding;
    ins.index = index;
    ins.imm32 = imm32;
    ins.n = n;
    ins.add = add;
    ins.wback = wback;
    ins.cp = cp;
    ins.P = P;
    ins.U = U;
    ins.D = D;
    ins.W = W;
    ins.CRd = CRd;
    ins.coproc = coproc;

    return ins;
}

ARMInstruction ARMDecoder::decode_stc_stc2_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     P = get_bit(opcode, 24);
    int     U = get_bit(opcode, 23);
    int     D = get_bit(opcode, 22);
    int     W = get_bit(opcode, 21);
    int    Rn = get_bits(opcode, 19, 16);
    int   CRd = get_bits(opcode, 15, 12);
    int coproc = get_bits(opcode, 11,  8);
    int  imm8 = get_bits(opcode,  7,  0);
    int index = 0;
    int imm32 = 0;
    int n = 0;
    int add = 0;
    int wback = 0;
    int cp = 0;

    if (unlikely(((((P == 0) && (U == 0)) && (D == 0)) && (W == 0)))) {
        return UndefinedInstruction("Reason: ((((P == 0) && (U == 0)) && (D == 0)) && (W == 0))");
    }
    if (unlikely(((((P == 0) && (U == 0)) && (D == 1)) && (W == 0)))) {
        return SeeInstruction("MCRR, MCRR2");
    }
    if (unlikely((coproc >= 10 && coproc <= 11))) {
        return UndefinedInstruction("Reason: (coproc >= 10 && coproc <= 11)");
    }
    n = UInt(Rn);
    cp = UInt(coproc);
    imm32 = ZeroExtend(Concatenate(imm8, 0, 2), 32);
    index = (P == 1);
    add = (U == 1);
    wback = (W == 1);
    if (unlikely(((n == 15) && (wback || (CurrentInstrSet() != InstrSet_ARM))))) {
        return UnpredictableInstruction("Reason: ((n == 15) && (wback || (CurrentInstrSet() != InstrSet_ARM)))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = stc_stc2;
    ins.m_to_string = decode_stc_stc2_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_stc_stc2_t2";
    ins.encoding = encoding;
    ins.index = index;
    ins.imm32 = imm32;
    ins.n = n;
    ins.add = add;
    ins.wback = wback;
    ins.cp = cp;
    ins.P = P;
    ins.U = U;
    ins.D = D;
    ins.W = W;
    ins.CRd = CRd;
    ins.coproc = coproc;

    return ins;
}

ARMInstruction ARMDecoder::decode_stc_stc2_a2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     P = get_bit(opcode, 24);
    int     U = get_bit(opcode, 23);
    int     D = get_bit(opcode, 22);
    int     W = get_bit(opcode, 21);
    int    Rn = get_bits(opcode, 19, 16);
    int   CRd = get_bits(opcode, 15, 12);
    int coproc = get_bits(opcode, 11,  8);
    int  imm8 = get_bits(opcode,  7,  0);
    int index = 0;
    int imm32 = 0;
    int n = 0;
    int add = 0;
    int wback = 0;
    int cp = 0;

    if (unlikely(((((P == 0) && (U == 0)) && (D == 0)) && (W == 0)))) {
        return UndefinedInstruction("Reason: ((((P == 0) && (U == 0)) && (D == 0)) && (W == 0))");
    }
    if (unlikely(((((P == 0) && (U == 0)) && (D == 1)) && (W == 0)))) {
        return SeeInstruction("MCRR, MCRR2");
    }
    if (unlikely((coproc >= 10 && coproc <= 11))) {
        return UndefinedInstruction("Reason: (coproc >= 10 && coproc <= 11)");
    }
    n = UInt(Rn);
    cp = UInt(coproc);
    imm32 = ZeroExtend(Concatenate(imm8, 0, 2), 32);
    index = (P == 1);
    add = (U == 1);
    wback = (W == 1);
    if (unlikely(((n == 15) && (wback || (CurrentInstrSet() != InstrSet_ARM))))) {
        return UnpredictableInstruction("Reason: ((n == 15) && (wback || (CurrentInstrSet() != InstrSet_ARM)))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = stc_stc2;
    ins.m_to_string = decode_stc_stc2_a2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_stc_stc2_a2";
    ins.encoding = encoding;
    ins.index = index;
    ins.imm32 = imm32;
    ins.n = n;
    ins.add = add;
    ins.wback = wback;
    ins.cp = cp;
    ins.P = P;
    ins.U = U;
    ins.D = D;
    ins.W = W;
    ins.CRd = CRd;
    ins.coproc = coproc;

    return ins;
}

ARMInstruction ARMDecoder::decode_stc_stc2_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     P = get_bit(opcode, 24);
    int     U = get_bit(opcode, 23);
    int     D = get_bit(opcode, 22);
    int     W = get_bit(opcode, 21);
    int    Rn = get_bits(opcode, 19, 16);
    int   CRd = get_bits(opcode, 15, 12);
    int coproc = get_bits(opcode, 11,  8);
    int  imm8 = get_bits(opcode,  7,  0);
    int index = 0;
    int imm32 = 0;
    int n = 0;
    int add = 0;
    int wback = 0;
    int cp = 0;

    if (unlikely(((((P == 0) && (U == 0)) && (D == 0)) && (W == 0)))) {
        return UndefinedInstruction("Reason: ((((P == 0) && (U == 0)) && (D == 0)) && (W == 0))");
    }
    if (unlikely(((((P == 0) && (U == 0)) && (D == 1)) && (W == 0)))) {
        return SeeInstruction("MCRR, MCRR2");
    }
    if (unlikely((coproc >= 10 && coproc <= 11))) {
        return SeeInstruction("AdvancedSIMD and Floating-point");
    }
    n = UInt(Rn);
    cp = UInt(coproc);
    imm32 = ZeroExtend(Concatenate(imm8, 0, 2), 32);
    index = (P == 1);
    add = (U == 1);
    wback = (W == 1);
    if (unlikely(((n == 15) && (wback || (CurrentInstrSet() != InstrSet_ARM))))) {
        return UnpredictableInstruction("Reason: ((n == 15) && (wback || (CurrentInstrSet() != InstrSet_ARM)))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = stc_stc2;
    ins.m_to_string = decode_stc_stc2_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_stc_stc2_a1";
    ins.encoding = encoding;
    ins.index = index;
    ins.imm32 = imm32;
    ins.n = n;
    ins.add = add;
    ins.wback = wback;
    ins.cp = cp;
    ins.cond = cond;
    ins.P = P;
    ins.U = U;
    ins.D = D;
    ins.W = W;
    ins.CRd = CRd;
    ins.coproc = coproc;

    return ins;
}

ARMInstruction ARMDecoder::decode_stm_stmia_stmea_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 10,  8);
    int register_list = get_bits(opcode,  7,  0);
    int wback = 0;
    int registers = 0;
    int n = 0;

    if (unlikely((CurrentInstrSet() == InstrSet_ThumbEE))) {
        return SeeInstruction("ThumbEE instructions");
    }
    n = UInt(Rn);
    registers = Concatenate(0, register_list, 8);
    wback = true;
    if (unlikely((BitCount(registers) < 1))) {
        return UnpredictableInstruction("Reason: (BitCount(registers) < 1)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = stm_stmia_stmea;
    ins.m_to_string = decode_stm_stmia_stmea_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_stm_stmia_stmea_t1";
    ins.encoding = encoding;
    ins.wback = wback;
    ins.registers = registers;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_stm_stmia_stmea_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     W = get_bit(opcode, 21);
    int    Rn = get_bits(opcode, 19, 16);
    int     M = get_bit(opcode, 14);
    int register_list = get_bits(opcode, 12,  0);
    int wback = 0;
    int registers = 0;
    int n = 0;

    n = UInt(Rn);
    registers = Concatenate(Concatenate(Concatenate(0, M, 1), 0, 1), register_list, 13);
    wback = (W == 1);
    if (unlikely(((n == 15) || (BitCount(registers) < 2)))) {
        return UnpredictableInstruction("Reason: ((n == 15) || (BitCount(registers) < 2))");
    }
    if (unlikely((wback && (get_bit(registers, n) == 1)))) {
        return UnpredictableInstruction("Reason: (wback && (get_bit(registers, n) == 1))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = stm_stmia_stmea;
    ins.m_to_string = decode_stm_stmia_stmea_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_stm_stmia_stmea_t2";
    ins.encoding = encoding;
    ins.wback = wback;
    ins.registers = registers;
    ins.n = n;
    ins.W = W;

    return ins;
}

ARMInstruction ARMDecoder::decode_stm_stmia_stmea_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     W = get_bit(opcode, 21);
    int    Rn = get_bits(opcode, 19, 16);
    int register_list = get_bits(opcode, 15,  0);
    int wback = 0;
    int registers = 0;
    int n = 0;

    n = UInt(Rn);
    registers = register_list;
    wback = (W == 1);
    if (unlikely(((n == 15) || (BitCount(registers) < 1)))) {
        return UnpredictableInstruction("Reason: ((n == 15) || (BitCount(registers) < 1))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = stm_stmia_stmea;
    ins.m_to_string = decode_stm_stmia_stmea_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_stm_stmia_stmea_a1";
    ins.encoding = encoding;
    ins.wback = wback;
    ins.registers = registers;
    ins.n = n;
    ins.cond = cond;
    ins.W = W;

    return ins;
}

ARMInstruction ARMDecoder::decode_stmda_stmed_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     W = get_bit(opcode, 21);
    int    Rn = get_bits(opcode, 19, 16);
    int register_list = get_bits(opcode, 15,  0);
    int wback = 0;
    int registers = 0;
    int n = 0;

    n = UInt(Rn);
    registers = register_list;
    wback = (W == 1);
    if (unlikely(((n == 15) || (BitCount(registers) < 1)))) {
        return UnpredictableInstruction("Reason: ((n == 15) || (BitCount(registers) < 1))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = stmda_stmed;
    ins.m_to_string = decode_stmda_stmed_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_stmda_stmed_a1";
    ins.encoding = encoding;
    ins.wback = wback;
    ins.registers = registers;
    ins.n = n;
    ins.cond = cond;
    ins.W = W;

    return ins;
}

ARMInstruction ARMDecoder::decode_stmdb_stmfd_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     W = get_bit(opcode, 21);
    int    Rn = get_bits(opcode, 19, 16);
    int     M = get_bit(opcode, 14);
    int register_list = get_bits(opcode, 12,  0);
    int wback = 0;
    int registers = 0;
    int n = 0;

    if (unlikely(((W == 1) && (Rn == 13)))) {
        return SeeInstruction("PUSH");
    }
    n = UInt(Rn);
    registers = Concatenate(Concatenate(Concatenate(0, M, 1), 0, 1), register_list, 13);
    wback = (W == 1);
    if (unlikely(((n == 15) || (BitCount(registers) < 2)))) {
        return UnpredictableInstruction("Reason: ((n == 15) || (BitCount(registers) < 2))");
    }
    if (unlikely((wback && (get_bit(registers, n) == 1)))) {
        return UnpredictableInstruction("Reason: (wback && (get_bit(registers, n) == 1))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = stmdb_stmfd;
    ins.m_to_string = decode_stmdb_stmfd_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_stmdb_stmfd_t1";
    ins.encoding = encoding;
    ins.wback = wback;
    ins.registers = registers;
    ins.n = n;
    ins.W = W;

    return ins;
}

ARMInstruction ARMDecoder::decode_stmdb_stmfd_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     W = get_bit(opcode, 21);
    int    Rn = get_bits(opcode, 19, 16);
    int register_list = get_bits(opcode, 15,  0);
    int wback = 0;
    int registers = 0;
    int n = 0;

    if (unlikely((((W == 1) && (Rn == 13)) && (BitCount(register_list) >= 2)))) {
        return SeeInstruction("PUSH");
    }
    n = UInt(Rn);
    registers = register_list;
    wback = (W == 1);
    if (unlikely(((n == 15) || (BitCount(registers) < 1)))) {
        return UnpredictableInstruction("Reason: ((n == 15) || (BitCount(registers) < 1))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = stmdb_stmfd;
    ins.m_to_string = decode_stmdb_stmfd_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_stmdb_stmfd_a1";
    ins.encoding = encoding;
    ins.wback = wback;
    ins.registers = registers;
    ins.n = n;
    ins.cond = cond;
    ins.W = W;

    return ins;
}

ARMInstruction ARMDecoder::decode_stmib_stmfa_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     W = get_bit(opcode, 21);
    int    Rn = get_bits(opcode, 19, 16);
    int register_list = get_bits(opcode, 15,  0);
    int wback = 0;
    int registers = 0;
    int n = 0;

    n = UInt(Rn);
    registers = register_list;
    wback = (W == 1);
    if (unlikely(((n == 15) || (BitCount(registers) < 1)))) {
        return UnpredictableInstruction("Reason: ((n == 15) || (BitCount(registers) < 1))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = stmib_stmfa;
    ins.m_to_string = decode_stmib_stmfa_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_stmib_stmfa_a1";
    ins.encoding = encoding;
    ins.wback = wback;
    ins.registers = registers;
    ins.n = n;
    ins.cond = cond;
    ins.W = W;

    return ins;
}

ARMInstruction ARMDecoder::decode_str_immediate_thumb_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  imm5 = get_bits(opcode, 10,  6);
    int    Rn = get_bits(opcode,  5,  3);
    int    Rt = get_bits(opcode,  2,  0);
    int index = 0;
    int imm32 = 0;
    int n = 0;
    int add = 0;
    int wback = 0;
    int t = 0;

    t = UInt(Rt);
    n = UInt(Rn);
    imm32 = ZeroExtend(Concatenate(imm5, 0, 2), 32);
    index = true;
    add = true;
    wback = false;
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = str_immediate_thumb;
    ins.m_to_string = decode_str_immediate_thumb_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_str_immediate_thumb_t1";
    ins.encoding = encoding;
    ins.index = index;
    ins.imm32 = imm32;
    ins.n = n;
    ins.add = add;
    ins.wback = wback;
    ins.t = t;

    return ins;
}

ARMInstruction ARMDecoder::decode_str_immediate_thumb_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rt = get_bits(opcode, 10,  8);
    int  imm8 = get_bits(opcode,  7,  0);
    int index = 0;
    int imm32 = 0;
    int n = 0;
    int add = 0;
    int wback = 0;
    int t = 0;

    t = UInt(Rt);
    n = 13;
    imm32 = ZeroExtend(Concatenate(imm8, 0, 2), 32);
    index = true;
    add = true;
    wback = false;
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = str_immediate_thumb;
    ins.m_to_string = decode_str_immediate_thumb_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_str_immediate_thumb_t2";
    ins.encoding = encoding;
    ins.index = index;
    ins.imm32 = imm32;
    ins.n = n;
    ins.add = add;
    ins.wback = wback;
    ins.t = t;

    return ins;
}

ARMInstruction ARMDecoder::decode_str_immediate_thumb_t3(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int imm12 = get_bits(opcode, 11,  0);
    int index = 0;
    int imm32 = 0;
    int n = 0;
    int add = 0;
    int wback = 0;
    int t = 0;

    if (unlikely((Rn == 15))) {
        return UndefinedInstruction("Reason: (Rn == 15)");
    }
    t = UInt(Rt);
    n = UInt(Rn);
    imm32 = ZeroExtend(imm12, 32);
    index = true;
    add = true;
    wback = false;
    if (unlikely((t == 15))) {
        return UnpredictableInstruction("Reason: (t == 15)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = str_immediate_thumb;
    ins.m_to_string = decode_str_immediate_thumb_t3_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_str_immediate_thumb_t3";
    ins.encoding = encoding;
    ins.index = index;
    ins.imm32 = imm32;
    ins.n = n;
    ins.add = add;
    ins.wback = wback;
    ins.t = t;

    return ins;
}

ARMInstruction ARMDecoder::decode_str_immediate_thumb_t4(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int     P = get_bit(opcode, 10);
    int     U = get_bit(opcode,  9);
    int     W = get_bit(opcode,  8);
    int  imm8 = get_bits(opcode,  7,  0);
    int index = 0;
    int imm32 = 0;
    int n = 0;
    int add = 0;
    int wback = 0;
    int t = 0;

    if (unlikely((((P == 1) && (U == 1)) && (W == 0)))) {
        return SeeInstruction("STRT");
    }
    if (unlikely((((((Rn == 13) && (P == 1)) && (U == 0)) && (W == 1)) && (imm8 == 4)))) {
        return SeeInstruction("PUSH");
    }
    if (unlikely(((Rn == 15) || ((P == 0) && (W == 0))))) {
        return UndefinedInstruction("Reason: ((Rn == 15) || ((P == 0) && (W == 0)))");
    }
    t = UInt(Rt);
    n = UInt(Rn);
    imm32 = ZeroExtend(imm8, 32);
    index = (P == 1);
    add = (U == 1);
    wback = (W == 1);
    if (unlikely(((t == 15) || (wback && (n == t))))) {
        return UnpredictableInstruction("Reason: ((t == 15) || (wback && (n == t)))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = str_immediate_thumb;
    ins.m_to_string = decode_str_immediate_thumb_t4_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_str_immediate_thumb_t4";
    ins.encoding = encoding;
    ins.index = index;
    ins.imm32 = imm32;
    ins.n = n;
    ins.add = add;
    ins.wback = wback;
    ins.t = t;
    ins.P = P;
    ins.U = U;
    ins.W = W;

    return ins;
}

ARMInstruction ARMDecoder::decode_str_immediate_arm_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     P = get_bit(opcode, 24);
    int     U = get_bit(opcode, 23);
    int     W = get_bit(opcode, 21);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int imm12 = get_bits(opcode, 11,  0);
    int index = 0;
    int imm32 = 0;
    int n = 0;
    int add = 0;
    int wback = 0;
    int t = 0;

    if (unlikely(((P == 0) && (W == 1)))) {
        return SeeInstruction("STRT");
    }
    if (unlikely((((((Rn == 13) && (P == 1)) && (U == 0)) && (W == 1)) && (imm12 == 4)))) {
        return SeeInstruction("PUSH");
    }
    t = UInt(Rt);
    n = UInt(Rn);
    imm32 = ZeroExtend(imm12, 32);
    index = (P == 1);
    add = (U == 1);
    wback = ((P == 0) || (W == 1));
    if (unlikely((wback && ((n == 15) || (n == t))))) {
        return UnpredictableInstruction("Reason: (wback && ((n == 15) || (n == t)))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = str_immediate_arm;
    ins.m_to_string = decode_str_immediate_arm_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_str_immediate_arm_a1";
    ins.encoding = encoding;
    ins.index = index;
    ins.imm32 = imm32;
    ins.n = n;
    ins.add = add;
    ins.wback = wback;
    ins.t = t;
    ins.cond = cond;
    ins.P = P;
    ins.U = U;
    ins.W = W;

    return ins;
}

ARMInstruction ARMDecoder::decode_str_register_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rm = get_bits(opcode,  8,  6);
    int    Rn = get_bits(opcode,  5,  3);
    int    Rt = get_bits(opcode,  2,  0);
    int index = 0;
    int shift_t = 0;
    int m = 0;
    int n = 0;
    int add = 0;
    int wback = 0;
    int t = 0;
    int shift_n = 0;

    if (unlikely((CurrentInstrSet() == InstrSet_ThumbEE))) {
        return SeeInstruction("Modified operation in ThumbEE");
    }
    t = UInt(Rt);
    n = UInt(Rn);
    m = UInt(Rm);
    index = true;
    add = true;
    wback = false;
    shift_t = SRType_LSL, shift_n = 0;
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = str_register;
    ins.m_to_string = decode_str_register_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_str_register_t1";
    ins.encoding = encoding;
    ins.index = index;
    ins.shift_t = shift_t;
    ins.m = m;
    ins.n = n;
    ins.add = add;
    ins.wback = wback;
    ins.t = t;
    ins.shift_n = shift_n;

    return ins;
}

ARMInstruction ARMDecoder::decode_str_register_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int  imm2 = get_bits(opcode,  5,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int index = 0;
    int shift_t = 0;
    int m = 0;
    int n = 0;
    int add = 0;
    int wback = 0;
    int t = 0;
    int shift_n = 0;

    if (unlikely((Rn == 15))) {
        return UndefinedInstruction("Reason: (Rn == 15)");
    }
    t = UInt(Rt);
    n = UInt(Rn);
    m = UInt(Rm);
    index = true;
    add = true;
    wback = false;
    shift_t = SRType_LSL, shift_n = UInt(imm2);
    if (unlikely(((t == 15) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: ((t == 15) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = str_register;
    ins.m_to_string = decode_str_register_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_str_register_t2";
    ins.encoding = encoding;
    ins.index = index;
    ins.shift_t = shift_t;
    ins.m = m;
    ins.n = n;
    ins.add = add;
    ins.wback = wback;
    ins.t = t;
    ins.shift_n = shift_n;

    return ins;
}

ARMInstruction ARMDecoder::decode_str_register_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     P = get_bit(opcode, 24);
    int     U = get_bit(opcode, 23);
    int     W = get_bit(opcode, 21);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int  imm5 = get_bits(opcode, 11,  7);
    int  type = get_bits(opcode,  6,  5);
    int    Rm = get_bits(opcode,  3,  0);
    int index = 0;
    int shift_t = 0;
    int m = 0;
    int n = 0;
    int add = 0;
    int wback = 0;
    int t = 0;
    int shift_n = 0;

    if (unlikely(((P == 0) && (W == 1)))) {
        return SeeInstruction("STRT");
    }
    t = UInt(Rt);
    n = UInt(Rn);
    m = UInt(Rm);
    index = (P == 1);
    add = (U == 1);
    wback = ((P == 0) || (W == 1));
    std::tie(shift_t, shift_n) = DecodeImmShift(type, imm5);
    if (unlikely((m == 15))) {
        return UnpredictableInstruction("Reason: (m == 15)");
    }
    if (unlikely((wback && ((n == 15) || (n == t))))) {
        return UnpredictableInstruction("Reason: (wback && ((n == 15) || (n == t)))");
    }
    if (unlikely((((ArchVersion() < 6) && wback) && (m == n)))) {
        return UnpredictableInstruction("Reason: (((ArchVersion() < 6) && wback) && (m == n))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = str_register;
    ins.m_to_string = decode_str_register_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_str_register_a1";
    ins.encoding = encoding;
    ins.index = index;
    ins.shift_t = shift_t;
    ins.m = m;
    ins.n = n;
    ins.add = add;
    ins.wback = wback;
    ins.t = t;
    ins.shift_n = shift_n;
    ins.cond = cond;
    ins.P = P;
    ins.U = U;
    ins.W = W;
    ins.type = type;

    return ins;
}

ARMInstruction ARMDecoder::decode_strb_immediate_thumb_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  imm5 = get_bits(opcode, 10,  6);
    int    Rn = get_bits(opcode,  5,  3);
    int    Rt = get_bits(opcode,  2,  0);
    int index = 0;
    int imm32 = 0;
    int n = 0;
    int add = 0;
    int wback = 0;
    int t = 0;

    t = UInt(Rt);
    n = UInt(Rn);
    imm32 = ZeroExtend(imm5, 32);
    index = true;
    add = true;
    wback = false;
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = strb_immediate_thumb;
    ins.m_to_string = decode_strb_immediate_thumb_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_strb_immediate_thumb_t1";
    ins.encoding = encoding;
    ins.index = index;
    ins.imm32 = imm32;
    ins.n = n;
    ins.add = add;
    ins.wback = wback;
    ins.t = t;

    return ins;
}

ARMInstruction ARMDecoder::decode_strb_immediate_thumb_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int imm12 = get_bits(opcode, 11,  0);
    int index = 0;
    int imm32 = 0;
    int n = 0;
    int add = 0;
    int wback = 0;
    int t = 0;

    if (unlikely((Rn == 15))) {
        return UndefinedInstruction("Reason: (Rn == 15)");
    }
    t = UInt(Rt);
    n = UInt(Rn);
    imm32 = ZeroExtend(imm12, 32);
    index = true;
    add = true;
    wback = false;
    if (unlikely((t == 13 || t == 15))) {
        return UnpredictableInstruction("Reason: (t == 13 || t == 15)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = strb_immediate_thumb;
    ins.m_to_string = decode_strb_immediate_thumb_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_strb_immediate_thumb_t2";
    ins.encoding = encoding;
    ins.index = index;
    ins.imm32 = imm32;
    ins.n = n;
    ins.add = add;
    ins.wback = wback;
    ins.t = t;

    return ins;
}

ARMInstruction ARMDecoder::decode_strb_immediate_thumb_t3(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int     P = get_bit(opcode, 10);
    int     U = get_bit(opcode,  9);
    int     W = get_bit(opcode,  8);
    int  imm8 = get_bits(opcode,  7,  0);
    int index = 0;
    int imm32 = 0;
    int n = 0;
    int add = 0;
    int wback = 0;
    int t = 0;

    if (unlikely((((P == 1) && (U == 1)) && (W == 0)))) {
        return SeeInstruction("STRBT");
    }
    if (unlikely(((Rn == 15) || ((P == 0) && (W == 0))))) {
        return UndefinedInstruction("Reason: ((Rn == 15) || ((P == 0) && (W == 0)))");
    }
    t = UInt(Rt);
    n = UInt(Rn);
    imm32 = ZeroExtend(imm8, 32);
    index = (P == 1);
    add = (U == 1);
    wback = (W == 1);
    if (unlikely(((t == 13 || t == 15) || (wback && (n == t))))) {
        return UnpredictableInstruction("Reason: ((t == 13 || t == 15) || (wback && (n == t)))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = strb_immediate_thumb;
    ins.m_to_string = decode_strb_immediate_thumb_t3_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_strb_immediate_thumb_t3";
    ins.encoding = encoding;
    ins.index = index;
    ins.imm32 = imm32;
    ins.n = n;
    ins.add = add;
    ins.wback = wback;
    ins.t = t;
    ins.P = P;
    ins.U = U;
    ins.W = W;

    return ins;
}

ARMInstruction ARMDecoder::decode_strb_immediate_arm_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     P = get_bit(opcode, 24);
    int     U = get_bit(opcode, 23);
    int     W = get_bit(opcode, 21);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int imm12 = get_bits(opcode, 11,  0);
    int index = 0;
    int imm32 = 0;
    int n = 0;
    int add = 0;
    int wback = 0;
    int t = 0;

    if (unlikely(((P == 0) && (W == 1)))) {
        return SeeInstruction("STRBT");
    }
    t = UInt(Rt);
    n = UInt(Rn);
    imm32 = ZeroExtend(imm12, 32);
    index = (P == 1);
    add = (U == 1);
    wback = ((P == 0) || (W == 1));
    if (unlikely((t == 15))) {
        return UnpredictableInstruction("Reason: (t == 15)");
    }
    if (unlikely((wback && ((n == 15) || (n == t))))) {
        return UnpredictableInstruction("Reason: (wback && ((n == 15) || (n == t)))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = strb_immediate_arm;
    ins.m_to_string = decode_strb_immediate_arm_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_strb_immediate_arm_a1";
    ins.encoding = encoding;
    ins.index = index;
    ins.imm32 = imm32;
    ins.n = n;
    ins.add = add;
    ins.wback = wback;
    ins.t = t;
    ins.cond = cond;
    ins.P = P;
    ins.U = U;
    ins.W = W;

    return ins;
}

ARMInstruction ARMDecoder::decode_strb_register_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rm = get_bits(opcode,  8,  6);
    int    Rn = get_bits(opcode,  5,  3);
    int    Rt = get_bits(opcode,  2,  0);
    int index = 0;
    int shift_t = 0;
    int m = 0;
    int n = 0;
    int add = 0;
    int wback = 0;
    int t = 0;
    int shift_n = 0;

    t = UInt(Rt);
    n = UInt(Rn);
    m = UInt(Rm);
    index = true;
    add = true;
    wback = false;
    shift_t = SRType_LSL, shift_n = 0;
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = strb_register;
    ins.m_to_string = decode_strb_register_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_strb_register_t1";
    ins.encoding = encoding;
    ins.index = index;
    ins.shift_t = shift_t;
    ins.m = m;
    ins.n = n;
    ins.add = add;
    ins.wback = wback;
    ins.t = t;
    ins.shift_n = shift_n;

    return ins;
}

ARMInstruction ARMDecoder::decode_strb_register_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int  imm2 = get_bits(opcode,  5,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int index = 0;
    int shift_t = 0;
    int m = 0;
    int n = 0;
    int add = 0;
    int wback = 0;
    int t = 0;
    int shift_n = 0;

    if (unlikely((Rn == 15))) {
        return UndefinedInstruction("Reason: (Rn == 15)");
    }
    t = UInt(Rt);
    n = UInt(Rn);
    m = UInt(Rm);
    index = true;
    add = true;
    wback = false;
    shift_t = SRType_LSL, shift_n = UInt(imm2);
    if (unlikely(((t == 13 || t == 15) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: ((t == 13 || t == 15) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = strb_register;
    ins.m_to_string = decode_strb_register_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_strb_register_t2";
    ins.encoding = encoding;
    ins.index = index;
    ins.shift_t = shift_t;
    ins.m = m;
    ins.n = n;
    ins.add = add;
    ins.wback = wback;
    ins.t = t;
    ins.shift_n = shift_n;

    return ins;
}

ARMInstruction ARMDecoder::decode_strb_register_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     P = get_bit(opcode, 24);
    int     U = get_bit(opcode, 23);
    int     W = get_bit(opcode, 21);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int  imm5 = get_bits(opcode, 11,  7);
    int  type = get_bits(opcode,  6,  5);
    int    Rm = get_bits(opcode,  3,  0);
    int index = 0;
    int shift_t = 0;
    int m = 0;
    int n = 0;
    int add = 0;
    int wback = 0;
    int t = 0;
    int shift_n = 0;

    if (unlikely(((P == 0) && (W == 1)))) {
        return SeeInstruction("STRBT");
    }
    t = UInt(Rt);
    n = UInt(Rn);
    m = UInt(Rm);
    index = (P == 1);
    add = (U == 1);
    wback = ((P == 0) || (W == 1));
    std::tie(shift_t, shift_n) = DecodeImmShift(type, imm5);
    if (unlikely(((t == 15) || (m == 15)))) {
        return UnpredictableInstruction("Reason: ((t == 15) || (m == 15))");
    }
    if (unlikely((wback && ((n == 15) || (n == t))))) {
        return UnpredictableInstruction("Reason: (wback && ((n == 15) || (n == t)))");
    }
    if (unlikely((((ArchVersion() < 6) && wback) && (m == n)))) {
        return UnpredictableInstruction("Reason: (((ArchVersion() < 6) && wback) && (m == n))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = strb_register;
    ins.m_to_string = decode_strb_register_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_strb_register_a1";
    ins.encoding = encoding;
    ins.index = index;
    ins.shift_t = shift_t;
    ins.m = m;
    ins.n = n;
    ins.add = add;
    ins.wback = wback;
    ins.t = t;
    ins.shift_n = shift_n;
    ins.cond = cond;
    ins.P = P;
    ins.U = U;
    ins.W = W;
    ins.type = type;

    return ins;
}

ARMInstruction ARMDecoder::decode_strbt_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int  imm8 = get_bits(opcode,  7,  0);
    int postindex = 0;
    int imm32 = 0;
    int n = 0;
    int register_form = 0;
    int add = 0;
    int t = 0;

    if (unlikely((Rn == 15))) {
        return UndefinedInstruction("Reason: (Rn == 15)");
    }
    t = UInt(Rt);
    n = UInt(Rn);
    postindex = false;
    add = true;
    register_form = false;
    imm32 = ZeroExtend(imm8, 32);
    if (unlikely((t == 13 || t == 15))) {
        return UnpredictableInstruction("Reason: (t == 13 || t == 15)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = strbt;
    ins.m_to_string = decode_strbt_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_strbt_t1";
    ins.encoding = encoding;
    ins.postindex = postindex;
    ins.imm32 = imm32;
    ins.n = n;
    ins.register_form = register_form;
    ins.add = add;
    ins.t = t;

    return ins;
}

ARMInstruction ARMDecoder::decode_strbt_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     U = get_bit(opcode, 23);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int imm12 = get_bits(opcode, 11,  0);
    int postindex = 0;
    int imm32 = 0;
    int n = 0;
    int register_form = 0;
    int add = 0;
    int t = 0;

    t = UInt(Rt);
    n = UInt(Rn);
    postindex = true;
    add = (U == 1);
    register_form = false;
    imm32 = ZeroExtend(imm12, 32);
    if (unlikely((((t == 15) || (n == 15)) || (n == t)))) {
        return UnpredictableInstruction("Reason: (((t == 15) || (n == 15)) || (n == t))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = strbt;
    ins.m_to_string = decode_strbt_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_strbt_a1";
    ins.encoding = encoding;
    ins.postindex = postindex;
    ins.imm32 = imm32;
    ins.n = n;
    ins.register_form = register_form;
    ins.add = add;
    ins.t = t;
    ins.cond = cond;
    ins.U = U;

    return ins;
}

ARMInstruction ARMDecoder::decode_strbt_a2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     U = get_bit(opcode, 23);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int  imm5 = get_bits(opcode, 11,  7);
    int  type = get_bits(opcode,  6,  5);
    int    Rm = get_bits(opcode,  3,  0);
    int shift_t = 0;
    int postindex = 0;
    int m = 0;
    int n = 0;
    int register_form = 0;
    int add = 0;
    int t = 0;
    int shift_n = 0;

    t = UInt(Rt);
    n = UInt(Rn);
    m = UInt(Rm);
    postindex = true;
    add = (U == 1);
    register_form = true;
    std::tie(shift_t, shift_n) = DecodeImmShift(type, imm5);
    if (unlikely(((((t == 15) || (n == 15)) || (n == t)) || (m == 15)))) {
        return UnpredictableInstruction("Reason: ((((t == 15) || (n == 15)) || (n == t)) || (m == 15))");
    }
    if (unlikely(((ArchVersion() < 6) && (m == n)))) {
        return UnpredictableInstruction("Reason: ((ArchVersion() < 6) && (m == n))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = strbt;
    ins.m_to_string = decode_strbt_a2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_strbt_a2";
    ins.encoding = encoding;
    ins.shift_t = shift_t;
    ins.postindex = postindex;
    ins.m = m;
    ins.n = n;
    ins.register_form = register_form;
    ins.add = add;
    ins.t = t;
    ins.shift_n = shift_n;
    ins.cond = cond;
    ins.U = U;
    ins.type = type;

    return ins;
}

ARMInstruction ARMDecoder::decode_strd_immediate_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     P = get_bit(opcode, 24);
    int     U = get_bit(opcode, 23);
    int     W = get_bit(opcode, 21);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int   Rt2 = get_bits(opcode, 11,  8);
    int  imm8 = get_bits(opcode,  7,  0);
    int index = 0;
    int t2 = 0;
    int imm32 = 0;
    int n = 0;
    int add = 0;
    int wback = 0;
    int t = 0;

    if (unlikely(((P == 0) && (W == 0)))) {
        return SeeInstruction("Related encodings");
    }
    t = UInt(Rt);
    t2 = UInt(Rt2);
    n = UInt(Rn);
    imm32 = ZeroExtend(Concatenate(imm8, 0, 2), 32);
    index = (P == 1);
    add = (U == 1);
    wback = (W == 1);
    if (unlikely((wback && ((n == t) || (n == t2))))) {
        return UnpredictableInstruction("Reason: (wback && ((n == t) || (n == t2)))");
    }
    if (unlikely((((n == 15) || (t == 13 || t == 15)) || (t2 == 13 || t2 == 15)))) {
        return UnpredictableInstruction("Reason: (((n == 15) || (t == 13 || t == 15)) || (t2 == 13 || t2 == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = strd_immediate;
    ins.m_to_string = decode_strd_immediate_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_strd_immediate_t1";
    ins.encoding = encoding;
    ins.index = index;
    ins.t2 = t2;
    ins.imm32 = imm32;
    ins.n = n;
    ins.add = add;
    ins.wback = wback;
    ins.t = t;
    ins.P = P;
    ins.U = U;
    ins.W = W;

    return ins;
}

ARMInstruction ARMDecoder::decode_strd_immediate_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     P = get_bit(opcode, 24);
    int     U = get_bit(opcode, 23);
    int     W = get_bit(opcode, 21);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int imm4H = get_bits(opcode, 11,  8);
    int imm4L = get_bits(opcode,  3,  0);
    int index = 0;
    int t2 = 0;
    int imm32 = 0;
    int n = 0;
    int add = 0;
    int wback = 0;
    int t = 0;

    if (unlikely((get_bit(Rt, 0) == 1))) {
        return UnpredictableInstruction("Reason: (get_bit(Rt, 0) == 1)");
    }
    t = UInt(Rt);
    t2 = (t + 1);
    n = UInt(Rn);
    imm32 = ZeroExtend(Concatenate(imm4H, imm4L, 4), 32);
    index = (P == 1);
    add = (U == 1);
    wback = ((P == 0) || (W == 1));
    if (unlikely(((P == 0) && (W == 1)))) {
        return UnpredictableInstruction("Reason: ((P == 0) && (W == 1))");
    }
    if (unlikely((wback && (((n == 15) || (n == t)) || (n == t2))))) {
        return UnpredictableInstruction("Reason: (wback && (((n == 15) || (n == t)) || (n == t2)))");
    }
    if (unlikely((t2 == 15))) {
        return UnpredictableInstruction("Reason: (t2 == 15)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = strd_immediate;
    ins.m_to_string = decode_strd_immediate_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_strd_immediate_a1";
    ins.encoding = encoding;
    ins.index = index;
    ins.t2 = t2;
    ins.imm32 = imm32;
    ins.n = n;
    ins.add = add;
    ins.wback = wback;
    ins.t = t;
    ins.cond = cond;
    ins.P = P;
    ins.U = U;
    ins.W = W;

    return ins;
}

ARMInstruction ARMDecoder::decode_strd_register_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     P = get_bit(opcode, 24);
    int     U = get_bit(opcode, 23);
    int     W = get_bit(opcode, 21);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode,  3,  0);
    int index = 0;
    int t2 = 0;
    int m = 0;
    int n = 0;
    int add = 0;
    int wback = 0;
    int t = 0;

    if (unlikely((get_bit(Rt, 0) == 1))) {
        return UnpredictableInstruction("Reason: (get_bit(Rt, 0) == 1)");
    }
    t = UInt(Rt);
    t2 = (t + 1);
    n = UInt(Rn);
    m = UInt(Rm);
    index = (P == 1);
    add = (U == 1);
    wback = ((P == 0) || (W == 1));
    if (unlikely(((P == 0) && (W == 1)))) {
        return UnpredictableInstruction("Reason: ((P == 0) && (W == 1))");
    }
    if (unlikely(((t2 == 15) || (m == 15)))) {
        return UnpredictableInstruction("Reason: ((t2 == 15) || (m == 15))");
    }
    if (unlikely((wback && (((n == 15) || (n == t)) || (n == t2))))) {
        return UnpredictableInstruction("Reason: (wback && (((n == 15) || (n == t)) || (n == t2)))");
    }
    if (unlikely((((ArchVersion() < 6) && wback) && (m == n)))) {
        return UnpredictableInstruction("Reason: (((ArchVersion() < 6) && wback) && (m == n))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = strd_register;
    ins.m_to_string = decode_strd_register_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_strd_register_a1";
    ins.encoding = encoding;
    ins.index = index;
    ins.t2 = t2;
    ins.m = m;
    ins.n = n;
    ins.add = add;
    ins.wback = wback;
    ins.t = t;
    ins.cond = cond;
    ins.P = P;
    ins.U = U;
    ins.W = W;

    return ins;
}

ARMInstruction ARMDecoder::decode_strex_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int    Rd = get_bits(opcode, 11,  8);
    int  imm8 = get_bits(opcode,  7,  0);
    int imm32 = 0;
    int n = 0;
    int d = 0;
    int t = 0;

    d = UInt(Rd);
    t = UInt(Rt);
    n = UInt(Rn);
    imm32 = ZeroExtend(Concatenate(imm8, 0, 2), 32);
    if (unlikely((((d == 13 || d == 15) || (t == 13 || t == 15)) || (n == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 13 || d == 15) || (t == 13 || t == 15)) || (n == 15))");
    }
    if (unlikely(((d == n) || (d == t)))) {
        return UnpredictableInstruction("Reason: ((d == n) || (d == t))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = strex;
    ins.m_to_string = decode_strex_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_strex_t1";
    ins.encoding = encoding;
    ins.imm32 = imm32;
    ins.n = n;
    ins.d = d;
    ins.t = t;

    return ins;
}

ARMInstruction ARMDecoder::decode_strex_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int    Rt = get_bits(opcode,  3,  0);
    int imm32 = 0;
    int n = 0;
    int d = 0;
    int t = 0;

    d = UInt(Rd);
    t = UInt(Rt);
    n = UInt(Rn);
    imm32 = Zeros(32);
    if (unlikely((((d == 15) || (t == 15)) || (n == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 15) || (t == 15)) || (n == 15))");
    }
    if (unlikely(((d == n) || (d == t)))) {
        return UnpredictableInstruction("Reason: ((d == n) || (d == t))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = strex;
    ins.m_to_string = decode_strex_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_strex_a1";
    ins.encoding = encoding;
    ins.imm32 = imm32;
    ins.n = n;
    ins.d = d;
    ins.t = t;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_strexb_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int    Rd = get_bits(opcode,  3,  0);
    int n = 0;
    int d = 0;
    int t = 0;

    d = UInt(Rd);
    t = UInt(Rt);
    n = UInt(Rn);
    if (unlikely((((d == 13 || d == 15) || (t == 13 || t == 15)) || (n == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 13 || d == 15) || (t == 13 || t == 15)) || (n == 15))");
    }
    if (unlikely(((d == n) || (d == t)))) {
        return UnpredictableInstruction("Reason: ((d == n) || (d == t))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = strexb;
    ins.m_to_string = decode_strexb_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_strexb_t1";
    ins.encoding = encoding;
    ins.n = n;
    ins.d = d;
    ins.t = t;

    return ins;
}

ARMInstruction ARMDecoder::decode_strexb_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int    Rt = get_bits(opcode,  3,  0);
    int n = 0;
    int d = 0;
    int t = 0;

    d = UInt(Rd);
    t = UInt(Rt);
    n = UInt(Rn);
    if (unlikely((((d == 15) || (t == 15)) || (n == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 15) || (t == 15)) || (n == 15))");
    }
    if (unlikely(((d == n) || (d == t)))) {
        return UnpredictableInstruction("Reason: ((d == n) || (d == t))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = strexb;
    ins.m_to_string = decode_strexb_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_strexb_a1";
    ins.encoding = encoding;
    ins.n = n;
    ins.d = d;
    ins.t = t;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_strexd_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int   Rt2 = get_bits(opcode, 11,  8);
    int    Rd = get_bits(opcode,  3,  0);
    int n = 0;
    int t2 = 0;
    int d = 0;
    int t = 0;

    d = UInt(Rd);
    t = UInt(Rt);
    t2 = UInt(Rt2);
    n = UInt(Rn);
    if (unlikely(((((d == 13 || d == 15) || (t == 13 || t == 15)) || (t2 == 13 || t2 == 15)) || (n == 15)))) {
        return UnpredictableInstruction("Reason: ((((d == 13 || d == 15) || (t == 13 || t == 15)) || (t2 == 13 || t2 == 15)) || (n == 15))");
    }
    if (unlikely((((d == n) || (d == t)) || (d == t2)))) {
        return UnpredictableInstruction("Reason: (((d == n) || (d == t)) || (d == t2))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = strexd;
    ins.m_to_string = decode_strexd_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_strexd_t1";
    ins.encoding = encoding;
    ins.n = n;
    ins.t2 = t2;
    ins.d = d;
    ins.t = t;

    return ins;
}

ARMInstruction ARMDecoder::decode_strexd_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int    Rt = get_bits(opcode,  3,  0);
    int n = 0;
    int t2 = 0;
    int d = 0;
    int t = 0;

    d = UInt(Rd);
    t = UInt(Rt);
    t2 = (t + 1);
    n = UInt(Rn);
    if (unlikely(((((d == 15) || (get_bit(Rt, 0) == 1)) || (Rt == 14)) || (n == 15)))) {
        return UnpredictableInstruction("Reason: ((((d == 15) || (get_bit(Rt, 0) == 1)) || (Rt == 14)) || (n == 15))");
    }
    if (unlikely((((d == n) || (d == t)) || (d == t2)))) {
        return UnpredictableInstruction("Reason: (((d == n) || (d == t)) || (d == t2))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = strexd;
    ins.m_to_string = decode_strexd_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_strexd_a1";
    ins.encoding = encoding;
    ins.n = n;
    ins.t2 = t2;
    ins.d = d;
    ins.t = t;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_strexh_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int    Rd = get_bits(opcode,  3,  0);
    int n = 0;
    int d = 0;
    int t = 0;

    d = UInt(Rd);
    t = UInt(Rt);
    n = UInt(Rn);
    if (unlikely((((d == 13 || d == 15) || (t == 13 || t == 15)) || (n == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 13 || d == 15) || (t == 13 || t == 15)) || (n == 15))");
    }
    if (unlikely(((d == n) || (d == t)))) {
        return UnpredictableInstruction("Reason: ((d == n) || (d == t))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = strexh;
    ins.m_to_string = decode_strexh_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_strexh_t1";
    ins.encoding = encoding;
    ins.n = n;
    ins.d = d;
    ins.t = t;

    return ins;
}

ARMInstruction ARMDecoder::decode_strexh_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int    Rt = get_bits(opcode,  3,  0);
    int n = 0;
    int d = 0;
    int t = 0;

    d = UInt(Rd);
    t = UInt(Rt);
    n = UInt(Rn);
    if (unlikely((((d == 15) || (t == 15)) || (n == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 15) || (t == 15)) || (n == 15))");
    }
    if (unlikely(((d == n) || (d == t)))) {
        return UnpredictableInstruction("Reason: ((d == n) || (d == t))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = strexh;
    ins.m_to_string = decode_strexh_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_strexh_a1";
    ins.encoding = encoding;
    ins.n = n;
    ins.d = d;
    ins.t = t;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_strh_immediate_thumb_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  imm5 = get_bits(opcode, 10,  6);
    int    Rn = get_bits(opcode,  5,  3);
    int    Rt = get_bits(opcode,  2,  0);
    int index = 0;
    int imm32 = 0;
    int n = 0;
    int add = 0;
    int wback = 0;
    int t = 0;

    t = UInt(Rt);
    n = UInt(Rn);
    imm32 = ZeroExtend(Concatenate(imm5, 0, 1), 32);
    index = true;
    add = true;
    wback = false;
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = strh_immediate_thumb;
    ins.m_to_string = decode_strh_immediate_thumb_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_strh_immediate_thumb_t1";
    ins.encoding = encoding;
    ins.index = index;
    ins.imm32 = imm32;
    ins.n = n;
    ins.add = add;
    ins.wback = wback;
    ins.t = t;

    return ins;
}

ARMInstruction ARMDecoder::decode_strh_immediate_thumb_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int imm12 = get_bits(opcode, 11,  0);
    int index = 0;
    int imm32 = 0;
    int n = 0;
    int add = 0;
    int wback = 0;
    int t = 0;

    if (unlikely((Rn == 15))) {
        return UndefinedInstruction("Reason: (Rn == 15)");
    }
    t = UInt(Rt);
    n = UInt(Rn);
    imm32 = ZeroExtend(imm12, 32);
    index = true;
    add = true;
    wback = false;
    if (unlikely((t == 13 || t == 15))) {
        return UnpredictableInstruction("Reason: (t == 13 || t == 15)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = strh_immediate_thumb;
    ins.m_to_string = decode_strh_immediate_thumb_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_strh_immediate_thumb_t2";
    ins.encoding = encoding;
    ins.index = index;
    ins.imm32 = imm32;
    ins.n = n;
    ins.add = add;
    ins.wback = wback;
    ins.t = t;

    return ins;
}

ARMInstruction ARMDecoder::decode_strh_immediate_thumb_t3(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int     P = get_bit(opcode, 10);
    int     U = get_bit(opcode,  9);
    int     W = get_bit(opcode,  8);
    int  imm8 = get_bits(opcode,  7,  0);
    int index = 0;
    int imm32 = 0;
    int n = 0;
    int add = 0;
    int wback = 0;
    int t = 0;

    if (unlikely((((P == 1) && (U == 1)) && (W == 0)))) {
        return SeeInstruction("STRHT");
    }
    if (unlikely(((Rn == 15) || ((P == 0) && (W == 0))))) {
        return UndefinedInstruction("Reason: ((Rn == 15) || ((P == 0) && (W == 0)))");
    }
    t = UInt(Rt);
    n = UInt(Rn);
    imm32 = ZeroExtend(imm8, 32);
    index = (P == 1);
    add = (U == 1);
    wback = (W == 1);
    if (unlikely(((t == 13 || t == 15) || (wback && (n == t))))) {
        return UnpredictableInstruction("Reason: ((t == 13 || t == 15) || (wback && (n == t)))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = strh_immediate_thumb;
    ins.m_to_string = decode_strh_immediate_thumb_t3_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_strh_immediate_thumb_t3";
    ins.encoding = encoding;
    ins.index = index;
    ins.imm32 = imm32;
    ins.n = n;
    ins.add = add;
    ins.wback = wback;
    ins.t = t;
    ins.P = P;
    ins.U = U;
    ins.W = W;

    return ins;
}

ARMInstruction ARMDecoder::decode_strh_immediate_arm_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     P = get_bit(opcode, 24);
    int     U = get_bit(opcode, 23);
    int     W = get_bit(opcode, 21);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int imm4H = get_bits(opcode, 11,  8);
    int imm4L = get_bits(opcode,  3,  0);
    int index = 0;
    int imm32 = 0;
    int n = 0;
    int add = 0;
    int wback = 0;
    int t = 0;

    if (unlikely(((P == 0) && (W == 1)))) {
        return SeeInstruction("STRHT");
    }
    t = UInt(Rt);
    n = UInt(Rn);
    imm32 = ZeroExtend(Concatenate(imm4H, imm4L, 4), 32);
    index = (P == 1);
    add = (U == 1);
    wback = ((P == 0) || (W == 1));
    if (unlikely((t == 15))) {
        return UnpredictableInstruction("Reason: (t == 15)");
    }
    if (unlikely((wback && ((n == 15) || (n == t))))) {
        return UnpredictableInstruction("Reason: (wback && ((n == 15) || (n == t)))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = strh_immediate_arm;
    ins.m_to_string = decode_strh_immediate_arm_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_strh_immediate_arm_a1";
    ins.encoding = encoding;
    ins.index = index;
    ins.imm32 = imm32;
    ins.n = n;
    ins.add = add;
    ins.wback = wback;
    ins.t = t;
    ins.cond = cond;
    ins.P = P;
    ins.U = U;
    ins.W = W;

    return ins;
}

ARMInstruction ARMDecoder::decode_strh_register_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rm = get_bits(opcode,  8,  6);
    int    Rn = get_bits(opcode,  5,  3);
    int    Rt = get_bits(opcode,  2,  0);
    int index = 0;
    int shift_t = 0;
    int m = 0;
    int n = 0;
    int add = 0;
    int wback = 0;
    int t = 0;
    int shift_n = 0;

    if (unlikely((CurrentInstrSet() == InstrSet_ThumbEE))) {
        return SeeInstruction("Modified operation in ThumbEE");
    }
    t = UInt(Rt);
    n = UInt(Rn);
    m = UInt(Rm);
    index = true;
    add = true;
    wback = false;
    shift_t = SRType_LSL, shift_n = 0;
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = strh_register;
    ins.m_to_string = decode_strh_register_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_strh_register_t1";
    ins.encoding = encoding;
    ins.index = index;
    ins.shift_t = shift_t;
    ins.m = m;
    ins.n = n;
    ins.add = add;
    ins.wback = wback;
    ins.t = t;
    ins.shift_n = shift_n;

    return ins;
}

ARMInstruction ARMDecoder::decode_strh_register_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int  imm2 = get_bits(opcode,  5,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int index = 0;
    int shift_t = 0;
    int m = 0;
    int n = 0;
    int add = 0;
    int wback = 0;
    int t = 0;
    int shift_n = 0;

    if (unlikely((Rn == 15))) {
        return UndefinedInstruction("Reason: (Rn == 15)");
    }
    t = UInt(Rt);
    n = UInt(Rn);
    m = UInt(Rm);
    index = true;
    add = true;
    wback = false;
    shift_t = SRType_LSL, shift_n = UInt(imm2);
    if (unlikely(((t == 13 || t == 15) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: ((t == 13 || t == 15) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = strh_register;
    ins.m_to_string = decode_strh_register_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_strh_register_t2";
    ins.encoding = encoding;
    ins.index = index;
    ins.shift_t = shift_t;
    ins.m = m;
    ins.n = n;
    ins.add = add;
    ins.wback = wback;
    ins.t = t;
    ins.shift_n = shift_n;

    return ins;
}

ARMInstruction ARMDecoder::decode_strh_register_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     P = get_bit(opcode, 24);
    int     U = get_bit(opcode, 23);
    int     W = get_bit(opcode, 21);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode,  3,  0);
    int index = 0;
    int shift_t = 0;
    int m = 0;
    int n = 0;
    int add = 0;
    int wback = 0;
    int t = 0;
    int shift_n = 0;

    if (unlikely(((P == 0) && (W == 1)))) {
        return SeeInstruction("STRHT");
    }
    t = UInt(Rt);
    n = UInt(Rn);
    m = UInt(Rm);
    index = (P == 1);
    add = (U == 1);
    wback = ((P == 0) || (W == 1));
    shift_t = SRType_LSL, shift_n = 0;
    if (unlikely(((t == 15) || (m == 15)))) {
        return UnpredictableInstruction("Reason: ((t == 15) || (m == 15))");
    }
    if (unlikely((wback && ((n == 15) || (n == t))))) {
        return UnpredictableInstruction("Reason: (wback && ((n == 15) || (n == t)))");
    }
    if (unlikely((((ArchVersion() < 6) && wback) && (m == n)))) {
        return UnpredictableInstruction("Reason: (((ArchVersion() < 6) && wback) && (m == n))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = strh_register;
    ins.m_to_string = decode_strh_register_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_strh_register_a1";
    ins.encoding = encoding;
    ins.index = index;
    ins.shift_t = shift_t;
    ins.m = m;
    ins.n = n;
    ins.add = add;
    ins.wback = wback;
    ins.t = t;
    ins.shift_n = shift_n;
    ins.cond = cond;
    ins.P = P;
    ins.U = U;
    ins.W = W;

    return ins;
}

ARMInstruction ARMDecoder::decode_strht_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int  imm8 = get_bits(opcode,  7,  0);
    int postindex = 0;
    int imm32 = 0;
    int n = 0;
    int register_form = 0;
    int add = 0;
    int t = 0;

    if (unlikely((Rn == 15))) {
        return UndefinedInstruction("Reason: (Rn == 15)");
    }
    t = UInt(Rt);
    n = UInt(Rn);
    postindex = false;
    add = true;
    register_form = false;
    imm32 = ZeroExtend(imm8, 32);
    if (unlikely((t == 13 || t == 15))) {
        return UnpredictableInstruction("Reason: (t == 13 || t == 15)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = strht;
    ins.m_to_string = decode_strht_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_strht_t1";
    ins.encoding = encoding;
    ins.postindex = postindex;
    ins.imm32 = imm32;
    ins.n = n;
    ins.register_form = register_form;
    ins.add = add;
    ins.t = t;

    return ins;
}

ARMInstruction ARMDecoder::decode_strht_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     U = get_bit(opcode, 23);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int imm4H = get_bits(opcode, 11,  8);
    int imm4L = get_bits(opcode,  3,  0);
    int postindex = 0;
    int imm32 = 0;
    int n = 0;
    int register_form = 0;
    int add = 0;
    int t = 0;

    t = UInt(Rt);
    n = UInt(Rn);
    postindex = true;
    add = (U == 1);
    register_form = false;
    imm32 = ZeroExtend(Concatenate(imm4H, imm4L, 4), 32);
    if (unlikely((((t == 15) || (n == 15)) || (n == t)))) {
        return UnpredictableInstruction("Reason: (((t == 15) || (n == 15)) || (n == t))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = strht;
    ins.m_to_string = decode_strht_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_strht_a1";
    ins.encoding = encoding;
    ins.postindex = postindex;
    ins.imm32 = imm32;
    ins.n = n;
    ins.register_form = register_form;
    ins.add = add;
    ins.t = t;
    ins.cond = cond;
    ins.U = U;

    return ins;
}

ARMInstruction ARMDecoder::decode_strht_a2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     U = get_bit(opcode, 23);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode,  3,  0);
    int postindex = 0;
    int m = 0;
    int n = 0;
    int register_form = 0;
    int add = 0;
    int t = 0;

    t = UInt(Rt);
    n = UInt(Rn);
    m = UInt(Rm);
    postindex = true;
    add = (U == 1);
    register_form = true;
    if (unlikely(((((t == 15) || (n == 15)) || (n == t)) || (m == 15)))) {
        return UnpredictableInstruction("Reason: ((((t == 15) || (n == 15)) || (n == t)) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = strht;
    ins.m_to_string = decode_strht_a2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_strht_a2";
    ins.encoding = encoding;
    ins.postindex = postindex;
    ins.m = m;
    ins.n = n;
    ins.register_form = register_form;
    ins.add = add;
    ins.t = t;
    ins.cond = cond;
    ins.U = U;

    return ins;
}

ARMInstruction ARMDecoder::decode_strt_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int  imm8 = get_bits(opcode,  7,  0);
    int postindex = 0;
    int imm32 = 0;
    int n = 0;
    int register_form = 0;
    int add = 0;
    int t = 0;

    if (unlikely((Rn == 15))) {
        return UndefinedInstruction("Reason: (Rn == 15)");
    }
    t = UInt(Rt);
    n = UInt(Rn);
    postindex = false;
    add = true;
    register_form = false;
    imm32 = ZeroExtend(imm8, 32);
    if (unlikely((t == 13 || t == 15))) {
        return UnpredictableInstruction("Reason: (t == 13 || t == 15)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = strt;
    ins.m_to_string = decode_strt_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_strt_t1";
    ins.encoding = encoding;
    ins.postindex = postindex;
    ins.imm32 = imm32;
    ins.n = n;
    ins.register_form = register_form;
    ins.add = add;
    ins.t = t;

    return ins;
}

ARMInstruction ARMDecoder::decode_strt_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     U = get_bit(opcode, 23);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int imm12 = get_bits(opcode, 11,  0);
    int postindex = 0;
    int imm32 = 0;
    int n = 0;
    int register_form = 0;
    int add = 0;
    int t = 0;

    t = UInt(Rt);
    n = UInt(Rn);
    postindex = true;
    add = (U == 1);
    register_form = false;
    imm32 = ZeroExtend(imm12, 32);
    if (unlikely(((n == 15) || (n == t)))) {
        return UnpredictableInstruction("Reason: ((n == 15) || (n == t))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = strt;
    ins.m_to_string = decode_strt_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_strt_a1";
    ins.encoding = encoding;
    ins.postindex = postindex;
    ins.imm32 = imm32;
    ins.n = n;
    ins.register_form = register_form;
    ins.add = add;
    ins.t = t;
    ins.cond = cond;
    ins.U = U;

    return ins;
}

ARMInstruction ARMDecoder::decode_strt_a2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     U = get_bit(opcode, 23);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int  imm5 = get_bits(opcode, 11,  7);
    int  type = get_bits(opcode,  6,  5);
    int    Rm = get_bits(opcode,  3,  0);
    int shift_t = 0;
    int postindex = 0;
    int m = 0;
    int n = 0;
    int register_form = 0;
    int add = 0;
    int t = 0;
    int shift_n = 0;

    t = UInt(Rt);
    n = UInt(Rn);
    m = UInt(Rm);
    postindex = true;
    add = (U == 1);
    register_form = true;
    std::tie(shift_t, shift_n) = DecodeImmShift(type, imm5);
    if (unlikely((((n == 15) || (n == t)) || (m == 15)))) {
        return UnpredictableInstruction("Reason: (((n == 15) || (n == t)) || (m == 15))");
    }
    if (unlikely(((ArchVersion() < 6) && (m == n)))) {
        return UnpredictableInstruction("Reason: ((ArchVersion() < 6) && (m == n))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = strt;
    ins.m_to_string = decode_strt_a2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_strt_a2";
    ins.encoding = encoding;
    ins.shift_t = shift_t;
    ins.postindex = postindex;
    ins.m = m;
    ins.n = n;
    ins.register_form = register_form;
    ins.add = add;
    ins.t = t;
    ins.shift_n = shift_n;
    ins.cond = cond;
    ins.U = U;
    ins.type = type;

    return ins;
}

ARMInstruction ARMDecoder::decode_sub_immediate_thumb_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  imm3 = get_bits(opcode,  8,  6);
    int    Rn = get_bits(opcode,  5,  3);
    int    Rd = get_bits(opcode,  2,  0);
    int setflags = 0;
    int imm32 = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    setflags = !InITBlock();
    imm32 = ZeroExtend(imm3, 32);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = sub_immediate_thumb;
    ins.m_to_string = decode_sub_immediate_thumb_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_sub_immediate_thumb_t1";
    ins.encoding = encoding;
    ins.setflags = setflags;
    ins.imm32 = imm32;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_sub_immediate_thumb_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int   Rdn = get_bits(opcode, 10,  8);
    int  imm8 = get_bits(opcode,  7,  0);
    int setflags = 0;
    int imm32 = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rdn);
    n = UInt(Rdn);
    setflags = !InITBlock();
    imm32 = ZeroExtend(imm8, 32);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = sub_immediate_thumb;
    ins.m_to_string = decode_sub_immediate_thumb_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_sub_immediate_thumb_t2";
    ins.encoding = encoding;
    ins.setflags = setflags;
    ins.imm32 = imm32;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_sub_immediate_thumb_t3(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     i = get_bit(opcode, 26);
    int     S = get_bit(opcode, 20);
    int    Rn = get_bits(opcode, 19, 16);
    int  imm3 = get_bits(opcode, 14, 12);
    int    Rd = get_bits(opcode, 11,  8);
    int  imm8 = get_bits(opcode,  7,  0);
    int setflags = 0;
    int imm32 = 0;
    int d = 0;
    int n = 0;

    if (unlikely(((Rd == 15) && (S == 1)))) {
        return SeeInstruction("CMP (immediate)");
    }
    if (unlikely((Rn == 13))) {
        return SeeInstruction("SUB (SP minus immediate)");
    }
    d = UInt(Rd);
    n = UInt(Rn);
    setflags = (S == 1);
    imm32 = ThumbExpandImm(Concatenate(Concatenate(i, imm3, 3), imm8, 8));
    if (unlikely((((d == 13) || ((d == 15) && (S == 0))) || (n == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 13) || ((d == 15) && (S == 0))) || (n == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = sub_immediate_thumb;
    ins.m_to_string = decode_sub_immediate_thumb_t3_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_sub_immediate_thumb_t3";
    ins.encoding = encoding;
    ins.setflags = setflags;
    ins.imm32 = imm32;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_sub_immediate_thumb_t4(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     i = get_bit(opcode, 26);
    int    Rn = get_bits(opcode, 19, 16);
    int  imm3 = get_bits(opcode, 14, 12);
    int    Rd = get_bits(opcode, 11,  8);
    int  imm8 = get_bits(opcode,  7,  0);
    int setflags = 0;
    int imm32 = 0;
    int d = 0;
    int n = 0;

    if (unlikely((Rn == 15))) {
        return SeeInstruction("ADR");
    }
    if (unlikely((Rn == 13))) {
        return SeeInstruction("SUB (SP minus immediate)");
    }
    d = UInt(Rd);
    n = UInt(Rn);
    setflags = false;
    imm32 = ZeroExtend(Concatenate(Concatenate(i, imm3, 3), imm8, 8), 32);
    if (unlikely((d == 13 || d == 15))) {
        return UnpredictableInstruction("Reason: (d == 13 || d == 15)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = sub_immediate_thumb;
    ins.m_to_string = decode_sub_immediate_thumb_t4_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_sub_immediate_thumb_t4";
    ins.encoding = encoding;
    ins.setflags = setflags;
    ins.imm32 = imm32;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_sub_immediate_arm_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     S = get_bit(opcode, 20);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int imm12 = get_bits(opcode, 11,  0);
    int setflags = 0;
    int imm32 = 0;
    int d = 0;
    int n = 0;

    if (unlikely(((Rn == 15) && (S == 0)))) {
        return SeeInstruction("ADR");
    }
    if (unlikely((Rn == 13))) {
        return SeeInstruction("SUB (SP minus immediate)");
    }
    if (unlikely(((Rd == 15) && (S == 1)))) {
        return SeeInstruction("SUBS PC, LR and related instructions");
    }
    d = UInt(Rd);
    n = UInt(Rn);
    setflags = (S == 1);
    imm32 = ARMExpandImm(imm12);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = sub_immediate_arm;
    ins.m_to_string = decode_sub_immediate_arm_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_sub_immediate_arm_a1";
    ins.encoding = encoding;
    ins.setflags = setflags;
    ins.imm32 = imm32;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_sub_register_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rm = get_bits(opcode,  8,  6);
    int    Rn = get_bits(opcode,  5,  3);
    int    Rd = get_bits(opcode,  2,  0);
    int shift_t = 0;
    int d = 0;
    int m = 0;
    int n = 0;
    int shift_n = 0;
    int setflags = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    setflags = !InITBlock();
    shift_t = SRType_LSL, shift_n = 0;
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = sub_register;
    ins.m_to_string = decode_sub_register_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_sub_register_t1";
    ins.encoding = encoding;
    ins.shift_t = shift_t;
    ins.d = d;
    ins.m = m;
    ins.n = n;
    ins.shift_n = shift_n;
    ins.setflags = setflags;

    return ins;
}

ARMInstruction ARMDecoder::decode_sub_register_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     S = get_bit(opcode, 20);
    int    Rn = get_bits(opcode, 19, 16);
    int  imm3 = get_bits(opcode, 14, 12);
    int    Rd = get_bits(opcode, 11,  8);
    int  imm2 = get_bits(opcode,  7,  6);
    int  type = get_bits(opcode,  5,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int shift_t = 0;
    int d = 0;
    int m = 0;
    int n = 0;
    int shift_n = 0;
    int setflags = 0;

    if (unlikely(((Rd == 15) && (S == 1)))) {
        return SeeInstruction("CMP (register)");
    }
    if (unlikely((Rn == 13))) {
        return SeeInstruction("SUB (SP minus register)");
    }
    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    setflags = (S == 1);
    std::tie(shift_t, shift_n) = DecodeImmShift(type, Concatenate(imm3, imm2, 2));
    if (unlikely(((((d == 13) || ((d == 15) && (S == 0))) || (n == 15)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: ((((d == 13) || ((d == 15) && (S == 0))) || (n == 15)) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = sub_register;
    ins.m_to_string = decode_sub_register_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_sub_register_t2";
    ins.encoding = encoding;
    ins.shift_t = shift_t;
    ins.d = d;
    ins.m = m;
    ins.n = n;
    ins.shift_n = shift_n;
    ins.setflags = setflags;
    ins.type = type;

    return ins;
}

ARMInstruction ARMDecoder::decode_sub_register_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     S = get_bit(opcode, 20);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int  imm5 = get_bits(opcode, 11,  7);
    int  type = get_bits(opcode,  6,  5);
    int    Rm = get_bits(opcode,  3,  0);
    int shift_t = 0;
    int d = 0;
    int m = 0;
    int n = 0;
    int shift_n = 0;
    int setflags = 0;

    if (unlikely(((Rd == 15) && (S == 1)))) {
        return SeeInstruction("SUBS PC, LR and related instructions");
    }
    if (unlikely((Rn == 13))) {
        return SeeInstruction("SUB (SP minus register)");
    }
    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    setflags = (S == 1);
    std::tie(shift_t, shift_n) = DecodeImmShift(type, imm5);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = sub_register;
    ins.m_to_string = decode_sub_register_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_sub_register_a1";
    ins.encoding = encoding;
    ins.shift_t = shift_t;
    ins.d = d;
    ins.m = m;
    ins.n = n;
    ins.shift_n = shift_n;
    ins.setflags = setflags;
    ins.cond = cond;
    ins.type = type;

    return ins;
}

ARMInstruction ARMDecoder::decode_sub_register_shifted_register_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     S = get_bit(opcode, 20);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int    Rs = get_bits(opcode, 11,  8);
    int  type = get_bits(opcode,  6,  5);
    int    Rm = get_bits(opcode,  3,  0);
    int shift_t = 0;
    int d = 0;
    int m = 0;
    int n = 0;
    int s = 0;
    int setflags = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    s = UInt(Rs);
    setflags = (S == 1);
    shift_t = DecodeRegShift(type);
    if (unlikely(((((d == 15) || (n == 15)) || (m == 15)) || (s == 15)))) {
        return UnpredictableInstruction("Reason: ((((d == 15) || (n == 15)) || (m == 15)) || (s == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = sub_register_shifted_register;
    ins.m_to_string = decode_sub_register_shifted_register_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_sub_register_shifted_register_a1";
    ins.encoding = encoding;
    ins.shift_t = shift_t;
    ins.d = d;
    ins.m = m;
    ins.n = n;
    ins.s = s;
    ins.setflags = setflags;
    ins.cond = cond;
    ins.type = type;

    return ins;
}

ARMInstruction ARMDecoder::decode_sub_sp_minus_immediate_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  imm7 = get_bits(opcode,  6,  0);
    int setflags = 0;
    int d = 0;
    int imm32 = 0;

    d = 13;
    setflags = false;
    imm32 = ZeroExtend(Concatenate(imm7, 0, 2), 32);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = sub_sp_minus_immediate;
    ins.m_to_string = decode_sub_sp_minus_immediate_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_sub_sp_minus_immediate_t1";
    ins.encoding = encoding;
    ins.setflags = setflags;
    ins.d = d;
    ins.imm32 = imm32;

    return ins;
}

ARMInstruction ARMDecoder::decode_sub_sp_minus_immediate_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     i = get_bit(opcode, 26);
    int     S = get_bit(opcode, 20);
    int  imm3 = get_bits(opcode, 14, 12);
    int    Rd = get_bits(opcode, 11,  8);
    int  imm8 = get_bits(opcode,  7,  0);
    int setflags = 0;
    int d = 0;
    int imm32 = 0;

    if (unlikely(((Rd == 15) && (S == 1)))) {
        return SeeInstruction("CMP (immediate)");
    }
    d = UInt(Rd);
    setflags = (S == 1);
    imm32 = ThumbExpandImm(Concatenate(Concatenate(i, imm3, 3), imm8, 8));
    if (unlikely(((d == 15) && (S == 0)))) {
        return UnpredictableInstruction("Reason: ((d == 15) && (S == 0))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = sub_sp_minus_immediate;
    ins.m_to_string = decode_sub_sp_minus_immediate_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_sub_sp_minus_immediate_t2";
    ins.encoding = encoding;
    ins.setflags = setflags;
    ins.d = d;
    ins.imm32 = imm32;

    return ins;
}

ARMInstruction ARMDecoder::decode_sub_sp_minus_immediate_t3(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     i = get_bit(opcode, 26);
    int  imm3 = get_bits(opcode, 14, 12);
    int    Rd = get_bits(opcode, 11,  8);
    int  imm8 = get_bits(opcode,  7,  0);
    int setflags = 0;
    int d = 0;
    int imm32 = 0;

    d = UInt(Rd);
    setflags = false;
    imm32 = ZeroExtend(Concatenate(Concatenate(i, imm3, 3), imm8, 8), 32);
    if (unlikely((d == 15))) {
        return UnpredictableInstruction("Reason: (d == 15)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = sub_sp_minus_immediate;
    ins.m_to_string = decode_sub_sp_minus_immediate_t3_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_sub_sp_minus_immediate_t3";
    ins.encoding = encoding;
    ins.setflags = setflags;
    ins.d = d;
    ins.imm32 = imm32;

    return ins;
}

ARMInstruction ARMDecoder::decode_sub_sp_minus_immediate_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     S = get_bit(opcode, 20);
    int    Rd = get_bits(opcode, 15, 12);
    int imm12 = get_bits(opcode, 11,  0);
    int setflags = 0;
    int d = 0;
    int imm32 = 0;

    if (unlikely(((Rd == 15) && (S == 1)))) {
        return SeeInstruction("SUBS PC, LR and related instructions");
    }
    d = UInt(Rd);
    setflags = (S == 1);
    imm32 = ARMExpandImm(imm12);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = sub_sp_minus_immediate;
    ins.m_to_string = decode_sub_sp_minus_immediate_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_sub_sp_minus_immediate_a1";
    ins.encoding = encoding;
    ins.setflags = setflags;
    ins.d = d;
    ins.imm32 = imm32;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_sub_sp_minus_register_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     S = get_bit(opcode, 20);
    int  imm3 = get_bits(opcode, 14, 12);
    int    Rd = get_bits(opcode, 11,  8);
    int  imm2 = get_bits(opcode,  7,  6);
    int  type = get_bits(opcode,  5,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int shift_n = 0;
    int setflags = 0;
    int shift_t = 0;
    int m = 0;
    int d = 0;

    if (unlikely(((Rd == 15) && (S == 1)))) {
        return SeeInstruction("CMP (register)");
    }
    d = UInt(Rd);
    m = UInt(Rm);
    setflags = (S == 1);
    std::tie(shift_t, shift_n) = DecodeImmShift(type, Concatenate(imm3, imm2, 2));
    if (unlikely(((d == 13) && ((shift_t != SRType_LSL) || (shift_n > 3))))) {
        return UnpredictableInstruction("Reason: ((d == 13) && ((shift_t != SRType_LSL) || (shift_n > 3)))");
    }
    if (unlikely((((d == 15) && (S == 0)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 15) && (S == 0)) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = sub_sp_minus_register;
    ins.m_to_string = decode_sub_sp_minus_register_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_sub_sp_minus_register_t1";
    ins.encoding = encoding;
    ins.shift_n = shift_n;
    ins.setflags = setflags;
    ins.shift_t = shift_t;
    ins.m = m;
    ins.d = d;
    ins.type = type;

    return ins;
}

ARMInstruction ARMDecoder::decode_sub_sp_minus_register_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     S = get_bit(opcode, 20);
    int    Rd = get_bits(opcode, 15, 12);
    int  imm5 = get_bits(opcode, 11,  7);
    int  type = get_bits(opcode,  6,  5);
    int    Rm = get_bits(opcode,  3,  0);
    int shift_n = 0;
    int setflags = 0;
    int shift_t = 0;
    int m = 0;
    int d = 0;

    if (unlikely(((Rd == 15) && (S == 1)))) {
        return SeeInstruction("SUBS PC, LR and related instructions");
    }
    d = UInt(Rd);
    m = UInt(Rm);
    setflags = (S == 1);
    std::tie(shift_t, shift_n) = DecodeImmShift(type, imm5);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = sub_sp_minus_register;
    ins.m_to_string = decode_sub_sp_minus_register_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_sub_sp_minus_register_a1";
    ins.encoding = encoding;
    ins.shift_n = shift_n;
    ins.setflags = setflags;
    ins.shift_t = shift_t;
    ins.m = m;
    ins.d = d;
    ins.cond = cond;
    ins.type = type;

    return ins;
}

ARMInstruction ARMDecoder::decode_svc_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  imm8 = get_bits(opcode,  7,  0);
    int imm32 = 0;

    imm32 = ZeroExtend(imm8, 32);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = svc;
    ins.m_to_string = decode_svc_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_svc_t1";
    ins.encoding = encoding;
    ins.imm32 = imm32;

    return ins;
}

ARMInstruction ARMDecoder::decode_svc_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int imm24 = get_bits(opcode, 23,  0);
    int imm32 = 0;

    imm32 = ZeroExtend(imm24, 32);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = svc;
    ins.m_to_string = decode_svc_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_svc_a1";
    ins.encoding = encoding;
    ins.imm32 = imm32;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_swp_swpb_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     B = get_bit(opcode, 22);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int   Rt2 = get_bits(opcode,  3,  0);
    int size = 0;
    int t2 = 0;
    int t = 0;
    int n = 0;

    t = UInt(Rt);
    t2 = UInt(Rt2);
    n = UInt(Rn);
    size = (((B == 1)) ? 1 : 4);
    if (unlikely((((((t == 15) || (t2 == 15)) || (n == 15)) || (n == t)) || (n == t2)))) {
        return UnpredictableInstruction("Reason: (((((t == 15) || (t2 == 15)) || (n == 15)) || (n == t)) || (n == t2))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = swp_swpb;
    ins.m_to_string = decode_swp_swpb_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_swp_swpb_a1";
    ins.encoding = encoding;
    ins.size = size;
    ins.t2 = t2;
    ins.t = t;
    ins.n = n;
    ins.cond = cond;
    ins.B = B;

    return ins;
}

ARMInstruction ARMDecoder::decode_sxtab_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 11,  8);
    int rotate = get_bits(opcode,  5,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int rotation = 0;
    int m = 0;
    int d = 0;
    int n = 0;

    if (unlikely((Rn == 15))) {
        return SeeInstruction("SXTB");
    }
    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    rotation = UInt(Concatenate(rotate, 0, 3));
    if (unlikely((((d == 13 || d == 15) || (n == 13)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 13 || d == 15) || (n == 13)) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = sxtab;
    ins.m_to_string = decode_sxtab_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_sxtab_t1";
    ins.encoding = encoding;
    ins.rotation = rotation;
    ins.m = m;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_sxtab_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int rotate = get_bits(opcode, 11, 10);
    int    Rm = get_bits(opcode,  3,  0);
    int rotation = 0;
    int m = 0;
    int d = 0;
    int n = 0;

    if (unlikely((Rn == 15))) {
        return SeeInstruction("SXTB");
    }
    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    rotation = UInt(Concatenate(rotate, 0, 3));
    if (unlikely(((d == 15) || (m == 15)))) {
        return UnpredictableInstruction("Reason: ((d == 15) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = sxtab;
    ins.m_to_string = decode_sxtab_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_sxtab_a1";
    ins.encoding = encoding;
    ins.rotation = rotation;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_sxtab16_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 11,  8);
    int rotate = get_bits(opcode,  5,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int rotation = 0;
    int m = 0;
    int d = 0;
    int n = 0;

    if (unlikely((Rn == 15))) {
        return SeeInstruction("SXTB16");
    }
    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    rotation = UInt(Concatenate(rotate, 0, 3));
    if (unlikely((((d == 13 || d == 15) || (n == 13)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 13 || d == 15) || (n == 13)) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = sxtab16;
    ins.m_to_string = decode_sxtab16_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_sxtab16_t1";
    ins.encoding = encoding;
    ins.rotation = rotation;
    ins.m = m;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_sxtab16_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int rotate = get_bits(opcode, 11, 10);
    int    Rm = get_bits(opcode,  3,  0);
    int rotation = 0;
    int m = 0;
    int d = 0;
    int n = 0;

    if (unlikely((Rn == 15))) {
        return SeeInstruction("SXTB16");
    }
    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    rotation = UInt(Concatenate(rotate, 0, 3));
    if (unlikely(((d == 15) || (m == 15)))) {
        return UnpredictableInstruction("Reason: ((d == 15) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = sxtab16;
    ins.m_to_string = decode_sxtab16_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_sxtab16_a1";
    ins.encoding = encoding;
    ins.rotation = rotation;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_sxtah_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 11,  8);
    int rotate = get_bits(opcode,  5,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int rotation = 0;
    int m = 0;
    int d = 0;
    int n = 0;

    if (unlikely((Rn == 15))) {
        return SeeInstruction("SXTH");
    }
    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    rotation = UInt(Concatenate(rotate, 0, 3));
    if (unlikely((((d == 13 || d == 15) || (n == 13)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 13 || d == 15) || (n == 13)) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = sxtah;
    ins.m_to_string = decode_sxtah_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_sxtah_t1";
    ins.encoding = encoding;
    ins.rotation = rotation;
    ins.m = m;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_sxtah_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int rotate = get_bits(opcode, 11, 10);
    int    Rm = get_bits(opcode,  3,  0);
    int rotation = 0;
    int m = 0;
    int d = 0;
    int n = 0;

    if (unlikely((Rn == 15))) {
        return SeeInstruction("SXTH");
    }
    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    rotation = UInt(Concatenate(rotate, 0, 3));
    if (unlikely(((d == 15) || (m == 15)))) {
        return UnpredictableInstruction("Reason: ((d == 15) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = sxtah;
    ins.m_to_string = decode_sxtah_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_sxtah_a1";
    ins.encoding = encoding;
    ins.rotation = rotation;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_sxtb_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rm = get_bits(opcode,  5,  3);
    int    Rd = get_bits(opcode,  2,  0);
    int rotation = 0;
    int m = 0;
    int d = 0;

    d = UInt(Rd);
    m = UInt(Rm);
    rotation = 0;
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = sxtb;
    ins.m_to_string = decode_sxtb_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_sxtb_t1";
    ins.encoding = encoding;
    ins.rotation = rotation;
    ins.m = m;
    ins.d = d;

    return ins;
}

ARMInstruction ARMDecoder::decode_sxtb_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rd = get_bits(opcode, 11,  8);
    int rotate = get_bits(opcode,  5,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int rotation = 0;
    int m = 0;
    int d = 0;

    d = UInt(Rd);
    m = UInt(Rm);
    rotation = UInt(Concatenate(rotate, 0, 3));
    if (unlikely(((d == 13 || d == 15) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: ((d == 13 || d == 15) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = sxtb;
    ins.m_to_string = decode_sxtb_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_sxtb_t2";
    ins.encoding = encoding;
    ins.rotation = rotation;
    ins.m = m;
    ins.d = d;

    return ins;
}

ARMInstruction ARMDecoder::decode_sxtb_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rd = get_bits(opcode, 15, 12);
    int rotate = get_bits(opcode, 11, 10);
    int    Rm = get_bits(opcode,  3,  0);
    int rotation = 0;
    int m = 0;
    int d = 0;

    d = UInt(Rd);
    m = UInt(Rm);
    rotation = UInt(Concatenate(rotate, 0, 3));
    if (unlikely(((d == 15) || (m == 15)))) {
        return UnpredictableInstruction("Reason: ((d == 15) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = sxtb;
    ins.m_to_string = decode_sxtb_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_sxtb_a1";
    ins.encoding = encoding;
    ins.rotation = rotation;
    ins.m = m;
    ins.d = d;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_sxtb16_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rd = get_bits(opcode, 11,  8);
    int rotate = get_bits(opcode,  5,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int rotation = 0;
    int m = 0;
    int d = 0;

    d = UInt(Rd);
    m = UInt(Rm);
    rotation = UInt(Concatenate(rotate, 0, 3));
    if (unlikely(((d == 13 || d == 15) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: ((d == 13 || d == 15) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = sxtb16;
    ins.m_to_string = decode_sxtb16_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_sxtb16_t1";
    ins.encoding = encoding;
    ins.rotation = rotation;
    ins.m = m;
    ins.d = d;

    return ins;
}

ARMInstruction ARMDecoder::decode_sxtb16_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rd = get_bits(opcode, 15, 12);
    int rotate = get_bits(opcode, 11, 10);
    int    Rm = get_bits(opcode,  3,  0);
    int rotation = 0;
    int m = 0;
    int d = 0;

    d = UInt(Rd);
    m = UInt(Rm);
    rotation = UInt(Concatenate(rotate, 0, 3));
    if (unlikely(((d == 15) || (m == 15)))) {
        return UnpredictableInstruction("Reason: ((d == 15) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = sxtb16;
    ins.m_to_string = decode_sxtb16_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_sxtb16_a1";
    ins.encoding = encoding;
    ins.rotation = rotation;
    ins.m = m;
    ins.d = d;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_sxth_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rm = get_bits(opcode,  5,  3);
    int    Rd = get_bits(opcode,  2,  0);
    int rotation = 0;
    int m = 0;
    int d = 0;

    d = UInt(Rd);
    m = UInt(Rm);
    rotation = 0;
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = sxth;
    ins.m_to_string = decode_sxth_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_sxth_t1";
    ins.encoding = encoding;
    ins.rotation = rotation;
    ins.m = m;
    ins.d = d;

    return ins;
}

ARMInstruction ARMDecoder::decode_sxth_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rd = get_bits(opcode, 11,  8);
    int rotate = get_bits(opcode,  5,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int rotation = 0;
    int m = 0;
    int d = 0;

    d = UInt(Rd);
    m = UInt(Rm);
    rotation = UInt(Concatenate(rotate, 0, 3));
    if (unlikely(((d == 13 || d == 15) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: ((d == 13 || d == 15) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = sxth;
    ins.m_to_string = decode_sxth_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_sxth_t2";
    ins.encoding = encoding;
    ins.rotation = rotation;
    ins.m = m;
    ins.d = d;

    return ins;
}

ARMInstruction ARMDecoder::decode_sxth_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rd = get_bits(opcode, 15, 12);
    int rotate = get_bits(opcode, 11, 10);
    int    Rm = get_bits(opcode,  3,  0);
    int rotation = 0;
    int m = 0;
    int d = 0;

    d = UInt(Rd);
    m = UInt(Rm);
    rotation = UInt(Concatenate(rotate, 0, 3));
    if (unlikely(((d == 15) || (m == 15)))) {
        return UnpredictableInstruction("Reason: ((d == 15) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = sxth;
    ins.m_to_string = decode_sxth_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_sxth_a1";
    ins.encoding = encoding;
    ins.rotation = rotation;
    ins.m = m;
    ins.d = d;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_tbb_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int is_tbh = 0;
    int n = 0;

    n = UInt(Rn);
    m = UInt(Rm);
    is_tbh = 0;
    if (unlikely(((n == 13) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: ((n == 13) || (m == 13 || m == 15))");
    }
    if (unlikely((InITBlock() && !LastInITBlock()))) {
        return UnpredictableInstruction("Reason: (InITBlock() && !LastInITBlock())");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = tbb;
    ins.m_to_string = decode_tbb_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_tbb_t1";
    ins.encoding = encoding;
    ins.m = m;
    ins.is_tbh = is_tbh;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_tbh_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int is_tbh = 0;
    int n = 0;

    n = UInt(Rn);
    m = UInt(Rm);
    is_tbh = 1;
    if (unlikely(((n == 13) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: ((n == 13) || (m == 13 || m == 15))");
    }
    if (unlikely((InITBlock() && !LastInITBlock()))) {
        return UnpredictableInstruction("Reason: (InITBlock() && !LastInITBlock())");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = tbh;
    ins.m_to_string = decode_tbh_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_tbh_t1";
    ins.encoding = encoding;
    ins.m = m;
    ins.is_tbh = is_tbh;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_teq_immediate_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     i = get_bit(opcode, 26);
    int    Rn = get_bits(opcode, 19, 16);
    int  imm3 = get_bits(opcode, 14, 12);
    int  imm8 = get_bits(opcode,  7,  0);
    int imm12 = 0;
    int imm32 = 0;
    int n = 0;

    n = UInt(Rn);
    imm12 = Concatenate(Concatenate(i, imm3, 3), imm8, 8);
    imm32 = ThumbExpandImm(imm12);
    if (unlikely((n == 13 || n == 15))) {
        return UnpredictableInstruction("Reason: (n == 13 || n == 15)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = teq_immediate;
    ins.m_to_string = decode_teq_immediate_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_teq_immediate_t1";
    ins.encoding = encoding;
    ins.imm12 = imm12;
    ins.imm32 = imm32;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_teq_immediate_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rn = get_bits(opcode, 19, 16);
    int imm12 = get_bits(opcode, 11,  0);
    int imm32 = 0;
    int n = 0;

    n = UInt(Rn);
    imm32 = ARMExpandImm(imm12);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = teq_immediate;
    ins.m_to_string = decode_teq_immediate_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_teq_immediate_a1";
    ins.encoding = encoding;
    ins.imm32 = imm32;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_teq_register_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int  imm3 = get_bits(opcode, 14, 12);
    int  imm2 = get_bits(opcode,  7,  6);
    int  type = get_bits(opcode,  5,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int shift_n = 0;
    int shift_t = 0;
    int m = 0;
    int n = 0;

    n = UInt(Rn);
    m = UInt(Rm);
    std::tie(shift_t, shift_n) = DecodeImmShift(type, Concatenate(imm3, imm2, 2));
    if (unlikely(((n == 13 || n == 15) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: ((n == 13 || n == 15) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = teq_register;
    ins.m_to_string = decode_teq_register_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_teq_register_t1";
    ins.encoding = encoding;
    ins.shift_n = shift_n;
    ins.shift_t = shift_t;
    ins.m = m;
    ins.n = n;
    ins.type = type;

    return ins;
}

ARMInstruction ARMDecoder::decode_teq_register_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rn = get_bits(opcode, 19, 16);
    int  imm5 = get_bits(opcode, 11,  7);
    int  type = get_bits(opcode,  6,  5);
    int    Rm = get_bits(opcode,  3,  0);
    int shift_n = 0;
    int shift_t = 0;
    int m = 0;
    int n = 0;

    n = UInt(Rn);
    m = UInt(Rm);
    std::tie(shift_t, shift_n) = DecodeImmShift(type, imm5);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = teq_register;
    ins.m_to_string = decode_teq_register_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_teq_register_a1";
    ins.encoding = encoding;
    ins.shift_n = shift_n;
    ins.shift_t = shift_t;
    ins.m = m;
    ins.n = n;
    ins.cond = cond;
    ins.type = type;

    return ins;
}

ARMInstruction ARMDecoder::decode_teq_register_shifted_register_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rs = get_bits(opcode, 11,  8);
    int  type = get_bits(opcode,  6,  5);
    int    Rm = get_bits(opcode,  3,  0);
    int s = 0;
    int m = 0;
    int shift_t = 0;
    int n = 0;

    n = UInt(Rn);
    m = UInt(Rm);
    s = UInt(Rs);
    shift_t = DecodeRegShift(type);
    if (unlikely((((n == 15) || (m == 15)) || (s == 15)))) {
        return UnpredictableInstruction("Reason: (((n == 15) || (m == 15)) || (s == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = teq_register_shifted_register;
    ins.m_to_string = decode_teq_register_shifted_register_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_teq_register_shifted_register_a1";
    ins.encoding = encoding;
    ins.s = s;
    ins.m = m;
    ins.shift_t = shift_t;
    ins.n = n;
    ins.cond = cond;
    ins.type = type;

    return ins;
}

ARMInstruction ARMDecoder::decode_tst_immediate_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     i = get_bit(opcode, 26);
    int    Rn = get_bits(opcode, 19, 16);
    int  imm3 = get_bits(opcode, 14, 12);
    int  imm8 = get_bits(opcode,  7,  0);
    int imm12 = 0;
    int imm32 = 0;
    int n = 0;

    n = UInt(Rn);
    imm12 = Concatenate(Concatenate(i, imm3, 3), imm8, 8);
    imm32 = ThumbExpandImm(imm12);
    if (unlikely((n == 13 || n == 15))) {
        return UnpredictableInstruction("Reason: (n == 13 || n == 15)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = tst_immediate;
    ins.m_to_string = decode_tst_immediate_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_tst_immediate_t1";
    ins.encoding = encoding;
    ins.imm12 = imm12;
    ins.imm32 = imm32;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_tst_immediate_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rn = get_bits(opcode, 19, 16);
    int imm12 = get_bits(opcode, 11,  0);
    int imm32 = 0;
    int n = 0;

    n = UInt(Rn);
    imm32 = ARMExpandImm(imm12);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = tst_immediate;
    ins.m_to_string = decode_tst_immediate_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_tst_immediate_a1";
    ins.encoding = encoding;
    ins.imm32 = imm32;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_tst_register_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rm = get_bits(opcode,  5,  3);
    int    Rn = get_bits(opcode,  2,  0);
    int shift_n = 0;
    int shift_t = 0;
    int m = 0;
    int n = 0;

    n = UInt(Rn);
    m = UInt(Rm);
    shift_t = SRType_LSL, shift_n = 0;
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = tst_register;
    ins.m_to_string = decode_tst_register_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_tst_register_t1";
    ins.encoding = encoding;
    ins.shift_n = shift_n;
    ins.shift_t = shift_t;
    ins.m = m;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_tst_register_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int  imm3 = get_bits(opcode, 14, 12);
    int  imm2 = get_bits(opcode,  7,  6);
    int  type = get_bits(opcode,  5,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int shift_n = 0;
    int shift_t = 0;
    int m = 0;
    int n = 0;

    n = UInt(Rn);
    m = UInt(Rm);
    std::tie(shift_t, shift_n) = DecodeImmShift(type, Concatenate(imm3, imm2, 2));
    if (unlikely(((n == 13 || n == 15) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: ((n == 13 || n == 15) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = tst_register;
    ins.m_to_string = decode_tst_register_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_tst_register_t2";
    ins.encoding = encoding;
    ins.shift_n = shift_n;
    ins.shift_t = shift_t;
    ins.m = m;
    ins.n = n;
    ins.type = type;

    return ins;
}

ARMInstruction ARMDecoder::decode_tst_register_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rn = get_bits(opcode, 19, 16);
    int  imm5 = get_bits(opcode, 11,  7);
    int  type = get_bits(opcode,  6,  5);
    int    Rm = get_bits(opcode,  3,  0);
    int shift_n = 0;
    int shift_t = 0;
    int m = 0;
    int n = 0;

    n = UInt(Rn);
    m = UInt(Rm);
    std::tie(shift_t, shift_n) = DecodeImmShift(type, imm5);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = tst_register;
    ins.m_to_string = decode_tst_register_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_tst_register_a1";
    ins.encoding = encoding;
    ins.shift_n = shift_n;
    ins.shift_t = shift_t;
    ins.m = m;
    ins.n = n;
    ins.cond = cond;
    ins.type = type;

    return ins;
}

ARMInstruction ARMDecoder::decode_tst_register_shifted_register_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rs = get_bits(opcode, 11,  8);
    int  type = get_bits(opcode,  6,  5);
    int    Rm = get_bits(opcode,  3,  0);
    int s = 0;
    int m = 0;
    int shift_t = 0;
    int n = 0;

    n = UInt(Rn);
    m = UInt(Rm);
    s = UInt(Rs);
    shift_t = DecodeRegShift(type);
    if (unlikely((((n == 15) || (m == 15)) || (s == 15)))) {
        return UnpredictableInstruction("Reason: (((n == 15) || (m == 15)) || (s == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = tst_register_shifted_register;
    ins.m_to_string = decode_tst_register_shifted_register_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_tst_register_shifted_register_a1";
    ins.encoding = encoding;
    ins.s = s;
    ins.m = m;
    ins.shift_t = shift_t;
    ins.n = n;
    ins.cond = cond;
    ins.type = type;

    return ins;
}

ARMInstruction ARMDecoder::decode_uadd16_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 11,  8);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = uadd16;
    ins.m_to_string = decode_uadd16_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_uadd16_t1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_uadd16_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 15) || (n == 15)) || (m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 15) || (n == 15)) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = uadd16;
    ins.m_to_string = decode_uadd16_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_uadd16_a1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_uadd8_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 11,  8);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = uadd8;
    ins.m_to_string = decode_uadd8_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_uadd8_t1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_uadd8_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 15) || (n == 15)) || (m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 15) || (n == 15)) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = uadd8;
    ins.m_to_string = decode_uadd8_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_uadd8_a1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_uasx_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 11,  8);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = uasx;
    ins.m_to_string = decode_uasx_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_uasx_t1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_uasx_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 15) || (n == 15)) || (m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 15) || (n == 15)) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = uasx;
    ins.m_to_string = decode_uasx_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_uasx_a1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_ubfx_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int  imm3 = get_bits(opcode, 14, 12);
    int    Rd = get_bits(opcode, 11,  8);
    int  imm2 = get_bits(opcode,  7,  6);
    int widthm1 = get_bits(opcode,  4,  0);
    int widthminus1 = 0;
    int d = 0;
    int lsbit = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    lsbit = UInt(Concatenate(imm3, imm2, 2));
    widthminus1 = UInt(widthm1);
    if (unlikely(((d == 13 || d == 15) || (n == 13 || n == 15)))) {
        return UnpredictableInstruction("Reason: ((d == 13 || d == 15) || (n == 13 || n == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ubfx;
    ins.m_to_string = decode_ubfx_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ubfx_t1";
    ins.encoding = encoding;
    ins.widthminus1 = widthminus1;
    ins.d = d;
    ins.lsbit = lsbit;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_ubfx_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int widthm1 = get_bits(opcode, 20, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int   lsb = get_bits(opcode, 11,  7);
    int    Rn = get_bits(opcode,  3,  0);
    int widthminus1 = 0;
    int d = 0;
    int lsbit = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    lsbit = UInt(lsb);
    widthminus1 = UInt(widthm1);
    if (unlikely(((d == 15) || (n == 15)))) {
        return UnpredictableInstruction("Reason: ((d == 15) || (n == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ubfx;
    ins.m_to_string = decode_ubfx_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ubfx_a1";
    ins.encoding = encoding;
    ins.widthminus1 = widthminus1;
    ins.d = d;
    ins.lsbit = lsbit;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_udf_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  imm8 = get_bits(opcode,  7,  0);
    int imm32 = 0;

    imm32 = ZeroExtend(imm8, 32);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = udf;
    ins.m_to_string = decode_udf_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_udf_t1";
    ins.encoding = encoding;
    ins.imm32 = imm32;

    return ins;
}

ARMInstruction ARMDecoder::decode_udf_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  imm4 = get_bits(opcode, 19, 16);
    int imm12 = get_bits(opcode, 11,  0);
    int imm32 = 0;

    imm32 = ZeroExtend(Concatenate(imm4, imm12, 12), 32);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = udf;
    ins.m_to_string = decode_udf_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_udf_t2";
    ins.encoding = encoding;
    ins.imm32 = imm32;

    return ins;
}

ARMInstruction ARMDecoder::decode_udf_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int imm12 = get_bits(opcode, 19,  8);
    int  imm4 = get_bits(opcode,  3,  0);
    int imm32 = 0;

    imm32 = ZeroExtend(Concatenate(imm12, imm4, 4), 32);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = udf;
    ins.m_to_string = decode_udf_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_udf_a1";
    ins.encoding = encoding;
    ins.imm32 = imm32;

    return ins;
}

ARMInstruction ARMDecoder::decode_udiv_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 11,  8);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = udiv;
    ins.m_to_string = decode_udiv_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_udiv_t1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_udiv_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rd = get_bits(opcode, 19, 16);
    int    Rm = get_bits(opcode, 11,  8);
    int    Rn = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 15) || (n == 15)) || (m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 15) || (n == 15)) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = udiv;
    ins.m_to_string = decode_udiv_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_udiv_a1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_uhadd16_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 11,  8);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = uhadd16;
    ins.m_to_string = decode_uhadd16_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_uhadd16_t1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_uhadd16_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 15) || (n == 15)) || (m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 15) || (n == 15)) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = uhadd16;
    ins.m_to_string = decode_uhadd16_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_uhadd16_a1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_uhadd8_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 11,  8);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = uhadd8;
    ins.m_to_string = decode_uhadd8_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_uhadd8_t1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_uhadd8_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 15) || (n == 15)) || (m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 15) || (n == 15)) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = uhadd8;
    ins.m_to_string = decode_uhadd8_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_uhadd8_a1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_uhasx_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 11,  8);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = uhasx;
    ins.m_to_string = decode_uhasx_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_uhasx_t1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_uhasx_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 15) || (n == 15)) || (m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 15) || (n == 15)) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = uhasx;
    ins.m_to_string = decode_uhasx_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_uhasx_a1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_uhsax_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 11,  8);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = uhsax;
    ins.m_to_string = decode_uhsax_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_uhsax_t1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_uhsax_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 15) || (n == 15)) || (m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 15) || (n == 15)) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = uhsax;
    ins.m_to_string = decode_uhsax_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_uhsax_a1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_uhsub16_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 11,  8);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = uhsub16;
    ins.m_to_string = decode_uhsub16_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_uhsub16_t1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_uhsub16_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 15) || (n == 15)) || (m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 15) || (n == 15)) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = uhsub16;
    ins.m_to_string = decode_uhsub16_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_uhsub16_a1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_uhsub8_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 11,  8);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = uhsub8;
    ins.m_to_string = decode_uhsub8_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_uhsub8_t1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_uhsub8_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 15) || (n == 15)) || (m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 15) || (n == 15)) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = uhsub8;
    ins.m_to_string = decode_uhsub8_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_uhsub8_a1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_umaal_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int  RdLo = get_bits(opcode, 15, 12);
    int  RdHi = get_bits(opcode, 11,  8);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int dLo = 0;
    int dHi = 0;
    int n = 0;

    dLo = UInt(RdLo);
    dHi = UInt(RdHi);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely(((((dLo == 13 || dLo == 15) || (dHi == 13 || dHi == 15)) || (n == 13 || n == 15)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: ((((dLo == 13 || dLo == 15) || (dHi == 13 || dHi == 15)) || (n == 13 || n == 15)) || (m == 13 || m == 15))");
    }
    if (unlikely((dHi == dLo))) {
        return UnpredictableInstruction("Reason: (dHi == dLo)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = umaal;
    ins.m_to_string = decode_umaal_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_umaal_t1";
    ins.encoding = encoding;
    ins.m = m;
    ins.dLo = dLo;
    ins.dHi = dHi;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_umaal_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int  RdHi = get_bits(opcode, 19, 16);
    int  RdLo = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode, 11,  8);
    int    Rn = get_bits(opcode,  3,  0);
    int m = 0;
    int dLo = 0;
    int dHi = 0;
    int n = 0;

    dLo = UInt(RdLo);
    dHi = UInt(RdHi);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely(((((dLo == 15) || (dHi == 15)) || (n == 15)) || (m == 15)))) {
        return UnpredictableInstruction("Reason: ((((dLo == 15) || (dHi == 15)) || (n == 15)) || (m == 15))");
    }
    if (unlikely((dHi == dLo))) {
        return UnpredictableInstruction("Reason: (dHi == dLo)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = umaal;
    ins.m_to_string = decode_umaal_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_umaal_a1";
    ins.encoding = encoding;
    ins.m = m;
    ins.dLo = dLo;
    ins.dHi = dHi;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_umlal_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int  RdLo = get_bits(opcode, 15, 12);
    int  RdHi = get_bits(opcode, 11,  8);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int dLo = 0;
    int setflags = 0;
    int dHi = 0;
    int n = 0;

    dLo = UInt(RdLo);
    dHi = UInt(RdHi);
    n = UInt(Rn);
    m = UInt(Rm);
    setflags = false;
    if (unlikely(((((dLo == 13 || dLo == 15) || (dHi == 13 || dHi == 15)) || (n == 13 || n == 15)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: ((((dLo == 13 || dLo == 15) || (dHi == 13 || dHi == 15)) || (n == 13 || n == 15)) || (m == 13 || m == 15))");
    }
    if (unlikely((dHi == dLo))) {
        return UnpredictableInstruction("Reason: (dHi == dLo)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = umlal;
    ins.m_to_string = decode_umlal_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_umlal_t1";
    ins.encoding = encoding;
    ins.m = m;
    ins.dLo = dLo;
    ins.setflags = setflags;
    ins.dHi = dHi;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_umlal_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     S = get_bit(opcode, 20);
    int  RdHi = get_bits(opcode, 19, 16);
    int  RdLo = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode, 11,  8);
    int    Rn = get_bits(opcode,  3,  0);
    int m = 0;
    int dLo = 0;
    int setflags = 0;
    int dHi = 0;
    int n = 0;

    dLo = UInt(RdLo);
    dHi = UInt(RdHi);
    n = UInt(Rn);
    m = UInt(Rm);
    setflags = (S == 1);
    if (unlikely(((((dLo == 15) || (dHi == 15)) || (n == 15)) || (m == 15)))) {
        return UnpredictableInstruction("Reason: ((((dLo == 15) || (dHi == 15)) || (n == 15)) || (m == 15))");
    }
    if (unlikely((dHi == dLo))) {
        return UnpredictableInstruction("Reason: (dHi == dLo)");
    }
    if (unlikely(((ArchVersion() < 6) && ((dHi == n) || (dLo == n))))) {
        return UnpredictableInstruction("Reason: ((ArchVersion() < 6) && ((dHi == n) || (dLo == n)))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = umlal;
    ins.m_to_string = decode_umlal_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_umlal_a1";
    ins.encoding = encoding;
    ins.m = m;
    ins.dLo = dLo;
    ins.setflags = setflags;
    ins.dHi = dHi;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_umull_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int  RdLo = get_bits(opcode, 15, 12);
    int  RdHi = get_bits(opcode, 11,  8);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int dLo = 0;
    int setflags = 0;
    int dHi = 0;
    int n = 0;

    dLo = UInt(RdLo);
    dHi = UInt(RdHi);
    n = UInt(Rn);
    m = UInt(Rm);
    setflags = false;
    if (unlikely(((((dLo == 13 || dLo == 15) || (dHi == 13 || dHi == 15)) || (n == 13 || n == 15)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: ((((dLo == 13 || dLo == 15) || (dHi == 13 || dHi == 15)) || (n == 13 || n == 15)) || (m == 13 || m == 15))");
    }
    if (unlikely((dHi == dLo))) {
        return UnpredictableInstruction("Reason: (dHi == dLo)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = umull;
    ins.m_to_string = decode_umull_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_umull_t1";
    ins.encoding = encoding;
    ins.m = m;
    ins.dLo = dLo;
    ins.setflags = setflags;
    ins.dHi = dHi;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_umull_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     S = get_bit(opcode, 20);
    int  RdHi = get_bits(opcode, 19, 16);
    int  RdLo = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode, 11,  8);
    int    Rn = get_bits(opcode,  3,  0);
    int m = 0;
    int dLo = 0;
    int setflags = 0;
    int dHi = 0;
    int n = 0;

    dLo = UInt(RdLo);
    dHi = UInt(RdHi);
    n = UInt(Rn);
    m = UInt(Rm);
    setflags = (S == 1);
    if (unlikely(((((dLo == 15) || (dHi == 15)) || (n == 15)) || (m == 15)))) {
        return UnpredictableInstruction("Reason: ((((dLo == 15) || (dHi == 15)) || (n == 15)) || (m == 15))");
    }
    if (unlikely((dHi == dLo))) {
        return UnpredictableInstruction("Reason: (dHi == dLo)");
    }
    if (unlikely(((ArchVersion() < 6) && ((dHi == n) || (dLo == n))))) {
        return UnpredictableInstruction("Reason: ((ArchVersion() < 6) && ((dHi == n) || (dLo == n)))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = umull;
    ins.m_to_string = decode_umull_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_umull_a1";
    ins.encoding = encoding;
    ins.m = m;
    ins.dLo = dLo;
    ins.setflags = setflags;
    ins.dHi = dHi;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_uqadd16_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 11,  8);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = uqadd16;
    ins.m_to_string = decode_uqadd16_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_uqadd16_t1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_uqadd16_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 15) || (n == 15)) || (m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 15) || (n == 15)) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = uqadd16;
    ins.m_to_string = decode_uqadd16_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_uqadd16_a1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_uqadd8_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 11,  8);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = uqadd8;
    ins.m_to_string = decode_uqadd8_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_uqadd8_t1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_uqadd8_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 15) || (n == 15)) || (m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 15) || (n == 15)) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = uqadd8;
    ins.m_to_string = decode_uqadd8_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_uqadd8_a1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_uqasx_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 11,  8);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = uqasx;
    ins.m_to_string = decode_uqasx_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_uqasx_t1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_uqasx_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 15) || (n == 15)) || (m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 15) || (n == 15)) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = uqasx;
    ins.m_to_string = decode_uqasx_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_uqasx_a1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_uqsax_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 11,  8);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = uqsax;
    ins.m_to_string = decode_uqsax_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_uqsax_t1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_uqsax_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 15) || (n == 15)) || (m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 15) || (n == 15)) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = uqsax;
    ins.m_to_string = decode_uqsax_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_uqsax_a1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_uqsub16_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 11,  8);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = uqsub16;
    ins.m_to_string = decode_uqsub16_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_uqsub16_t1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_uqsub16_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 15) || (n == 15)) || (m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 15) || (n == 15)) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = uqsub16;
    ins.m_to_string = decode_uqsub16_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_uqsub16_a1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_uqsub8_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 11,  8);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = uqsub8;
    ins.m_to_string = decode_uqsub8_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_uqsub8_t1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_uqsub8_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 15) || (n == 15)) || (m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 15) || (n == 15)) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = uqsub8;
    ins.m_to_string = decode_uqsub8_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_uqsub8_a1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_usad8_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 11,  8);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = usad8;
    ins.m_to_string = decode_usad8_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_usad8_t1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_usad8_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rd = get_bits(opcode, 19, 16);
    int    Rm = get_bits(opcode, 11,  8);
    int    Rn = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 15) || (n == 15)) || (m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 15) || (n == 15)) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = usad8;
    ins.m_to_string = decode_usad8_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_usad8_a1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_usada8_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Ra = get_bits(opcode, 15, 12);
    int    Rd = get_bits(opcode, 11,  8);
    int    Rm = get_bits(opcode,  3,  0);
    int a = 0;
    int m = 0;
    int d = 0;
    int n = 0;

    if (unlikely((Ra == 15))) {
        return SeeInstruction("USAD8");
    }
    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    a = UInt(Ra);
    if (unlikely(((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)) || (a == 13)))) {
        return UnpredictableInstruction("Reason: ((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)) || (a == 13))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = usada8;
    ins.m_to_string = decode_usada8_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_usada8_t1";
    ins.encoding = encoding;
    ins.a = a;
    ins.m = m;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_usada8_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rd = get_bits(opcode, 19, 16);
    int    Ra = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode, 11,  8);
    int    Rn = get_bits(opcode,  3,  0);
    int a = 0;
    int m = 0;
    int d = 0;
    int n = 0;

    if (unlikely((Ra == 15))) {
        return SeeInstruction("USAD8");
    }
    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    a = UInt(Ra);
    if (unlikely((((d == 15) || (n == 15)) || (m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 15) || (n == 15)) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = usada8;
    ins.m_to_string = decode_usada8_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_usada8_a1";
    ins.encoding = encoding;
    ins.a = a;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_usat_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    sh = get_bit(opcode, 21);
    int    Rn = get_bits(opcode, 19, 16);
    int  imm3 = get_bits(opcode, 14, 12);
    int    Rd = get_bits(opcode, 11,  8);
    int  imm2 = get_bits(opcode,  7,  6);
    int sat_imm = get_bits(opcode,  4,  0);
    int shift_n = 0;
    int shift_t = 0;
    int d = 0;
    int saturate_to = 0;
    int n = 0;

    if (unlikely(((sh == 1) && (Concatenate(imm3, imm2, 2) == 0)))) {
        return SeeInstruction("USAT16");
    }
    d = UInt(Rd);
    n = UInt(Rn);
    saturate_to = UInt(sat_imm);
    std::tie(shift_t, shift_n) = DecodeImmShift(Concatenate(sh, 0, 1), Concatenate(imm3, imm2, 2));
    if (unlikely(((d == 13 || d == 15) || (n == 13 || n == 15)))) {
        return UnpredictableInstruction("Reason: ((d == 13 || d == 15) || (n == 13 || n == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = usat;
    ins.m_to_string = decode_usat_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_usat_t1";
    ins.encoding = encoding;
    ins.shift_n = shift_n;
    ins.shift_t = shift_t;
    ins.d = d;
    ins.saturate_to = saturate_to;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_usat_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int sat_imm = get_bits(opcode, 20, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int  imm5 = get_bits(opcode, 11,  7);
    int    sh = get_bit(opcode,  6);
    int    Rn = get_bits(opcode,  3,  0);
    int shift_n = 0;
    int shift_t = 0;
    int d = 0;
    int saturate_to = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    saturate_to = UInt(sat_imm);
    std::tie(shift_t, shift_n) = DecodeImmShift(Concatenate(sh, 0, 1), imm5);
    if (unlikely(((d == 15) || (n == 15)))) {
        return UnpredictableInstruction("Reason: ((d == 15) || (n == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = usat;
    ins.m_to_string = decode_usat_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_usat_a1";
    ins.encoding = encoding;
    ins.shift_n = shift_n;
    ins.shift_t = shift_t;
    ins.d = d;
    ins.saturate_to = saturate_to;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_usat16_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 11,  8);
    int sat_imm = get_bits(opcode,  3,  0);
    int d = 0;
    int saturate_to = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    saturate_to = UInt(sat_imm);
    if (unlikely(((d == 13 || d == 15) || (n == 13 || n == 15)))) {
        return UnpredictableInstruction("Reason: ((d == 13 || d == 15) || (n == 13 || n == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = usat16;
    ins.m_to_string = decode_usat16_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_usat16_t1";
    ins.encoding = encoding;
    ins.d = d;
    ins.saturate_to = saturate_to;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_usat16_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int sat_imm = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int    Rn = get_bits(opcode,  3,  0);
    int d = 0;
    int saturate_to = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    saturate_to = UInt(sat_imm);
    if (unlikely(((d == 15) || (n == 15)))) {
        return UnpredictableInstruction("Reason: ((d == 15) || (n == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = usat16;
    ins.m_to_string = decode_usat16_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_usat16_a1";
    ins.encoding = encoding;
    ins.d = d;
    ins.saturate_to = saturate_to;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_usax_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 11,  8);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = usax;
    ins.m_to_string = decode_usax_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_usax_t1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_usax_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 15) || (n == 15)) || (m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 15) || (n == 15)) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = usax;
    ins.m_to_string = decode_usax_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_usax_a1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_usub16_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 11,  8);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = usub16;
    ins.m_to_string = decode_usub16_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_usub16_t1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_usub16_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 15) || (n == 15)) || (m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 15) || (n == 15)) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = usub16;
    ins.m_to_string = decode_usub16_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_usub16_a1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_usub8_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 11,  8);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 13 || d == 15) || (n == 13 || n == 15)) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = usub8;
    ins.m_to_string = decode_usub8_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_usub8_t1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_usub8_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int    Rm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int n = 0;

    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    if (unlikely((((d == 15) || (n == 15)) || (m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 15) || (n == 15)) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = usub8;
    ins.m_to_string = decode_usub8_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_usub8_a1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_uxtab_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 11,  8);
    int rotate = get_bits(opcode,  5,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int rotation = 0;
    int m = 0;
    int d = 0;
    int n = 0;

    if (unlikely((Rn == 15))) {
        return SeeInstruction("UXTB");
    }
    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    rotation = UInt(Concatenate(rotate, 0, 3));
    if (unlikely((((d == 13 || d == 15) || (n == 13)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 13 || d == 15) || (n == 13)) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = uxtab;
    ins.m_to_string = decode_uxtab_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_uxtab_t1";
    ins.encoding = encoding;
    ins.rotation = rotation;
    ins.m = m;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_uxtab_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int rotate = get_bits(opcode, 11, 10);
    int    Rm = get_bits(opcode,  3,  0);
    int rotation = 0;
    int m = 0;
    int d = 0;
    int n = 0;

    if (unlikely((Rn == 15))) {
        return SeeInstruction("UXTB");
    }
    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    rotation = UInt(Concatenate(rotate, 0, 3));
    if (unlikely(((d == 15) || (m == 15)))) {
        return UnpredictableInstruction("Reason: ((d == 15) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = uxtab;
    ins.m_to_string = decode_uxtab_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_uxtab_a1";
    ins.encoding = encoding;
    ins.rotation = rotation;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_uxtab16_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 11,  8);
    int rotate = get_bits(opcode,  5,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int rotation = 0;
    int m = 0;
    int d = 0;
    int n = 0;

    if (unlikely((Rn == 15))) {
        return SeeInstruction("UXTB16");
    }
    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    rotation = UInt(Concatenate(rotate, 0, 3));
    if (unlikely((((d == 13 || d == 15) || (n == 13)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 13 || d == 15) || (n == 13)) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = uxtab16;
    ins.m_to_string = decode_uxtab16_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_uxtab16_t1";
    ins.encoding = encoding;
    ins.rotation = rotation;
    ins.m = m;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_uxtab16_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int rotate = get_bits(opcode, 11, 10);
    int    Rm = get_bits(opcode,  3,  0);
    int rotation = 0;
    int m = 0;
    int d = 0;
    int n = 0;

    if (unlikely((Rn == 15))) {
        return SeeInstruction("UXTB16");
    }
    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    rotation = UInt(Concatenate(rotate, 0, 3));
    if (unlikely(((d == 15) || (m == 15)))) {
        return UnpredictableInstruction("Reason: ((d == 15) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = uxtab16;
    ins.m_to_string = decode_uxtab16_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_uxtab16_a1";
    ins.encoding = encoding;
    ins.rotation = rotation;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_uxtah_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 11,  8);
    int rotate = get_bits(opcode,  5,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int rotation = 0;
    int m = 0;
    int d = 0;
    int n = 0;

    if (unlikely((Rn == 15))) {
        return SeeInstruction("UXTH");
    }
    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    rotation = UInt(Concatenate(rotate, 0, 3));
    if (unlikely((((d == 13 || d == 15) || (n == 13)) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: (((d == 13 || d == 15) || (n == 13)) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = uxtah;
    ins.m_to_string = decode_uxtah_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_uxtah_t1";
    ins.encoding = encoding;
    ins.rotation = rotation;
    ins.m = m;
    ins.d = d;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_uxtah_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rn = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int rotate = get_bits(opcode, 11, 10);
    int    Rm = get_bits(opcode,  3,  0);
    int rotation = 0;
    int m = 0;
    int d = 0;
    int n = 0;

    if (unlikely((Rn == 15))) {
        return SeeInstruction("UXTH");
    }
    d = UInt(Rd);
    n = UInt(Rn);
    m = UInt(Rm);
    rotation = UInt(Concatenate(rotate, 0, 3));
    if (unlikely(((d == 15) || (m == 15)))) {
        return UnpredictableInstruction("Reason: ((d == 15) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = uxtah;
    ins.m_to_string = decode_uxtah_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_uxtah_a1";
    ins.encoding = encoding;
    ins.rotation = rotation;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_uxtb_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rm = get_bits(opcode,  5,  3);
    int    Rd = get_bits(opcode,  2,  0);
    int rotation = 0;
    int m = 0;
    int d = 0;

    d = UInt(Rd);
    m = UInt(Rm);
    rotation = 0;
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = uxtb;
    ins.m_to_string = decode_uxtb_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_uxtb_t1";
    ins.encoding = encoding;
    ins.rotation = rotation;
    ins.m = m;
    ins.d = d;

    return ins;
}

ARMInstruction ARMDecoder::decode_uxtb_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rd = get_bits(opcode, 11,  8);
    int rotate = get_bits(opcode,  5,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int rotation = 0;
    int m = 0;
    int d = 0;

    d = UInt(Rd);
    m = UInt(Rm);
    rotation = UInt(Concatenate(rotate, 0, 3));
    if (unlikely(((d == 13 || d == 15) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: ((d == 13 || d == 15) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = uxtb;
    ins.m_to_string = decode_uxtb_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_uxtb_t2";
    ins.encoding = encoding;
    ins.rotation = rotation;
    ins.m = m;
    ins.d = d;

    return ins;
}

ARMInstruction ARMDecoder::decode_uxtb_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rd = get_bits(opcode, 15, 12);
    int rotate = get_bits(opcode, 11, 10);
    int    Rm = get_bits(opcode,  3,  0);
    int rotation = 0;
    int m = 0;
    int d = 0;

    d = UInt(Rd);
    m = UInt(Rm);
    rotation = UInt(Concatenate(rotate, 0, 3));
    if (unlikely(((d == 15) || (m == 15)))) {
        return UnpredictableInstruction("Reason: ((d == 15) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = uxtb;
    ins.m_to_string = decode_uxtb_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_uxtb_a1";
    ins.encoding = encoding;
    ins.rotation = rotation;
    ins.m = m;
    ins.d = d;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_uxtb16_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rd = get_bits(opcode, 11,  8);
    int rotate = get_bits(opcode,  5,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int rotation = 0;
    int m = 0;
    int d = 0;

    d = UInt(Rd);
    m = UInt(Rm);
    rotation = UInt(Concatenate(rotate, 0, 3));
    if (unlikely(((d == 13 || d == 15) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: ((d == 13 || d == 15) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = uxtb16;
    ins.m_to_string = decode_uxtb16_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_uxtb16_t1";
    ins.encoding = encoding;
    ins.rotation = rotation;
    ins.m = m;
    ins.d = d;

    return ins;
}

ARMInstruction ARMDecoder::decode_uxtb16_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rd = get_bits(opcode, 15, 12);
    int rotate = get_bits(opcode, 11, 10);
    int    Rm = get_bits(opcode,  3,  0);
    int rotation = 0;
    int m = 0;
    int d = 0;

    d = UInt(Rd);
    m = UInt(Rm);
    rotation = UInt(Concatenate(rotate, 0, 3));
    if (unlikely(((d == 15) || (m == 15)))) {
        return UnpredictableInstruction("Reason: ((d == 15) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = uxtb16;
    ins.m_to_string = decode_uxtb16_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_uxtb16_a1";
    ins.encoding = encoding;
    ins.rotation = rotation;
    ins.m = m;
    ins.d = d;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_uxth_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rm = get_bits(opcode,  5,  3);
    int    Rd = get_bits(opcode,  2,  0);
    int rotation = 0;
    int m = 0;
    int d = 0;

    d = UInt(Rd);
    m = UInt(Rm);
    rotation = 0;
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = uxth;
    ins.m_to_string = decode_uxth_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_uxth_t1";
    ins.encoding = encoding;
    ins.rotation = rotation;
    ins.m = m;
    ins.d = d;

    return ins;
}

ARMInstruction ARMDecoder::decode_uxth_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    Rd = get_bits(opcode, 11,  8);
    int rotate = get_bits(opcode,  5,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int rotation = 0;
    int m = 0;
    int d = 0;

    d = UInt(Rd);
    m = UInt(Rm);
    rotation = UInt(Concatenate(rotate, 0, 3));
    if (unlikely(((d == 13 || d == 15) || (m == 13 || m == 15)))) {
        return UnpredictableInstruction("Reason: ((d == 13 || d == 15) || (m == 13 || m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = uxth;
    ins.m_to_string = decode_uxth_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_uxth_t2";
    ins.encoding = encoding;
    ins.rotation = rotation;
    ins.m = m;
    ins.d = d;

    return ins;
}

ARMInstruction ARMDecoder::decode_uxth_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    Rd = get_bits(opcode, 15, 12);
    int rotate = get_bits(opcode, 11, 10);
    int    Rm = get_bits(opcode,  3,  0);
    int rotation = 0;
    int m = 0;
    int d = 0;

    d = UInt(Rd);
    m = UInt(Rm);
    rotation = UInt(Concatenate(rotate, 0, 3));
    if (unlikely(((d == 15) || (m == 15)))) {
        return UnpredictableInstruction("Reason: ((d == 15) || (m == 15))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = uxth;
    ins.m_to_string = decode_uxth_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_uxth_a1";
    ins.encoding = encoding;
    ins.rotation = rotation;
    ins.m = m;
    ins.d = d;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_wfe_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {

    NOP();
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = wfe;
    ins.m_to_string = decode_wfe_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_wfe_t1";
    ins.encoding = encoding;

    return ins;
}

ARMInstruction ARMDecoder::decode_wfe_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {

    NOP();
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = wfe;
    ins.m_to_string = decode_wfe_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_wfe_t2";
    ins.encoding = encoding;

    return ins;
}

ARMInstruction ARMDecoder::decode_wfe_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);

    NOP();
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = wfe;
    ins.m_to_string = decode_wfe_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_wfe_a1";
    ins.encoding = encoding;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_wfi_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {

    NOP();
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = wfi;
    ins.m_to_string = decode_wfi_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_wfi_t1";
    ins.encoding = encoding;

    return ins;
}

ARMInstruction ARMDecoder::decode_wfi_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {

    NOP();
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = wfi;
    ins.m_to_string = decode_wfi_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_wfi_t2";
    ins.encoding = encoding;

    return ins;
}

ARMInstruction ARMDecoder::decode_wfi_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);

    NOP();
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = wfi;
    ins.m_to_string = decode_wfi_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_wfi_a1";
    ins.encoding = encoding;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_yield_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {

    NOP();
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = yield;
    ins.m_to_string = decode_yield_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_yield_t1";
    ins.encoding = encoding;

    return ins;
}

ARMInstruction ARMDecoder::decode_yield_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {

    NOP();
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = yield;
    ins.m_to_string = decode_yield_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_yield_t2";
    ins.encoding = encoding;

    return ins;
}

ARMInstruction ARMDecoder::decode_yield_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);

    NOP();
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = yield;
    ins.m_to_string = decode_yield_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_yield_a1";
    ins.encoding = encoding;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_eret_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  imm8 = get_bits(opcode,  7,  0);

    if (unlikely((imm8 != 0))) {
        return SeeInstruction("SUBS PC, LR and related instructions");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = eret;
    ins.m_to_string = decode_eret_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_eret_t1";
    ins.encoding = encoding;

    return ins;
}

ARMInstruction ARMDecoder::decode_eret_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);

    NOP();
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = eret;
    ins.m_to_string = decode_eret_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_eret_a1";
    ins.encoding = encoding;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_hvc_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  imm4 = get_bits(opcode, 19, 16);
    int imm12 = get_bits(opcode, 11,  0);
    int imm32 = 0;

    if (unlikely(InITBlock())) {
        return UnpredictableInstruction("Reason: InITBlock()");
    }
    imm32 = Concatenate(imm4, imm12, 12);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = hvc;
    ins.m_to_string = decode_hvc_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_hvc_t1";
    ins.encoding = encoding;
    ins.imm32 = imm32;

    return ins;
}

ARMInstruction ARMDecoder::decode_hvc_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int imm12 = get_bits(opcode, 19,  8);
    int  imm4 = get_bits(opcode,  3,  0);
    int imm32 = 0;

    if (unlikely((cond != 14))) {
        return UnpredictableInstruction("Reason: (cond != 14)");
    }
    imm32 = Concatenate(imm12, imm4, 4);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = hvc;
    ins.m_to_string = decode_hvc_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_hvc_a1";
    ins.encoding = encoding;
    ins.imm32 = imm32;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldm_exception_return_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     P = get_bit(opcode, 24);
    int     U = get_bit(opcode, 23);
    int     W = get_bit(opcode, 21);
    int    Rn = get_bits(opcode, 19, 16);
    int register_list = get_bits(opcode, 14,  0);
    int wback = 0;
    int registers = 0;
    int wordhigher = 0;
    int increment = 0;
    int n = 0;

    n = UInt(Rn);
    registers = register_list;
    wback = (W == 1);
    increment = (U == 1);
    wordhigher = (P == U);
    if (unlikely((n == 15))) {
        return UnpredictableInstruction("Reason: (n == 15)");
    }
    if (unlikely(((wback && (get_bit(registers, n) == 1)) && (ArchVersion() >= 7)))) {
        return UnpredictableInstruction("Reason: ((wback && (get_bit(registers, n) == 1)) && (ArchVersion() >= 7))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldm_exception_return;
    ins.m_to_string = decode_ldm_exception_return_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldm_exception_return_a1";
    ins.encoding = encoding;
    ins.wback = wback;
    ins.registers = registers;
    ins.wordhigher = wordhigher;
    ins.increment = increment;
    ins.n = n;
    ins.cond = cond;
    ins.P = P;
    ins.U = U;
    ins.W = W;

    return ins;
}

ARMInstruction ARMDecoder::decode_ldm_user_registers_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     P = get_bit(opcode, 24);
    int     U = get_bit(opcode, 23);
    int    Rn = get_bits(opcode, 19, 16);
    int register_list = get_bits(opcode, 14,  0);
    int wordhigher = 0;
    int registers = 0;
    int increment = 0;
    int n = 0;

    n = UInt(Rn);
    registers = register_list;
    increment = (U == 1);
    wordhigher = (P == U);
    if (unlikely(((n == 15) || (BitCount(registers) < 1)))) {
        return UnpredictableInstruction("Reason: ((n == 15) || (BitCount(registers) < 1))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = ldm_user_registers;
    ins.m_to_string = decode_ldm_user_registers_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_ldm_user_registers_a1";
    ins.encoding = encoding;
    ins.wordhigher = wordhigher;
    ins.registers = registers;
    ins.increment = increment;
    ins.n = n;
    ins.cond = cond;
    ins.P = P;
    ins.U = U;

    return ins;
}

ARMInstruction ARMDecoder::decode_mrs_banked_register_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     R = get_bit(opcode, 20);
    int    m1 = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 11,  8);
    int     m = get_bit(opcode,  4);
    int read_spsr = 0;
    int SYSm = 0;
    int d = 0;

    d = UInt(Rd);
    read_spsr = (R == 1);
    if (unlikely((d == 13 || d == 15))) {
        return UnpredictableInstruction("Reason: (d == 13 || d == 15)");
    }
    SYSm = Concatenate(m, m1, 4);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = mrs_banked_register;
    ins.m_to_string = decode_mrs_banked_register_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_mrs_banked_register_t1";
    ins.encoding = encoding;
    ins.read_spsr = read_spsr;
    ins.SYSm = SYSm;
    ins.d = d;

    return ins;
}

ARMInstruction ARMDecoder::decode_mrs_banked_register_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     R = get_bit(opcode, 22);
    int    m1 = get_bits(opcode, 19, 16);
    int    Rd = get_bits(opcode, 15, 12);
    int     m = get_bit(opcode,  8);
    int read_spsr = 0;
    int SYSm = 0;
    int d = 0;

    d = UInt(Rd);
    read_spsr = (R == 1);
    if (unlikely((d == 15))) {
        return UnpredictableInstruction("Reason: (d == 15)");
    }
    SYSm = Concatenate(m, m1, 4);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = mrs_banked_register;
    ins.m_to_string = decode_mrs_banked_register_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_mrs_banked_register_a1";
    ins.encoding = encoding;
    ins.read_spsr = read_spsr;
    ins.SYSm = SYSm;
    ins.d = d;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_smc_previously_smi_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  imm4 = get_bits(opcode, 19, 16);
    int imm32 = 0;

    imm32 = ZeroExtend(imm4, 32);
    if (unlikely((InITBlock() && !LastInITBlock()))) {
        return UnpredictableInstruction("Reason: (InITBlock() && !LastInITBlock())");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = smc_previously_smi;
    ins.m_to_string = decode_smc_previously_smi_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_smc_previously_smi_t1";
    ins.encoding = encoding;
    ins.imm32 = imm32;

    return ins;
}

ARMInstruction ARMDecoder::decode_smc_previously_smi_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int  imm4 = get_bits(opcode,  3,  0);
    int imm32 = 0;

    imm32 = ZeroExtend(imm4, 32);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = smc_previously_smi;
    ins.m_to_string = decode_smc_previously_smi_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_smc_previously_smi_t2";
    ins.encoding = encoding;
    ins.imm32 = imm32;
    ins.cond = cond;

    return ins;
}

ARMInstruction ARMDecoder::decode_srs_thumb_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     W = get_bit(opcode, 21);
    int  mode = get_bits(opcode,  4,  0);
    int wordhigher = 0;
    int wback = 0;
    int increment = 0;

    if (unlikely((CurrentInstrSet() == InstrSet_ThumbEE))) {
        return UnpredictableInstruction("Reason: (CurrentInstrSet() == InstrSet_ThumbEE)");
    }
    wback = (W == 1);
    increment = false;
    wordhigher = false;
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = srs_thumb;
    ins.m_to_string = decode_srs_thumb_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_srs_thumb_t1";
    ins.encoding = encoding;
    ins.wordhigher = wordhigher;
    ins.wback = wback;
    ins.increment = increment;
    ins.W = W;
    ins.mode = mode;

    return ins;
}

ARMInstruction ARMDecoder::decode_srs_thumb_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     W = get_bit(opcode, 21);
    int  mode = get_bits(opcode,  4,  0);
    int wordhigher = 0;
    int wback = 0;
    int increment = 0;

    if (unlikely((CurrentInstrSet() == InstrSet_ThumbEE))) {
        return UnpredictableInstruction("Reason: (CurrentInstrSet() == InstrSet_ThumbEE)");
    }
    wback = (W == 1);
    increment = true;
    wordhigher = false;
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = srs_thumb;
    ins.m_to_string = decode_srs_thumb_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_srs_thumb_t2";
    ins.encoding = encoding;
    ins.wordhigher = wordhigher;
    ins.wback = wback;
    ins.increment = increment;
    ins.W = W;
    ins.mode = mode;

    return ins;
}

ARMInstruction ARMDecoder::decode_srs_arm_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     P = get_bit(opcode, 24);
    int     U = get_bit(opcode, 23);
    int     W = get_bit(opcode, 21);
    int  mode = get_bits(opcode,  4,  0);
    int wordhigher = 0;
    int wback = 0;
    int increment = 0;

    wback = (W == 1);
    increment = (U == 1);
    wordhigher = (P == U);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = srs_arm;
    ins.m_to_string = decode_srs_arm_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_srs_arm_a1";
    ins.encoding = encoding;
    ins.wordhigher = wordhigher;
    ins.wback = wback;
    ins.increment = increment;
    ins.P = P;
    ins.U = U;
    ins.W = W;
    ins.mode = mode;

    return ins;
}

ARMInstruction ARMDecoder::decode_stm_user_registers_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     P = get_bit(opcode, 24);
    int     U = get_bit(opcode, 23);
    int    Rn = get_bits(opcode, 19, 16);
    int register_list = get_bits(opcode, 15,  0);
    int wordhigher = 0;
    int registers = 0;
    int increment = 0;
    int n = 0;

    n = UInt(Rn);
    registers = register_list;
    increment = (U == 1);
    wordhigher = (P == U);
    if (unlikely(((n == 15) || (BitCount(registers) < 1)))) {
        return UnpredictableInstruction("Reason: ((n == 15) || (BitCount(registers) < 1))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = stm_user_registers;
    ins.m_to_string = decode_stm_user_registers_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_stm_user_registers_a1";
    ins.encoding = encoding;
    ins.wordhigher = wordhigher;
    ins.registers = registers;
    ins.increment = increment;
    ins.n = n;
    ins.cond = cond;
    ins.P = P;
    ins.U = U;

    return ins;
}

ARMInstruction ARMDecoder::decode_subs_pc_lr_thumb_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  imm8 = get_bits(opcode,  7,  0);
    int imm32 = 0;
    int n = 0;

    if (unlikely(IsZero(imm8))) {
        return SeeInstruction("ERET");
    }
    if (unlikely((CurrentInstrSet() == InstrSet_ThumbEE))) {
        return UnpredictableInstruction("Reason: (CurrentInstrSet() == InstrSet_ThumbEE)");
    }
    if (unlikely(CurrentModeIsHyp())) {
        return UndefinedInstruction("Reason: CurrentModeIsHyp()");
    }
    n = 14;
    imm32 = ZeroExtend(imm8, 32);
    if (unlikely((InITBlock() && !LastInITBlock()))) {
        return UnpredictableInstruction("Reason: (InITBlock() && !LastInITBlock())");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = subs_pc_lr_thumb;
    ins.m_to_string = decode_subs_pc_lr_thumb_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_subs_pc_lr_thumb_t1";
    ins.encoding = encoding;
    ins.imm32 = imm32;
    ins.n = n;

    return ins;
}

ARMInstruction ARMDecoder::decode_subs_pc_lr_and_related_instructions_arm_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int opcode_ = get_bits(opcode, 24, 21);
    int    Rn = get_bits(opcode, 19, 16);
    int imm12 = get_bits(opcode, 11,  0);
    int register_form = 0;
    int imm32 = 0;
    int n = 0;

    n = UInt(Rn);
    imm32 = ARMExpandImm(imm12);
    register_form = false;
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = subs_pc_lr_and_related_instructions_arm;
    ins.m_to_string = decode_subs_pc_lr_and_related_instructions_arm_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_subs_pc_lr_and_related_instructions_arm_a1";
    ins.encoding = encoding;
    ins.register_form = register_form;
    ins.imm32 = imm32;
    ins.n = n;
    ins.cond = cond;
    ins.opcode_ = opcode_;

    return ins;
}

ARMInstruction ARMDecoder::decode_subs_pc_lr_and_related_instructions_arm_a2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int opcode_ = get_bits(opcode, 24, 21);
    int    Rn = get_bits(opcode, 19, 16);
    int  imm5 = get_bits(opcode, 11,  7);
    int  type = get_bits(opcode,  6,  5);
    int    Rm = get_bits(opcode,  3,  0);
    int shift_n = 0;
    int register_form = 0;
    int shift_t = 0;
    int m = 0;
    int n = 0;

    n = UInt(Rn);
    m = UInt(Rm);
    register_form = true;
    std::tie(shift_t, shift_n) = DecodeImmShift(type, imm5);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = subs_pc_lr_and_related_instructions_arm;
    ins.m_to_string = decode_subs_pc_lr_and_related_instructions_arm_a2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_subs_pc_lr_and_related_instructions_arm_a2";
    ins.encoding = encoding;
    ins.shift_n = shift_n;
    ins.register_form = register_form;
    ins.shift_t = shift_t;
    ins.m = m;
    ins.n = n;
    ins.cond = cond;
    ins.opcode_ = opcode_;
    ins.type = type;

    return ins;
}

ARMInstruction ARMDecoder::decode_vaba_vabal_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 28);
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int n = 0;
    int long_destination = 0;
    int unsigned_ = 0;

    if (unlikely((size == 3))) {
        return UndefinedInstruction("Reason: (size == 3)");
    }
    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1)))");
    }
    unsigned_ = (U == 1);
    long_destination = false;
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vaba_vabal;
    ins.m_to_string = decode_vaba_vabal_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vaba_vabal_t1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.long_destination = long_destination;
    ins.unsigned_ = unsigned_;
    ins.U = U;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vaba_vabal_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 24);
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int n = 0;
    int long_destination = 0;
    int unsigned_ = 0;

    if (unlikely((size == 3))) {
        return UndefinedInstruction("Reason: (size == 3)");
    }
    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1)))");
    }
    unsigned_ = (U == 1);
    long_destination = false;
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vaba_vabal;
    ins.m_to_string = decode_vaba_vabal_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vaba_vabal_a1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.long_destination = long_destination;
    ins.unsigned_ = unsigned_;
    ins.U = U;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vaba_vabal_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 28);
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int n = 0;
    int long_destination = 0;
    int unsigned_ = 0;

    if (unlikely((size == 3))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely((get_bit(Vd, 0) == 1))) {
        return UndefinedInstruction("Reason: (get_bit(Vd, 0) == 1)");
    }
    unsigned_ = (U == 1);
    long_destination = true;
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = 1;
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vaba_vabal;
    ins.m_to_string = decode_vaba_vabal_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vaba_vabal_t2";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.long_destination = long_destination;
    ins.unsigned_ = unsigned_;
    ins.U = U;
    ins.D = D;
    ins.size = size;

    return ins;
}

ARMInstruction ARMDecoder::decode_vaba_vabal_a2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 24);
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int n = 0;
    int long_destination = 0;
    int unsigned_ = 0;

    if (unlikely((size == 3))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely((get_bit(Vd, 0) == 1))) {
        return UndefinedInstruction("Reason: (get_bit(Vd, 0) == 1)");
    }
    unsigned_ = (U == 1);
    long_destination = true;
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = 1;
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vaba_vabal;
    ins.m_to_string = decode_vaba_vabal_a2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vaba_vabal_a2";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.long_destination = long_destination;
    ins.unsigned_ = unsigned_;
    ins.U = U;
    ins.D = D;
    ins.size = size;

    return ins;
}

ARMInstruction ARMDecoder::decode_vabd_vabdl_integer_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 28);
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int n = 0;
    int long_destination = 0;
    int unsigned_ = 0;

    if (unlikely((size == 3))) {
        return UndefinedInstruction("Reason: (size == 3)");
    }
    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1)))");
    }
    unsigned_ = (U == 1);
    long_destination = false;
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vabd_vabdl_integer;
    ins.m_to_string = decode_vabd_vabdl_integer_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vabd_vabdl_integer_t1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.long_destination = long_destination;
    ins.unsigned_ = unsigned_;
    ins.U = U;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vabd_vabdl_integer_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 24);
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int n = 0;
    int long_destination = 0;
    int unsigned_ = 0;

    if (unlikely((size == 3))) {
        return UndefinedInstruction("Reason: (size == 3)");
    }
    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1)))");
    }
    unsigned_ = (U == 1);
    long_destination = false;
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vabd_vabdl_integer;
    ins.m_to_string = decode_vabd_vabdl_integer_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vabd_vabdl_integer_a1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.long_destination = long_destination;
    ins.unsigned_ = unsigned_;
    ins.U = U;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vabd_vabdl_integer_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 28);
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int n = 0;
    int long_destination = 0;
    int unsigned_ = 0;

    if (unlikely((size == 3))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely((get_bit(Vd, 0) == 1))) {
        return UndefinedInstruction("Reason: (get_bit(Vd, 0) == 1)");
    }
    unsigned_ = (U == 1);
    long_destination = true;
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = 1;
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vabd_vabdl_integer;
    ins.m_to_string = decode_vabd_vabdl_integer_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vabd_vabdl_integer_t2";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.long_destination = long_destination;
    ins.unsigned_ = unsigned_;
    ins.U = U;
    ins.D = D;
    ins.size = size;

    return ins;
}

ARMInstruction ARMDecoder::decode_vabd_vabdl_integer_a2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 24);
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int n = 0;
    int long_destination = 0;
    int unsigned_ = 0;

    if (unlikely((size == 3))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely((get_bit(Vd, 0) == 1))) {
        return UndefinedInstruction("Reason: (get_bit(Vd, 0) == 1)");
    }
    unsigned_ = (U == 1);
    long_destination = true;
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = 1;
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vabd_vabdl_integer;
    ins.m_to_string = decode_vabd_vabdl_integer_a2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vabd_vabdl_integer_a2";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.long_destination = long_destination;
    ins.unsigned_ = unsigned_;
    ins.U = U;
    ins.D = D;
    ins.size = size;

    return ins;
}

ARMInstruction ARMDecoder::decode_vabd_floating_point_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    sz = get_bit(opcode, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int n = 0;

    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1)))");
    }
    if (unlikely((sz == 1))) {
        return UndefinedInstruction("Reason: (sz == 1)");
    }
    esize = 32;
    elements = 2;
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vabd_floating_point;
    ins.m_to_string = decode_vabd_floating_point_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vabd_floating_point_t1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.D = D;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vabd_floating_point_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    sz = get_bit(opcode, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int n = 0;

    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1)))");
    }
    if (unlikely((sz == 1))) {
        return UndefinedInstruction("Reason: (sz == 1)");
    }
    esize = 32;
    elements = 2;
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vabd_floating_point;
    ins.m_to_string = decode_vabd_floating_point_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vabd_floating_point_a1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.D = D;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vabs_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 19, 18);
    int    Vd = get_bits(opcode, 15, 12);
    int     F = get_bit(opcode, 10);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int advsimd = 0;
    int m = 0;
    int regs = 0;
    int floating_point = 0;

    if (unlikely(((size == 3) || ((F == 1) && (size != 2))))) {
        return UndefinedInstruction("Reason: ((size == 3) || ((F == 1) && (size != 2)))");
    }
    if (unlikely(((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)))");
    }
    advsimd = true;
    floating_point = (F == 1);
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vabs;
    ins.m_to_string = decode_vabs_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vabs_t1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.advsimd = advsimd;
    ins.m = m;
    ins.regs = regs;
    ins.floating_point = floating_point;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vabs_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 19, 18);
    int    Vd = get_bits(opcode, 15, 12);
    int     F = get_bit(opcode, 10);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int advsimd = 0;
    int m = 0;
    int regs = 0;
    int floating_point = 0;

    if (unlikely(((size == 3) || ((F == 1) && (size != 2))))) {
        return UndefinedInstruction("Reason: ((size == 3) || ((F == 1) && (size != 2)))");
    }
    if (unlikely(((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)))");
    }
    advsimd = true;
    floating_point = (F == 1);
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vabs;
    ins.m_to_string = decode_vabs_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vabs_a1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.advsimd = advsimd;
    ins.m = m;
    ins.regs = regs;
    ins.floating_point = floating_point;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vabs_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    Vd = get_bits(opcode, 15, 12);
    int    sz = get_bit(opcode,  8);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int dp_operation = 0;
    int advsimd = 0;
    int m = 0;
    int d = 0;

    if (unlikely(((FPSCR.LEN != 0) || (FPSCR.STRIDE != 0)))) {
        return SeeInstruction("VFP vectors");
    }
    advsimd = false;
    dp_operation = (sz == 1);
    d = ((dp_operation) ? UInt(Concatenate(D, Vd, 4)) : UInt(Concatenate(Vd, D, 1)));
    m = ((dp_operation) ? UInt(Concatenate(M, Vm, 4)) : UInt(Concatenate(Vm, M, 1)));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vabs;
    ins.m_to_string = decode_vabs_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vabs_t2";
    ins.encoding = encoding;
    ins.dp_operation = dp_operation;
    ins.advsimd = advsimd;
    ins.m = m;
    ins.d = d;
    ins.D = D;

    return ins;
}

ARMInstruction ARMDecoder::decode_vabs_a2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     D = get_bit(opcode, 22);
    int    Vd = get_bits(opcode, 15, 12);
    int    sz = get_bit(opcode,  8);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int dp_operation = 0;
    int advsimd = 0;
    int m = 0;
    int d = 0;

    if (unlikely(((FPSCR.LEN != 0) || (FPSCR.STRIDE != 0)))) {
        return SeeInstruction("VFP vectors");
    }
    advsimd = false;
    dp_operation = (sz == 1);
    d = ((dp_operation) ? UInt(Concatenate(D, Vd, 4)) : UInt(Concatenate(Vd, D, 1)));
    m = ((dp_operation) ? UInt(Concatenate(M, Vm, 4)) : UInt(Concatenate(Vm, M, 1)));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vabs;
    ins.m_to_string = decode_vabs_a2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vabs_a2";
    ins.encoding = encoding;
    ins.dp_operation = dp_operation;
    ins.advsimd = advsimd;
    ins.m = m;
    ins.d = d;
    ins.cond = cond;
    ins.D = D;

    return ins;
}

ARMInstruction ARMDecoder::decode_vacge_vacgt_vacle_vaclt_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    op = get_bit(opcode, 21);
    int    sz = get_bit(opcode, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int or_equal = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int n = 0;

    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1)))");
    }
    if (unlikely((sz == 1))) {
        return UndefinedInstruction("Reason: (sz == 1)");
    }
    or_equal = (op == 0);
    esize = 32;
    elements = 2;
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vacge_vacgt_vacle_vaclt;
    ins.m_to_string = decode_vacge_vacgt_vacle_vaclt_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vacge_vacgt_vacle_vaclt_t1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.or_equal = or_equal;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.D = D;
    ins.op = op;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vacge_vacgt_vacle_vaclt_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    op = get_bit(opcode, 21);
    int    sz = get_bit(opcode, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int or_equal = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int n = 0;

    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1)))");
    }
    if (unlikely((sz == 1))) {
        return UndefinedInstruction("Reason: (sz == 1)");
    }
    or_equal = (op == 0);
    esize = 32;
    elements = 2;
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vacge_vacgt_vacle_vaclt;
    ins.m_to_string = decode_vacge_vacgt_vacle_vaclt_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vacge_vacgt_vacle_vaclt_a1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.or_equal = or_equal;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.D = D;
    ins.op = op;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vadd_integer_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int n = 0;

    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1)))");
    }
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vadd_integer;
    ins.m_to_string = decode_vadd_integer_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vadd_integer_t1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vadd_integer_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int n = 0;

    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1)))");
    }
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vadd_integer;
    ins.m_to_string = decode_vadd_integer_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vadd_integer_a1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vadd_floating_point_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    sz = get_bit(opcode, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int advsimd = 0;
    int m = 0;
    int regs = 0;
    int n = 0;

    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1)))");
    }
    if (unlikely((sz == 1))) {
        return UndefinedInstruction("Reason: (sz == 1)");
    }
    advsimd = true;
    esize = 32;
    elements = 2;
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vadd_floating_point;
    ins.m_to_string = decode_vadd_floating_point_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vadd_floating_point_t1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.advsimd = advsimd;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.D = D;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vadd_floating_point_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    sz = get_bit(opcode, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int advsimd = 0;
    int m = 0;
    int regs = 0;
    int n = 0;

    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1)))");
    }
    if (unlikely((sz == 1))) {
        return UndefinedInstruction("Reason: (sz == 1)");
    }
    advsimd = true;
    esize = 32;
    elements = 2;
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vadd_floating_point;
    ins.m_to_string = decode_vadd_floating_point_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vadd_floating_point_a1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.advsimd = advsimd;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.D = D;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vadd_floating_point_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int    sz = get_bit(opcode,  8);
    int     N = get_bit(opcode,  7);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int dp_operation = 0;
    int advsimd = 0;
    int m = 0;
    int d = 0;
    int n = 0;

    if (unlikely(((FPSCR.LEN != 0) || (FPSCR.STRIDE != 0)))) {
        return SeeInstruction("VFP vectors");
    }
    advsimd = false;
    dp_operation = (sz == 1);
    d = ((dp_operation) ? UInt(Concatenate(D, Vd, 4)) : UInt(Concatenate(Vd, D, 1)));
    n = ((dp_operation) ? UInt(Concatenate(N, Vn, 4)) : UInt(Concatenate(Vn, N, 1)));
    m = ((dp_operation) ? UInt(Concatenate(M, Vm, 4)) : UInt(Concatenate(Vm, M, 1)));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vadd_floating_point;
    ins.m_to_string = decode_vadd_floating_point_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vadd_floating_point_t2";
    ins.encoding = encoding;
    ins.dp_operation = dp_operation;
    ins.advsimd = advsimd;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.D = D;

    return ins;
}

ARMInstruction ARMDecoder::decode_vadd_floating_point_a2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     D = get_bit(opcode, 22);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int    sz = get_bit(opcode,  8);
    int     N = get_bit(opcode,  7);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int dp_operation = 0;
    int advsimd = 0;
    int m = 0;
    int d = 0;
    int n = 0;

    if (unlikely(((FPSCR.LEN != 0) || (FPSCR.STRIDE != 0)))) {
        return SeeInstruction("VFP vectors");
    }
    advsimd = false;
    dp_operation = (sz == 1);
    d = ((dp_operation) ? UInt(Concatenate(D, Vd, 4)) : UInt(Concatenate(Vd, D, 1)));
    n = ((dp_operation) ? UInt(Concatenate(N, Vn, 4)) : UInt(Concatenate(Vn, N, 1)));
    m = ((dp_operation) ? UInt(Concatenate(M, Vm, 4)) : UInt(Concatenate(Vm, M, 1)));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vadd_floating_point;
    ins.m_to_string = decode_vadd_floating_point_a2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vadd_floating_point_a2";
    ins.encoding = encoding;
    ins.dp_operation = dp_operation;
    ins.advsimd = advsimd;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;
    ins.D = D;

    return ins;
}

ARMInstruction ARMDecoder::decode_vaddhn_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int n = 0;
    int elements = 0;
    int m = 0;
    int d = 0;
    int esize = 0;

    if (unlikely((size == 3))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely(((get_bit(Vn, 0) == 1) || (get_bit(Vm, 0) == 1)))) {
        return UndefinedInstruction("Reason: ((get_bit(Vn, 0) == 1) || (get_bit(Vm, 0) == 1))");
    }
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vaddhn;
    ins.m_to_string = decode_vaddhn_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vaddhn_t1";
    ins.encoding = encoding;
    ins.n = n;
    ins.elements = elements;
    ins.m = m;
    ins.d = d;
    ins.esize = esize;
    ins.D = D;
    ins.size = size;

    return ins;
}

ARMInstruction ARMDecoder::decode_vaddhn_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int n = 0;
    int elements = 0;
    int m = 0;
    int d = 0;
    int esize = 0;

    if (unlikely((size == 3))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely(((get_bit(Vn, 0) == 1) || (get_bit(Vm, 0) == 1)))) {
        return UndefinedInstruction("Reason: ((get_bit(Vn, 0) == 1) || (get_bit(Vm, 0) == 1))");
    }
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vaddhn;
    ins.m_to_string = decode_vaddhn_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vaddhn_a1";
    ins.encoding = encoding;
    ins.n = n;
    ins.elements = elements;
    ins.m = m;
    ins.d = d;
    ins.esize = esize;
    ins.D = D;
    ins.size = size;

    return ins;
}

ARMInstruction ARMDecoder::decode_vaddl_vaddw_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 28);
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int    op = get_bit(opcode,  8);
    int     N = get_bit(opcode,  7);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int n = 0;
    int unsigned_ = 0;
    int is_vaddw = 0;

    if (unlikely((size == 3))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely(((get_bit(Vd, 0) == 1) || ((op == 1) && (get_bit(Vn, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((get_bit(Vd, 0) == 1) || ((op == 1) && (get_bit(Vn, 0) == 1)))");
    }
    unsigned_ = (U == 1);
    esize = (8 << UInt(size));
    elements = (64 / esize);
    is_vaddw = (op == 1);
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vaddl_vaddw;
    ins.m_to_string = decode_vaddl_vaddw_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vaddl_vaddw_t1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.n = n;
    ins.unsigned_ = unsigned_;
    ins.is_vaddw = is_vaddw;
    ins.U = U;
    ins.D = D;
    ins.size = size;
    ins.op = op;

    return ins;
}

ARMInstruction ARMDecoder::decode_vaddl_vaddw_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 24);
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int    op = get_bit(opcode,  8);
    int     N = get_bit(opcode,  7);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int n = 0;
    int unsigned_ = 0;
    int is_vaddw = 0;

    if (unlikely((size == 3))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely(((get_bit(Vd, 0) == 1) || ((op == 1) && (get_bit(Vn, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((get_bit(Vd, 0) == 1) || ((op == 1) && (get_bit(Vn, 0) == 1)))");
    }
    unsigned_ = (U == 1);
    esize = (8 << UInt(size));
    elements = (64 / esize);
    is_vaddw = (op == 1);
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vaddl_vaddw;
    ins.m_to_string = decode_vaddl_vaddw_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vaddl_vaddw_a1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.n = n;
    ins.unsigned_ = unsigned_;
    ins.is_vaddw = is_vaddw;
    ins.U = U;
    ins.D = D;
    ins.size = size;
    ins.op = op;

    return ins;
}

ARMInstruction ARMDecoder::decode_vand_register_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int regs = 0;
    int m = 0;
    int d = 0;
    int n = 0;

    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1)))");
    }
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vand_register;
    ins.m_to_string = decode_vand_register_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vand_register_t1";
    ins.encoding = encoding;
    ins.regs = regs;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.D = D;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vand_register_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int regs = 0;
    int m = 0;
    int d = 0;
    int n = 0;

    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1)))");
    }
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vand_register;
    ins.m_to_string = decode_vand_register_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vand_register_a1";
    ins.encoding = encoding;
    ins.regs = regs;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.D = D;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vbic_immediate_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     i = get_bit(opcode, 28);
    int     D = get_bit(opcode, 22);
    int  imm3 = get_bits(opcode, 18, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int cmode = get_bits(opcode, 11,  8);
    int     Q = get_bit(opcode,  6);
    int  imm4 = get_bits(opcode,  3,  0);
    uint64_t imm64 = 0;
    int d = 0;
    int regs = 0;

    if (unlikely(((get_bit(cmode, 0) == 0) || (get_bits(cmode, 3, 2) == 3)))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely(((Q == 1) && (get_bit(Vd, 0) == 1)))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (get_bit(Vd, 0) == 1))");
    }
    imm64 = AdvSIMDExpandImm(1, cmode, Concatenate(Concatenate(i, imm3, 3), imm4, 4));
    d = UInt(Concatenate(D, Vd, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vbic_immediate;
    ins.m_to_string = decode_vbic_immediate_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vbic_immediate_t1";
    ins.encoding = encoding;
    ins.imm64 = imm64;
    ins.d = d;
    ins.regs = regs;
    ins.D = D;
    ins.cmode = cmode;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vbic_immediate_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     i = get_bit(opcode, 24);
    int     D = get_bit(opcode, 22);
    int  imm3 = get_bits(opcode, 18, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int cmode = get_bits(opcode, 11,  8);
    int     Q = get_bit(opcode,  6);
    int  imm4 = get_bits(opcode,  3,  0);
    uint64_t imm64 = 0;
    int d = 0;
    int regs = 0;

    if (unlikely(((get_bit(cmode, 0) == 0) || (get_bits(cmode, 3, 2) == 3)))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely(((Q == 1) && (get_bit(Vd, 0) == 1)))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (get_bit(Vd, 0) == 1))");
    }
    imm64 = AdvSIMDExpandImm(1, cmode, Concatenate(Concatenate(i, imm3, 3), imm4, 4));
    d = UInt(Concatenate(D, Vd, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vbic_immediate;
    ins.m_to_string = decode_vbic_immediate_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vbic_immediate_a1";
    ins.encoding = encoding;
    ins.imm64 = imm64;
    ins.d = d;
    ins.regs = regs;
    ins.D = D;
    ins.cmode = cmode;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vbic_register_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int regs = 0;
    int m = 0;
    int d = 0;
    int n = 0;

    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1)))");
    }
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vbic_register;
    ins.m_to_string = decode_vbic_register_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vbic_register_t1";
    ins.encoding = encoding;
    ins.regs = regs;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.D = D;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vbic_register_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int regs = 0;
    int m = 0;
    int d = 0;
    int n = 0;

    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1)))");
    }
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vbic_register;
    ins.m_to_string = decode_vbic_register_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vbic_register_a1";
    ins.encoding = encoding;
    ins.regs = regs;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.D = D;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vbif_vbit_vbsl_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    op = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int regs = 0;
    int operation = 0;
    int m = 0;
    int d = 0;
    int n = 0;

    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1)))");
    }
    if (unlikely((op == 0))) {
        return SeeInstruction("VEOR");
    }
    if ((op == 1)) {
        operation = VBitOps_VBSL;
    }
    if ((op == 2)) {
        operation = VBitOps_VBIT;
    }
    if ((op == 3)) {
        operation = VBitOps_VBIF;
    }
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vbif_vbit_vbsl;
    ins.m_to_string = decode_vbif_vbit_vbsl_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vbif_vbit_vbsl_t1";
    ins.encoding = encoding;
    ins.regs = regs;
    ins.operation = operation;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.D = D;
    ins.op = op;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vbif_vbit_vbsl_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    op = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int regs = 0;
    int operation = 0;
    int m = 0;
    int d = 0;
    int n = 0;

    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1)))");
    }
    if (unlikely((op == 0))) {
        return SeeInstruction("VEOR");
    }
    if ((op == 1)) {
        operation = VBitOps_VBSL;
    }
    if ((op == 2)) {
        operation = VBitOps_VBIT;
    }
    if ((op == 3)) {
        operation = VBitOps_VBIF;
    }
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vbif_vbit_vbsl;
    ins.m_to_string = decode_vbif_vbit_vbsl_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vbif_vbit_vbsl_a1";
    ins.encoding = encoding;
    ins.regs = regs;
    ins.operation = operation;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.D = D;
    ins.op = op;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vceq_register_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int int_operation = 0;
    int m = 0;
    int regs = 0;
    int n = 0;

    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1)))");
    }
    if (unlikely((size == 3))) {
        return UndefinedInstruction("Reason: (size == 3)");
    }
    int_operation = true;
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vceq_register;
    ins.m_to_string = decode_vceq_register_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vceq_register_t1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.int_operation = int_operation;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vceq_register_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int int_operation = 0;
    int m = 0;
    int regs = 0;
    int n = 0;

    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1)))");
    }
    if (unlikely((size == 3))) {
        return UndefinedInstruction("Reason: (size == 3)");
    }
    int_operation = true;
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vceq_register;
    ins.m_to_string = decode_vceq_register_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vceq_register_a1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.int_operation = int_operation;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vceq_register_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    sz = get_bit(opcode, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int int_operation = 0;
    int m = 0;
    int regs = 0;
    int n = 0;

    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1)))");
    }
    if (unlikely((sz == 1))) {
        return UndefinedInstruction("Reason: (sz == 1)");
    }
    int_operation = false;
    esize = 32;
    elements = 2;
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vceq_register;
    ins.m_to_string = decode_vceq_register_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vceq_register_t2";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.int_operation = int_operation;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.D = D;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vceq_register_a2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    sz = get_bit(opcode, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int int_operation = 0;
    int m = 0;
    int regs = 0;
    int n = 0;

    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1)))");
    }
    if (unlikely((sz == 1))) {
        return UndefinedInstruction("Reason: (sz == 1)");
    }
    int_operation = false;
    esize = 32;
    elements = 2;
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vceq_register;
    ins.m_to_string = decode_vceq_register_a2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vceq_register_a2";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.int_operation = int_operation;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.D = D;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vceq_immediate_0_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 19, 18);
    int    Vd = get_bits(opcode, 15, 12);
    int     F = get_bit(opcode, 10);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int floating_point = 0;

    if (unlikely(((size == 3) || ((F == 1) && (size != 2))))) {
        return UndefinedInstruction("Reason: ((size == 3) || ((F == 1) && (size != 2)))");
    }
    if (unlikely(((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)))");
    }
    floating_point = (F == 1);
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vceq_immediate_0;
    ins.m_to_string = decode_vceq_immediate_0_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vceq_immediate_0_t1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.floating_point = floating_point;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vceq_immediate_0_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 19, 18);
    int    Vd = get_bits(opcode, 15, 12);
    int     F = get_bit(opcode, 10);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int floating_point = 0;

    if (unlikely(((size == 3) || ((F == 1) && (size != 2))))) {
        return UndefinedInstruction("Reason: ((size == 3) || ((F == 1) && (size != 2)))");
    }
    if (unlikely(((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)))");
    }
    floating_point = (F == 1);
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vceq_immediate_0;
    ins.m_to_string = decode_vceq_immediate_0_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vceq_immediate_0_a1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.floating_point = floating_point;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vcge_register_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 28);
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int n = 0;
    int type = 0;

    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1)))");
    }
    if (unlikely((size == 3))) {
        return UndefinedInstruction("Reason: (size == 3)");
    }
    type = (((U == 1)) ? VCGEtype_unsigned : VCGEtype_signed);
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vcge_register;
    ins.m_to_string = decode_vcge_register_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vcge_register_t1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.type = type;
    ins.U = U;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vcge_register_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 24);
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int n = 0;
    int type = 0;

    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1)))");
    }
    if (unlikely((size == 3))) {
        return UndefinedInstruction("Reason: (size == 3)");
    }
    type = (((U == 1)) ? VCGEtype_unsigned : VCGEtype_signed);
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vcge_register;
    ins.m_to_string = decode_vcge_register_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vcge_register_a1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.type = type;
    ins.U = U;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vcge_register_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    sz = get_bit(opcode, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int n = 0;
    int type = 0;

    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1)))");
    }
    if (unlikely((sz == 1))) {
        return UndefinedInstruction("Reason: (sz == 1)");
    }
    type = VCGEtype_fp;
    esize = 32;
    elements = 2;
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vcge_register;
    ins.m_to_string = decode_vcge_register_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vcge_register_t2";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.type = type;
    ins.D = D;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vcge_register_a2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    sz = get_bit(opcode, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int n = 0;
    int type = 0;

    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1)))");
    }
    if (unlikely((sz == 1))) {
        return UndefinedInstruction("Reason: (sz == 1)");
    }
    type = VCGEtype_fp;
    esize = 32;
    elements = 2;
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vcge_register;
    ins.m_to_string = decode_vcge_register_a2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vcge_register_a2";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.type = type;
    ins.D = D;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vcge_immediate_0_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 19, 18);
    int    Vd = get_bits(opcode, 15, 12);
    int     F = get_bit(opcode, 10);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int floating_point = 0;

    if (unlikely(((size == 3) || ((F == 1) && (size != 2))))) {
        return UndefinedInstruction("Reason: ((size == 3) || ((F == 1) && (size != 2)))");
    }
    if (unlikely(((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)))");
    }
    floating_point = (F == 1);
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vcge_immediate_0;
    ins.m_to_string = decode_vcge_immediate_0_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vcge_immediate_0_t1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.floating_point = floating_point;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vcge_immediate_0_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 19, 18);
    int    Vd = get_bits(opcode, 15, 12);
    int     F = get_bit(opcode, 10);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int floating_point = 0;

    if (unlikely(((size == 3) || ((F == 1) && (size != 2))))) {
        return UndefinedInstruction("Reason: ((size == 3) || ((F == 1) && (size != 2)))");
    }
    if (unlikely(((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)))");
    }
    floating_point = (F == 1);
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vcge_immediate_0;
    ins.m_to_string = decode_vcge_immediate_0_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vcge_immediate_0_a1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.floating_point = floating_point;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vcgt_register_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 28);
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int n = 0;
    int type = 0;

    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1)))");
    }
    if (unlikely((size == 3))) {
        return UndefinedInstruction("Reason: (size == 3)");
    }
    type = (((U == 1)) ? VCGTtype_unsigned : VCGTtype_signed);
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vcgt_register;
    ins.m_to_string = decode_vcgt_register_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vcgt_register_t1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.type = type;
    ins.U = U;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vcgt_register_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 24);
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int n = 0;
    int type = 0;

    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1)))");
    }
    if (unlikely((size == 3))) {
        return UndefinedInstruction("Reason: (size == 3)");
    }
    type = (((U == 1)) ? VCGTtype_unsigned : VCGTtype_signed);
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vcgt_register;
    ins.m_to_string = decode_vcgt_register_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vcgt_register_a1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.type = type;
    ins.U = U;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vcgt_register_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    sz = get_bit(opcode, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int n = 0;
    int type = 0;

    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1)))");
    }
    if (unlikely((sz == 1))) {
        return UndefinedInstruction("Reason: (sz == 1)");
    }
    type = VCGTtype_fp;
    esize = 32;
    elements = 2;
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vcgt_register;
    ins.m_to_string = decode_vcgt_register_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vcgt_register_t2";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.type = type;
    ins.D = D;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vcgt_register_a2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    sz = get_bit(opcode, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int n = 0;
    int type = 0;

    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1)))");
    }
    if (unlikely((sz == 1))) {
        return UndefinedInstruction("Reason: (sz == 1)");
    }
    type = VCGTtype_fp;
    esize = 32;
    elements = 2;
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vcgt_register;
    ins.m_to_string = decode_vcgt_register_a2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vcgt_register_a2";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.type = type;
    ins.D = D;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vcgt_immediate_0_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 19, 18);
    int    Vd = get_bits(opcode, 15, 12);
    int     F = get_bit(opcode, 10);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int floating_point = 0;

    if (unlikely(((size == 3) || ((F == 1) && (size != 2))))) {
        return UndefinedInstruction("Reason: ((size == 3) || ((F == 1) && (size != 2)))");
    }
    if (unlikely(((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)))");
    }
    floating_point = (F == 1);
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vcgt_immediate_0;
    ins.m_to_string = decode_vcgt_immediate_0_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vcgt_immediate_0_t1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.floating_point = floating_point;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vcgt_immediate_0_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 19, 18);
    int    Vd = get_bits(opcode, 15, 12);
    int     F = get_bit(opcode, 10);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int floating_point = 0;

    if (unlikely(((size == 3) || ((F == 1) && (size != 2))))) {
        return UndefinedInstruction("Reason: ((size == 3) || ((F == 1) && (size != 2)))");
    }
    if (unlikely(((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)))");
    }
    floating_point = (F == 1);
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vcgt_immediate_0;
    ins.m_to_string = decode_vcgt_immediate_0_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vcgt_immediate_0_a1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.floating_point = floating_point;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vcle_immediate_0_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 19, 18);
    int    Vd = get_bits(opcode, 15, 12);
    int     F = get_bit(opcode, 10);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int floating_point = 0;

    if (unlikely(((size == 3) || ((F == 1) && (size != 2))))) {
        return UndefinedInstruction("Reason: ((size == 3) || ((F == 1) && (size != 2)))");
    }
    if (unlikely(((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)))");
    }
    floating_point = (F == 1);
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vcle_immediate_0;
    ins.m_to_string = decode_vcle_immediate_0_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vcle_immediate_0_t1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.floating_point = floating_point;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vcle_immediate_0_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 19, 18);
    int    Vd = get_bits(opcode, 15, 12);
    int     F = get_bit(opcode, 10);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int floating_point = 0;

    if (unlikely(((size == 3) || ((F == 1) && (size != 2))))) {
        return UndefinedInstruction("Reason: ((size == 3) || ((F == 1) && (size != 2)))");
    }
    if (unlikely(((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)))");
    }
    floating_point = (F == 1);
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vcle_immediate_0;
    ins.m_to_string = decode_vcle_immediate_0_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vcle_immediate_0_a1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.floating_point = floating_point;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vcls_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 19, 18);
    int    Vd = get_bits(opcode, 15, 12);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int regs = 0;
    int elements = 0;
    int m = 0;
    int d = 0;
    int esize = 0;

    if (unlikely((size == 3))) {
        return UndefinedInstruction("Reason: (size == 3)");
    }
    if (unlikely(((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)))");
    }
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vcls;
    ins.m_to_string = decode_vcls_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vcls_t1";
    ins.encoding = encoding;
    ins.regs = regs;
    ins.elements = elements;
    ins.m = m;
    ins.d = d;
    ins.esize = esize;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vcls_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 19, 18);
    int    Vd = get_bits(opcode, 15, 12);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int regs = 0;
    int elements = 0;
    int m = 0;
    int d = 0;
    int esize = 0;

    if (unlikely((size == 3))) {
        return UndefinedInstruction("Reason: (size == 3)");
    }
    if (unlikely(((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)))");
    }
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vcls;
    ins.m_to_string = decode_vcls_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vcls_a1";
    ins.encoding = encoding;
    ins.regs = regs;
    ins.elements = elements;
    ins.m = m;
    ins.d = d;
    ins.esize = esize;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vclt_immediate_0_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 19, 18);
    int    Vd = get_bits(opcode, 15, 12);
    int     F = get_bit(opcode, 10);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int floating_point = 0;

    if (unlikely(((size == 3) || ((F == 1) && (size != 2))))) {
        return UndefinedInstruction("Reason: ((size == 3) || ((F == 1) && (size != 2)))");
    }
    if (unlikely(((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)))");
    }
    floating_point = (F == 1);
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vclt_immediate_0;
    ins.m_to_string = decode_vclt_immediate_0_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vclt_immediate_0_t1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.floating_point = floating_point;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vclt_immediate_0_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 19, 18);
    int    Vd = get_bits(opcode, 15, 12);
    int     F = get_bit(opcode, 10);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int floating_point = 0;

    if (unlikely(((size == 3) || ((F == 1) && (size != 2))))) {
        return UndefinedInstruction("Reason: ((size == 3) || ((F == 1) && (size != 2)))");
    }
    if (unlikely(((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)))");
    }
    floating_point = (F == 1);
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vclt_immediate_0;
    ins.m_to_string = decode_vclt_immediate_0_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vclt_immediate_0_a1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.floating_point = floating_point;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vclz_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 19, 18);
    int    Vd = get_bits(opcode, 15, 12);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int regs = 0;
    int elements = 0;
    int m = 0;
    int d = 0;
    int esize = 0;

    if (unlikely((size == 3))) {
        return UndefinedInstruction("Reason: (size == 3)");
    }
    if (unlikely(((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)))");
    }
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vclz;
    ins.m_to_string = decode_vclz_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vclz_t1";
    ins.encoding = encoding;
    ins.regs = regs;
    ins.elements = elements;
    ins.m = m;
    ins.d = d;
    ins.esize = esize;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vclz_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 19, 18);
    int    Vd = get_bits(opcode, 15, 12);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int regs = 0;
    int elements = 0;
    int m = 0;
    int d = 0;
    int esize = 0;

    if (unlikely((size == 3))) {
        return UndefinedInstruction("Reason: (size == 3)");
    }
    if (unlikely(((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)))");
    }
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vclz;
    ins.m_to_string = decode_vclz_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vclz_a1";
    ins.encoding = encoding;
    ins.regs = regs;
    ins.elements = elements;
    ins.m = m;
    ins.d = d;
    ins.esize = esize;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vcmp_vcmpe_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    Vd = get_bits(opcode, 15, 12);
    int    sz = get_bit(opcode,  8);
    int     E = get_bit(opcode,  7);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int with_zero = 0;
    int m = 0;
    int dp_operation = 0;
    int quiet_nan_exc = 0;
    int d = 0;

    dp_operation = (sz == 1);
    quiet_nan_exc = (E == 1);
    with_zero = false;
    d = ((dp_operation) ? UInt(Concatenate(D, Vd, 4)) : UInt(Concatenate(Vd, D, 1)));
    m = ((dp_operation) ? UInt(Concatenate(M, Vm, 4)) : UInt(Concatenate(Vm, M, 1)));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vcmp_vcmpe;
    ins.m_to_string = decode_vcmp_vcmpe_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vcmp_vcmpe_t1";
    ins.encoding = encoding;
    ins.with_zero = with_zero;
    ins.m = m;
    ins.dp_operation = dp_operation;
    ins.quiet_nan_exc = quiet_nan_exc;
    ins.d = d;
    ins.D = D;
    ins.E = E;

    return ins;
}

ARMInstruction ARMDecoder::decode_vcmp_vcmpe_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     D = get_bit(opcode, 22);
    int    Vd = get_bits(opcode, 15, 12);
    int    sz = get_bit(opcode,  8);
    int     E = get_bit(opcode,  7);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int with_zero = 0;
    int m = 0;
    int dp_operation = 0;
    int quiet_nan_exc = 0;
    int d = 0;

    dp_operation = (sz == 1);
    quiet_nan_exc = (E == 1);
    with_zero = false;
    d = ((dp_operation) ? UInt(Concatenate(D, Vd, 4)) : UInt(Concatenate(Vd, D, 1)));
    m = ((dp_operation) ? UInt(Concatenate(M, Vm, 4)) : UInt(Concatenate(Vm, M, 1)));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vcmp_vcmpe;
    ins.m_to_string = decode_vcmp_vcmpe_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vcmp_vcmpe_a1";
    ins.encoding = encoding;
    ins.with_zero = with_zero;
    ins.m = m;
    ins.dp_operation = dp_operation;
    ins.quiet_nan_exc = quiet_nan_exc;
    ins.d = d;
    ins.cond = cond;
    ins.D = D;
    ins.E = E;

    return ins;
}

ARMInstruction ARMDecoder::decode_vcmp_vcmpe_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    Vd = get_bits(opcode, 15, 12);
    int    sz = get_bit(opcode,  8);
    int     E = get_bit(opcode,  7);
    int with_zero = 0;
    int dp_operation = 0;
    int quiet_nan_exc = 0;
    int d = 0;

    dp_operation = (sz == 1);
    quiet_nan_exc = (E == 1);
    with_zero = true;
    d = ((dp_operation) ? UInt(Concatenate(D, Vd, 4)) : UInt(Concatenate(Vd, D, 1)));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vcmp_vcmpe;
    ins.m_to_string = decode_vcmp_vcmpe_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vcmp_vcmpe_t2";
    ins.encoding = encoding;
    ins.with_zero = with_zero;
    ins.dp_operation = dp_operation;
    ins.quiet_nan_exc = quiet_nan_exc;
    ins.d = d;
    ins.D = D;
    ins.E = E;

    return ins;
}

ARMInstruction ARMDecoder::decode_vcmp_vcmpe_a2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     D = get_bit(opcode, 22);
    int    Vd = get_bits(opcode, 15, 12);
    int    sz = get_bit(opcode,  8);
    int     E = get_bit(opcode,  7);
    int with_zero = 0;
    int dp_operation = 0;
    int quiet_nan_exc = 0;
    int d = 0;

    dp_operation = (sz == 1);
    quiet_nan_exc = (E == 1);
    with_zero = true;
    d = ((dp_operation) ? UInt(Concatenate(D, Vd, 4)) : UInt(Concatenate(Vd, D, 1)));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vcmp_vcmpe;
    ins.m_to_string = decode_vcmp_vcmpe_a2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vcmp_vcmpe_a2";
    ins.encoding = encoding;
    ins.with_zero = with_zero;
    ins.dp_operation = dp_operation;
    ins.quiet_nan_exc = quiet_nan_exc;
    ins.d = d;
    ins.cond = cond;
    ins.D = D;
    ins.E = E;

    return ins;
}

ARMInstruction ARMDecoder::decode_vcnt_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 19, 18);
    int    Vd = get_bits(opcode, 15, 12);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int regs = 0;
    int elements = 0;
    int m = 0;
    int d = 0;
    int esize = 0;

    if (unlikely((size != 0))) {
        return UndefinedInstruction("Reason: (size != 0)");
    }
    if (unlikely(((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)))");
    }
    esize = 8;
    elements = 8;
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vcnt;
    ins.m_to_string = decode_vcnt_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vcnt_t1";
    ins.encoding = encoding;
    ins.regs = regs;
    ins.elements = elements;
    ins.m = m;
    ins.d = d;
    ins.esize = esize;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vcnt_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 19, 18);
    int    Vd = get_bits(opcode, 15, 12);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int regs = 0;
    int elements = 0;
    int m = 0;
    int d = 0;
    int esize = 0;

    if (unlikely((size != 0))) {
        return UndefinedInstruction("Reason: (size != 0)");
    }
    if (unlikely(((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)))");
    }
    esize = 8;
    elements = 8;
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vcnt;
    ins.m_to_string = decode_vcnt_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vcnt_a1";
    ins.encoding = encoding;
    ins.regs = regs;
    ins.elements = elements;
    ins.m = m;
    ins.d = d;
    ins.esize = esize;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vcvt_between_floating_point_and_integer_advancedsimd_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 19, 18);
    int    Vd = get_bits(opcode, 15, 12);
    int    op = get_bits(opcode,  8,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int round_zero = 0;
    int m = 0;
    int regs = 0;
    int round_nearest = 0;
    int to_integer = 0;
    int unsigned_ = 0;

    if (unlikely(((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)))");
    }
    if (unlikely((size != 2))) {
        return UndefinedInstruction("Reason: (size != 2)");
    }
    to_integer = (get_bit(op, 1) == 1);
    unsigned_ = (get_bit(op, 0) == 1);
    esize = 32;
    elements = 2;
    if (to_integer) {
        round_zero = true;
    } else {
        round_nearest = true;
    }
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vcvt_between_floating_point_and_integer_advancedsimd;
    ins.m_to_string = decode_vcvt_between_floating_point_and_integer_advancedsimd_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vcvt_between_floating_point_and_integer_advancedsimd_t1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.round_zero = round_zero;
    ins.m = m;
    ins.regs = regs;
    ins.round_nearest = round_nearest;
    ins.to_integer = to_integer;
    ins.unsigned_ = unsigned_;
    ins.D = D;
    ins.size = size;
    ins.op = op;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vcvt_between_floating_point_and_integer_advancedsimd_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 19, 18);
    int    Vd = get_bits(opcode, 15, 12);
    int    op = get_bits(opcode,  8,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int round_zero = 0;
    int m = 0;
    int regs = 0;
    int round_nearest = 0;
    int to_integer = 0;
    int unsigned_ = 0;

    if (unlikely(((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)))");
    }
    if (unlikely((size != 2))) {
        return UndefinedInstruction("Reason: (size != 2)");
    }
    to_integer = (get_bit(op, 1) == 1);
    unsigned_ = (get_bit(op, 0) == 1);
    esize = 32;
    elements = 2;
    if (to_integer) {
        round_zero = true;
    } else {
        round_nearest = true;
    }
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vcvt_between_floating_point_and_integer_advancedsimd;
    ins.m_to_string = decode_vcvt_between_floating_point_and_integer_advancedsimd_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vcvt_between_floating_point_and_integer_advancedsimd_a1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.round_zero = round_zero;
    ins.m = m;
    ins.regs = regs;
    ins.round_nearest = round_nearest;
    ins.to_integer = to_integer;
    ins.unsigned_ = unsigned_;
    ins.D = D;
    ins.size = size;
    ins.op = op;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vcvt_vcvtr_between_floating_point_and_integer_floating_point_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  opc2 = get_bits(opcode, 18, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int    sz = get_bit(opcode,  8);
    int    op = get_bit(opcode,  7);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int d = 0;
    int dp_operation = 0;
    int round_zero = 0;
    int m = 0;
    int to_integer = 0;
    int round_nearest = 0;
    int unsigned_ = 0;

    if (unlikely(((opc2 != 0) && !(opc2 >= 4 && opc2 <= 5)))) {
        return SeeInstruction("Related encodings");
    }
    to_integer = (get_bit(opc2, 2) == 1);
    dp_operation = (sz == 1);
    if (to_integer) {
        unsigned_ = (get_bit(opc2, 0) == 0);
        round_zero = (op == 1);
        d = UInt(Concatenate(Vd, D, 1));
        m = ((dp_operation) ? UInt(Concatenate(M, Vm, 4)) : UInt(Concatenate(Vm, M, 1)));
    } else {
        unsigned_ = (op == 0);
        round_nearest = false;
        m = UInt(Concatenate(Vm, M, 1));
        d = ((dp_operation) ? UInt(Concatenate(D, Vd, 4)) : UInt(Concatenate(Vd, D, 1)));
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vcvt_vcvtr_between_floating_point_and_integer_floating_point;
    ins.m_to_string = decode_vcvt_vcvtr_between_floating_point_and_integer_floating_point_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vcvt_vcvtr_between_floating_point_and_integer_floating_point_t1";
    ins.encoding = encoding;
    ins.d = d;
    ins.dp_operation = dp_operation;
    ins.round_zero = round_zero;
    ins.m = m;
    ins.to_integer = to_integer;
    ins.round_nearest = round_nearest;
    ins.unsigned_ = unsigned_;
    ins.D = D;
    ins.opc2 = opc2;
    ins.op = op;

    return ins;
}

ARMInstruction ARMDecoder::decode_vcvt_vcvtr_between_floating_point_and_integer_floating_point_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     D = get_bit(opcode, 22);
    int  opc2 = get_bits(opcode, 18, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int    sz = get_bit(opcode,  8);
    int    op = get_bit(opcode,  7);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int d = 0;
    int dp_operation = 0;
    int round_zero = 0;
    int m = 0;
    int to_integer = 0;
    int round_nearest = 0;
    int unsigned_ = 0;

    if (unlikely(((opc2 != 0) && !(opc2 >= 4 && opc2 <= 5)))) {
        return SeeInstruction("Related encodings");
    }
    to_integer = (get_bit(opc2, 2) == 1);
    dp_operation = (sz == 1);
    if (to_integer) {
        unsigned_ = (get_bit(opc2, 0) == 0);
        round_zero = (op == 1);
        d = UInt(Concatenate(Vd, D, 1));
        m = ((dp_operation) ? UInt(Concatenate(M, Vm, 4)) : UInt(Concatenate(Vm, M, 1)));
    } else {
        unsigned_ = (op == 0);
        round_nearest = false;
        m = UInt(Concatenate(Vm, M, 1));
        d = ((dp_operation) ? UInt(Concatenate(D, Vd, 4)) : UInt(Concatenate(Vd, D, 1)));
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vcvt_vcvtr_between_floating_point_and_integer_floating_point;
    ins.m_to_string = decode_vcvt_vcvtr_between_floating_point_and_integer_floating_point_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vcvt_vcvtr_between_floating_point_and_integer_floating_point_a1";
    ins.encoding = encoding;
    ins.d = d;
    ins.dp_operation = dp_operation;
    ins.round_zero = round_zero;
    ins.m = m;
    ins.to_integer = to_integer;
    ins.round_nearest = round_nearest;
    ins.unsigned_ = unsigned_;
    ins.cond = cond;
    ins.D = D;
    ins.opc2 = opc2;
    ins.op = op;

    return ins;
}

ARMInstruction ARMDecoder::decode_vcvt_between_floating_point_and_fixed_point_advancedsimd_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 28);
    int     D = get_bit(opcode, 22);
    int  imm6 = get_bits(opcode, 21, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int    op = get_bit(opcode,  8);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int frac_bits = 0;
    int elements = 0;
    int d = 0;
    int esize = 0;
    int round_zero = 0;
    int m = 0;
    int imm32 = 0;
    int round_nearest = 0;
    int regs = 0;
    int unsigned_ = 0;
    int to_fixed = 0;

    if (unlikely((imm6 >= 0 && imm6 <= 7))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely((imm6 >= 0 && imm6 <= 31))) {
        return UndefinedInstruction("Reason: (imm6 >= 0 && imm6 <= 31)");
    }
    if (unlikely(((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)))");
    }
    to_fixed = (op == 1);
    unsigned_ = (U == 1);
    if (to_fixed) {
        round_zero = true;
    } else {
        round_nearest = true;
    }
    imm32 = imm6;
    esize = 32;
    frac_bits = (64 - UInt(imm6));
    elements = 2;
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vcvt_between_floating_point_and_fixed_point_advancedsimd;
    ins.m_to_string = decode_vcvt_between_floating_point_and_fixed_point_advancedsimd_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vcvt_between_floating_point_and_fixed_point_advancedsimd_t1";
    ins.encoding = encoding;
    ins.frac_bits = frac_bits;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.round_zero = round_zero;
    ins.m = m;
    ins.imm32 = imm32;
    ins.round_nearest = round_nearest;
    ins.regs = regs;
    ins.unsigned_ = unsigned_;
    ins.to_fixed = to_fixed;
    ins.U = U;
    ins.D = D;
    ins.op = op;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vcvt_between_floating_point_and_fixed_point_advancedsimd_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 24);
    int     D = get_bit(opcode, 22);
    int  imm6 = get_bits(opcode, 21, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int    op = get_bit(opcode,  8);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int frac_bits = 0;
    int elements = 0;
    int d = 0;
    int esize = 0;
    int round_zero = 0;
    int m = 0;
    int imm32 = 0;
    int round_nearest = 0;
    int regs = 0;
    int unsigned_ = 0;
    int to_fixed = 0;

    if (unlikely((imm6 >= 0 && imm6 <= 7))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely((imm6 >= 0 && imm6 <= 31))) {
        return UndefinedInstruction("Reason: (imm6 >= 0 && imm6 <= 31)");
    }
    if (unlikely(((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)))");
    }
    to_fixed = (op == 1);
    unsigned_ = (U == 1);
    if (to_fixed) {
        round_zero = true;
    } else {
        round_nearest = true;
    }
    imm32 = imm6;
    esize = 32;
    frac_bits = (64 - UInt(imm6));
    elements = 2;
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vcvt_between_floating_point_and_fixed_point_advancedsimd;
    ins.m_to_string = decode_vcvt_between_floating_point_and_fixed_point_advancedsimd_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vcvt_between_floating_point_and_fixed_point_advancedsimd_a1";
    ins.encoding = encoding;
    ins.frac_bits = frac_bits;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.round_zero = round_zero;
    ins.m = m;
    ins.imm32 = imm32;
    ins.round_nearest = round_nearest;
    ins.regs = regs;
    ins.unsigned_ = unsigned_;
    ins.to_fixed = to_fixed;
    ins.U = U;
    ins.D = D;
    ins.op = op;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vcvt_between_floating_point_and_fixed_point_floating_point_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    op = get_bit(opcode, 18);
    int     U = get_bit(opcode, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int    sf = get_bit(opcode,  8);
    int    sx = get_bit(opcode,  7);
    int     i = get_bit(opcode,  5);
    int  imm4 = get_bits(opcode,  3,  0);
    int frac_bits = 0;
    int d = 0;
    int dp_operation = 0;
    int round_zero = 0;
    int round_nearest = 0;
    int unsigned_ = 0;
    int to_fixed = 0;
    int size = 0;

    to_fixed = (op == 1);
    dp_operation = (sf == 1);
    unsigned_ = (U == 1);
    size = (((sx == 0)) ? 16 : 32);
    frac_bits = (size - UInt(Concatenate(imm4, i, 1)));
    if (to_fixed) {
        round_zero = true;
    } else {
        round_nearest = true;
    }
    d = ((dp_operation) ? UInt(Concatenate(D, Vd, 4)) : UInt(Concatenate(Vd, D, 1)));
    if (unlikely((frac_bits < 0))) {
        return UnpredictableInstruction("Reason: (frac_bits < 0)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vcvt_between_floating_point_and_fixed_point_floating_point;
    ins.m_to_string = decode_vcvt_between_floating_point_and_fixed_point_floating_point_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vcvt_between_floating_point_and_fixed_point_floating_point_t1";
    ins.encoding = encoding;
    ins.frac_bits = frac_bits;
    ins.d = d;
    ins.dp_operation = dp_operation;
    ins.round_zero = round_zero;
    ins.round_nearest = round_nearest;
    ins.unsigned_ = unsigned_;
    ins.to_fixed = to_fixed;
    ins.size = size;
    ins.D = D;
    ins.op = op;
    ins.U = U;

    return ins;
}

ARMInstruction ARMDecoder::decode_vcvt_between_floating_point_and_fixed_point_floating_point_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     D = get_bit(opcode, 22);
    int    op = get_bit(opcode, 18);
    int     U = get_bit(opcode, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int    sf = get_bit(opcode,  8);
    int    sx = get_bit(opcode,  7);
    int     i = get_bit(opcode,  5);
    int  imm4 = get_bits(opcode,  3,  0);
    int frac_bits = 0;
    int d = 0;
    int dp_operation = 0;
    int round_zero = 0;
    int round_nearest = 0;
    int unsigned_ = 0;
    int to_fixed = 0;
    int size = 0;

    to_fixed = (op == 1);
    dp_operation = (sf == 1);
    unsigned_ = (U == 1);
    size = (((sx == 0)) ? 16 : 32);
    frac_bits = (size - UInt(Concatenate(imm4, i, 1)));
    if (to_fixed) {
        round_zero = true;
    } else {
        round_nearest = true;
    }
    d = ((dp_operation) ? UInt(Concatenate(D, Vd, 4)) : UInt(Concatenate(Vd, D, 1)));
    if (unlikely((frac_bits < 0))) {
        return UnpredictableInstruction("Reason: (frac_bits < 0)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vcvt_between_floating_point_and_fixed_point_floating_point;
    ins.m_to_string = decode_vcvt_between_floating_point_and_fixed_point_floating_point_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vcvt_between_floating_point_and_fixed_point_floating_point_a1";
    ins.encoding = encoding;
    ins.frac_bits = frac_bits;
    ins.d = d;
    ins.dp_operation = dp_operation;
    ins.round_zero = round_zero;
    ins.round_nearest = round_nearest;
    ins.unsigned_ = unsigned_;
    ins.to_fixed = to_fixed;
    ins.size = size;
    ins.cond = cond;
    ins.D = D;
    ins.op = op;
    ins.U = U;

    return ins;
}

ARMInstruction ARMDecoder::decode_vcvt_between_double_precision_and_single_precision_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    Vd = get_bits(opcode, 15, 12);
    int    sz = get_bit(opcode,  8);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int double_to_single = 0;
    int m = 0;
    int d = 0;

    double_to_single = (sz == 1);
    d = ((double_to_single) ? UInt(Concatenate(Vd, D, 1)) : UInt(Concatenate(D, Vd, 4)));
    m = ((double_to_single) ? UInt(Concatenate(M, Vm, 4)) : UInt(Concatenate(Vm, M, 1)));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vcvt_between_double_precision_and_single_precision;
    ins.m_to_string = decode_vcvt_between_double_precision_and_single_precision_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vcvt_between_double_precision_and_single_precision_t1";
    ins.encoding = encoding;
    ins.double_to_single = double_to_single;
    ins.m = m;
    ins.d = d;
    ins.D = D;

    return ins;
}

ARMInstruction ARMDecoder::decode_vcvt_between_double_precision_and_single_precision_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     D = get_bit(opcode, 22);
    int    Vd = get_bits(opcode, 15, 12);
    int    sz = get_bit(opcode,  8);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int double_to_single = 0;
    int m = 0;
    int d = 0;

    double_to_single = (sz == 1);
    d = ((double_to_single) ? UInt(Concatenate(Vd, D, 1)) : UInt(Concatenate(D, Vd, 4)));
    m = ((double_to_single) ? UInt(Concatenate(M, Vm, 4)) : UInt(Concatenate(Vm, M, 1)));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vcvt_between_double_precision_and_single_precision;
    ins.m_to_string = decode_vcvt_between_double_precision_and_single_precision_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vcvt_between_double_precision_and_single_precision_a1";
    ins.encoding = encoding;
    ins.double_to_single = double_to_single;
    ins.m = m;
    ins.d = d;
    ins.cond = cond;
    ins.D = D;

    return ins;
}

ARMInstruction ARMDecoder::decode_vcvt_between_half_precision_and_single_precision_advancedsimd_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 19, 18);
    int    Vd = get_bits(opcode, 15, 12);
    int    op = get_bit(opcode,  8);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int half_to_single = 0;
    int elements = 0;
    int m = 0;
    int d = 0;
    int esize = 0;

    half_to_single = (op == 1);
    if (unlikely((size != 1))) {
        return UndefinedInstruction("Reason: (size != 1)");
    }
    if (unlikely((half_to_single && (get_bit(Vd, 0) == 1)))) {
        return UndefinedInstruction("Reason: (half_to_single && (get_bit(Vd, 0) == 1))");
    }
    if (unlikely((!half_to_single && (get_bit(Vm, 0) == 1)))) {
        return UndefinedInstruction("Reason: (!half_to_single && (get_bit(Vm, 0) == 1))");
    }
    esize = 16;
    elements = 4;
    m = UInt(Concatenate(M, Vm, 4));
    d = UInt(Concatenate(D, Vd, 4));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vcvt_between_half_precision_and_single_precision_advancedsimd;
    ins.m_to_string = decode_vcvt_between_half_precision_and_single_precision_advancedsimd_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vcvt_between_half_precision_and_single_precision_advancedsimd_t1";
    ins.encoding = encoding;
    ins.half_to_single = half_to_single;
    ins.elements = elements;
    ins.m = m;
    ins.d = d;
    ins.esize = esize;
    ins.D = D;
    ins.size = size;
    ins.op = op;

    return ins;
}

ARMInstruction ARMDecoder::decode_vcvt_between_half_precision_and_single_precision_advancedsimd_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 19, 18);
    int    Vd = get_bits(opcode, 15, 12);
    int    op = get_bit(opcode,  8);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int half_to_single = 0;
    int elements = 0;
    int m = 0;
    int d = 0;
    int esize = 0;

    half_to_single = (op == 1);
    if (unlikely((size != 1))) {
        return UndefinedInstruction("Reason: (size != 1)");
    }
    if (unlikely((half_to_single && (get_bit(Vd, 0) == 1)))) {
        return UndefinedInstruction("Reason: (half_to_single && (get_bit(Vd, 0) == 1))");
    }
    if (unlikely((!half_to_single && (get_bit(Vm, 0) == 1)))) {
        return UndefinedInstruction("Reason: (!half_to_single && (get_bit(Vm, 0) == 1))");
    }
    esize = 16;
    elements = 4;
    m = UInt(Concatenate(M, Vm, 4));
    d = UInt(Concatenate(D, Vd, 4));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vcvt_between_half_precision_and_single_precision_advancedsimd;
    ins.m_to_string = decode_vcvt_between_half_precision_and_single_precision_advancedsimd_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vcvt_between_half_precision_and_single_precision_advancedsimd_a1";
    ins.encoding = encoding;
    ins.half_to_single = half_to_single;
    ins.elements = elements;
    ins.m = m;
    ins.d = d;
    ins.esize = esize;
    ins.D = D;
    ins.size = size;
    ins.op = op;

    return ins;
}

ARMInstruction ARMDecoder::decode_vcvtb_vcvtt_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    op = get_bit(opcode, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     T = get_bit(opcode,  7);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int lowbit = 0;
    int half_to_single = 0;
    int m = 0;
    int d = 0;

    half_to_single = (op == 0);
    lowbit = (((T == 1)) ? 16 : 0);
    m = UInt(Concatenate(Vm, M, 1));
    d = UInt(Concatenate(Vd, D, 1));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vcvtb_vcvtt;
    ins.m_to_string = decode_vcvtb_vcvtt_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vcvtb_vcvtt_t1";
    ins.encoding = encoding;
    ins.lowbit = lowbit;
    ins.half_to_single = half_to_single;
    ins.m = m;
    ins.d = d;
    ins.D = D;
    ins.op = op;
    ins.T = T;

    return ins;
}

ARMInstruction ARMDecoder::decode_vcvtb_vcvtt_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     D = get_bit(opcode, 22);
    int    op = get_bit(opcode, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     T = get_bit(opcode,  7);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int lowbit = 0;
    int half_to_single = 0;
    int m = 0;
    int d = 0;

    half_to_single = (op == 0);
    lowbit = (((T == 1)) ? 16 : 0);
    m = UInt(Concatenate(Vm, M, 1));
    d = UInt(Concatenate(Vd, D, 1));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vcvtb_vcvtt;
    ins.m_to_string = decode_vcvtb_vcvtt_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vcvtb_vcvtt_a1";
    ins.encoding = encoding;
    ins.lowbit = lowbit;
    ins.half_to_single = half_to_single;
    ins.m = m;
    ins.d = d;
    ins.cond = cond;
    ins.D = D;
    ins.op = op;
    ins.T = T;

    return ins;
}

ARMInstruction ARMDecoder::decode_vdiv_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int    sz = get_bit(opcode,  8);
    int     N = get_bit(opcode,  7);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int dp_operation = 0;
    int m = 0;
    int d = 0;
    int n = 0;

    if (unlikely(((FPSCR.LEN != 0) || (FPSCR.STRIDE != 0)))) {
        return SeeInstruction("VFP vectors");
    }
    dp_operation = (sz == 1);
    d = ((dp_operation) ? UInt(Concatenate(D, Vd, 4)) : UInt(Concatenate(Vd, D, 1)));
    n = ((dp_operation) ? UInt(Concatenate(N, Vn, 4)) : UInt(Concatenate(Vn, N, 1)));
    m = ((dp_operation) ? UInt(Concatenate(M, Vm, 4)) : UInt(Concatenate(Vm, M, 1)));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vdiv;
    ins.m_to_string = decode_vdiv_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vdiv_t1";
    ins.encoding = encoding;
    ins.dp_operation = dp_operation;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.D = D;

    return ins;
}

ARMInstruction ARMDecoder::decode_vdiv_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     D = get_bit(opcode, 22);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int    sz = get_bit(opcode,  8);
    int     N = get_bit(opcode,  7);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int dp_operation = 0;
    int m = 0;
    int d = 0;
    int n = 0;

    if (unlikely(((FPSCR.LEN != 0) || (FPSCR.STRIDE != 0)))) {
        return SeeInstruction("VFP vectors");
    }
    dp_operation = (sz == 1);
    d = ((dp_operation) ? UInt(Concatenate(D, Vd, 4)) : UInt(Concatenate(Vd, D, 1)));
    n = ((dp_operation) ? UInt(Concatenate(N, Vn, 4)) : UInt(Concatenate(Vn, N, 1)));
    m = ((dp_operation) ? UInt(Concatenate(M, Vm, 4)) : UInt(Concatenate(Vm, M, 1)));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vdiv;
    ins.m_to_string = decode_vdiv_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vdiv_a1";
    ins.encoding = encoding;
    ins.dp_operation = dp_operation;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;
    ins.D = D;

    return ins;
}

ARMInstruction ARMDecoder::decode_vdup_scalar_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  imm4 = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int index = 0;
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;

    if (unlikely((imm4 == 0 || imm4 == 8))) {
        return UndefinedInstruction("Reason: (imm4 == 0 || imm4 == 8)");
    }
    if (unlikely(((Q == 1) && (get_bit(Vd, 0) == 1)))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (get_bit(Vd, 0) == 1))");
    }
    switch (imm4) {
        // Values of xxx1
        case 1:
        case 3:
        case 5:
        case 7:
        case 9:
        case 11:
        case 13:
        case 15:
            esize = 8;
            elements = 8;
            index = UInt(get_bits(imm4, 3, 1));
            break;
        
        // Values of xx10
        case 2:
        case 6:
        case 10:
        case 14:
            esize = 16;
            elements = 4;
            index = UInt(get_bits(imm4, 3, 2));
            break;
        
        // Values of x100
        case 4:
        case 12:
            esize = 32;
            elements = 2;
            index = UInt(get_bit(imm4, 3));
            break;
        
    }
    
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vdup_scalar;
    ins.m_to_string = decode_vdup_scalar_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vdup_scalar_t1";
    ins.encoding = encoding;
    ins.index = index;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.D = D;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vdup_scalar_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  imm4 = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int index = 0;
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;

    if (unlikely((imm4 == 0 || imm4 == 8))) {
        return UndefinedInstruction("Reason: (imm4 == 0 || imm4 == 8)");
    }
    if (unlikely(((Q == 1) && (get_bit(Vd, 0) == 1)))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (get_bit(Vd, 0) == 1))");
    }
    switch (imm4) {
        // Values of xxx1
        case 1:
        case 3:
        case 5:
        case 7:
        case 9:
        case 11:
        case 13:
        case 15:
            esize = 8;
            elements = 8;
            index = UInt(get_bits(imm4, 3, 1));
            break;
        
        // Values of xx10
        case 2:
        case 6:
        case 10:
        case 14:
            esize = 16;
            elements = 4;
            index = UInt(get_bits(imm4, 3, 2));
            break;
        
        // Values of x100
        case 4:
        case 12:
            esize = 32;
            elements = 2;
            index = UInt(get_bit(imm4, 3));
            break;
        
    }
    
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vdup_scalar;
    ins.m_to_string = decode_vdup_scalar_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vdup_scalar_a1";
    ins.encoding = encoding;
    ins.index = index;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.D = D;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vdup_arm_core_register_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     b = get_bit(opcode, 22);
    int     Q = get_bit(opcode, 21);
    int    Vd = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int     D = get_bit(opcode,  7);
    int     e = get_bit(opcode,  5);
    int regs = 0;
    int esize = 0;
    int d = 0;
    int elements = 0;
    int t = 0;

    if (unlikely(((Q == 1) && (get_bit(Vd, 0) == 1)))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (get_bit(Vd, 0) == 1))");
    }
    d = UInt(Concatenate(D, Vd, 4));
    t = UInt(Rt);
    regs = (((Q == 0)) ? 1 : 2);
    switch (Concatenate(b, e, 1)) {
        case 0:
            esize = 32;
            elements = 2;
            break;
        
        case 1:
            esize = 16;
            elements = 4;
            break;
        
        case 2:
            esize = 8;
            elements = 8;
            break;
        
        case 3:
            return UndefinedInstruction("Reason: ");
            break;
        
    }
    
    if (unlikely(((t == 15) || ((CurrentInstrSet() != InstrSet_ARM) && (t == 13))))) {
        return UnpredictableInstruction("Reason: ((t == 15) || ((CurrentInstrSet() != InstrSet_ARM) && (t == 13)))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vdup_arm_core_register;
    ins.m_to_string = decode_vdup_arm_core_register_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vdup_arm_core_register_t1";
    ins.encoding = encoding;
    ins.regs = regs;
    ins.esize = esize;
    ins.d = d;
    ins.elements = elements;
    ins.t = t;
    ins.Q = Q;
    ins.D = D;

    return ins;
}

ARMInstruction ARMDecoder::decode_vdup_arm_core_register_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     b = get_bit(opcode, 22);
    int     Q = get_bit(opcode, 21);
    int    Vd = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int     D = get_bit(opcode,  7);
    int     e = get_bit(opcode,  5);
    int regs = 0;
    int esize = 0;
    int d = 0;
    int elements = 0;
    int t = 0;

    if (unlikely(((Q == 1) && (get_bit(Vd, 0) == 1)))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (get_bit(Vd, 0) == 1))");
    }
    d = UInt(Concatenate(D, Vd, 4));
    t = UInt(Rt);
    regs = (((Q == 0)) ? 1 : 2);
    switch (Concatenate(b, e, 1)) {
        case 0:
            esize = 32;
            elements = 2;
            break;
        
        case 1:
            esize = 16;
            elements = 4;
            break;
        
        case 2:
            esize = 8;
            elements = 8;
            break;
        
        case 3:
            return UndefinedInstruction("Reason: ");
            break;
        
    }
    
    if (unlikely(((t == 15) || ((CurrentInstrSet() != InstrSet_ARM) && (t == 13))))) {
        return UnpredictableInstruction("Reason: ((t == 15) || ((CurrentInstrSet() != InstrSet_ARM) && (t == 13)))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vdup_arm_core_register;
    ins.m_to_string = decode_vdup_arm_core_register_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vdup_arm_core_register_a1";
    ins.encoding = encoding;
    ins.regs = regs;
    ins.esize = esize;
    ins.d = d;
    ins.elements = elements;
    ins.t = t;
    ins.cond = cond;
    ins.Q = Q;
    ins.D = D;

    return ins;
}

ARMInstruction ARMDecoder::decode_veor_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int regs = 0;
    int m = 0;
    int d = 0;
    int n = 0;

    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1)))");
    }
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = veor;
    ins.m_to_string = decode_veor_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_veor_t1";
    ins.encoding = encoding;
    ins.regs = regs;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.D = D;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_veor_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int regs = 0;
    int m = 0;
    int d = 0;
    int n = 0;

    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1)))");
    }
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = veor;
    ins.m_to_string = decode_veor_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_veor_a1";
    ins.encoding = encoding;
    ins.regs = regs;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.D = D;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vext_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int  imm4 = get_bits(opcode, 11,  8);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int d = 0;
    int m = 0;
    int imm32 = 0;
    int n = 0;
    int position = 0;
    int quadword_operation = 0;

    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1)))");
    }
    if (unlikely(((Q == 0) && (get_bit(imm4, 3) == 1)))) {
        return UndefinedInstruction("Reason: ((Q == 0) && (get_bit(imm4, 3) == 1))");
    }
    imm32 = imm4;
    quadword_operation = (Q == 1);
    position = (8 * UInt(imm4));
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vext;
    ins.m_to_string = decode_vext_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vext_t1";
    ins.encoding = encoding;
    ins.d = d;
    ins.m = m;
    ins.imm32 = imm32;
    ins.n = n;
    ins.position = position;
    ins.quadword_operation = quadword_operation;
    ins.D = D;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vext_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int  imm4 = get_bits(opcode, 11,  8);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int d = 0;
    int m = 0;
    int imm32 = 0;
    int n = 0;
    int position = 0;
    int quadword_operation = 0;

    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1)))");
    }
    if (unlikely(((Q == 0) && (get_bit(imm4, 3) == 1)))) {
        return UndefinedInstruction("Reason: ((Q == 0) && (get_bit(imm4, 3) == 1))");
    }
    imm32 = imm4;
    quadword_operation = (Q == 1);
    position = (8 * UInt(imm4));
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vext;
    ins.m_to_string = decode_vext_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vext_a1";
    ins.encoding = encoding;
    ins.d = d;
    ins.m = m;
    ins.imm32 = imm32;
    ins.n = n;
    ins.position = position;
    ins.quadword_operation = quadword_operation;
    ins.D = D;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vfma_vfms_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    op = get_bit(opcode, 21);
    int    sz = get_bit(opcode, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int advsimd = 0;
    int m = 0;
    int regs = 0;
    int n = 0;
    int op1_neg = 0;

    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1)))");
    }
    if (unlikely((sz == 1))) {
        return UndefinedInstruction("Reason: (sz == 1)");
    }
    advsimd = true;
    op1_neg = (op == 1);
    esize = 32;
    elements = 2;
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vfma_vfms;
    ins.m_to_string = decode_vfma_vfms_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vfma_vfms_t1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.advsimd = advsimd;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.op1_neg = op1_neg;
    ins.D = D;
    ins.op = op;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vfma_vfms_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    op = get_bit(opcode, 21);
    int    sz = get_bit(opcode, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int advsimd = 0;
    int m = 0;
    int regs = 0;
    int n = 0;
    int op1_neg = 0;

    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1)))");
    }
    if (unlikely((sz == 1))) {
        return UndefinedInstruction("Reason: (sz == 1)");
    }
    advsimd = true;
    op1_neg = (op == 1);
    esize = 32;
    elements = 2;
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vfma_vfms;
    ins.m_to_string = decode_vfma_vfms_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vfma_vfms_a1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.advsimd = advsimd;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.op1_neg = op1_neg;
    ins.D = D;
    ins.op = op;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vfma_vfms_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int    sz = get_bit(opcode,  8);
    int     N = get_bit(opcode,  7);
    int    op = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int d = 0;
    int dp_operation = 0;
    int advsimd = 0;
    int m = 0;
    int n = 0;
    int op1_neg = 0;

    if (unlikely(((FPSCR.LEN != 0) || (FPSCR.STRIDE != 0)))) {
        return UnpredictableInstruction("Reason: ((FPSCR.LEN != 0) || (FPSCR.STRIDE != 0))");
    }
    advsimd = false;
    dp_operation = (sz == 1);
    op1_neg = (op == 1);
    d = ((dp_operation) ? UInt(Concatenate(D, Vd, 4)) : UInt(Concatenate(Vd, D, 1)));
    n = ((dp_operation) ? UInt(Concatenate(N, Vn, 4)) : UInt(Concatenate(Vn, N, 1)));
    m = ((dp_operation) ? UInt(Concatenate(M, Vm, 4)) : UInt(Concatenate(Vm, M, 1)));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vfma_vfms;
    ins.m_to_string = decode_vfma_vfms_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vfma_vfms_t2";
    ins.encoding = encoding;
    ins.d = d;
    ins.dp_operation = dp_operation;
    ins.advsimd = advsimd;
    ins.m = m;
    ins.n = n;
    ins.op1_neg = op1_neg;
    ins.D = D;
    ins.op = op;

    return ins;
}

ARMInstruction ARMDecoder::decode_vfma_vfms_a2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     D = get_bit(opcode, 22);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int    sz = get_bit(opcode,  8);
    int     N = get_bit(opcode,  7);
    int    op = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int d = 0;
    int dp_operation = 0;
    int advsimd = 0;
    int m = 0;
    int n = 0;
    int op1_neg = 0;

    if (unlikely(((FPSCR.LEN != 0) || (FPSCR.STRIDE != 0)))) {
        return UnpredictableInstruction("Reason: ((FPSCR.LEN != 0) || (FPSCR.STRIDE != 0))");
    }
    advsimd = false;
    dp_operation = (sz == 1);
    op1_neg = (op == 1);
    d = ((dp_operation) ? UInt(Concatenate(D, Vd, 4)) : UInt(Concatenate(Vd, D, 1)));
    n = ((dp_operation) ? UInt(Concatenate(N, Vn, 4)) : UInt(Concatenate(Vn, N, 1)));
    m = ((dp_operation) ? UInt(Concatenate(M, Vm, 4)) : UInt(Concatenate(Vm, M, 1)));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vfma_vfms;
    ins.m_to_string = decode_vfma_vfms_a2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vfma_vfms_a2";
    ins.encoding = encoding;
    ins.d = d;
    ins.dp_operation = dp_operation;
    ins.advsimd = advsimd;
    ins.m = m;
    ins.n = n;
    ins.op1_neg = op1_neg;
    ins.cond = cond;
    ins.D = D;
    ins.op = op;

    return ins;
}

ARMInstruction ARMDecoder::decode_vfnma_vfnms_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int    sz = get_bit(opcode,  8);
    int     N = get_bit(opcode,  7);
    int    op = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int op1_neg = 0;
    int n = 0;
    int m = 0;
    int dp_operation = 0;
    int d = 0;

    if (unlikely(((FPSCR.LEN != 0) || (FPSCR.STRIDE != 0)))) {
        return UnpredictableInstruction("Reason: ((FPSCR.LEN != 0) || (FPSCR.STRIDE != 0))");
    }
    op1_neg = (op == 1);
    dp_operation = (sz == 1);
    d = ((dp_operation) ? UInt(Concatenate(D, Vd, 4)) : UInt(Concatenate(Vd, D, 1)));
    n = ((dp_operation) ? UInt(Concatenate(N, Vn, 4)) : UInt(Concatenate(Vn, N, 1)));
    m = ((dp_operation) ? UInt(Concatenate(M, Vm, 4)) : UInt(Concatenate(Vm, M, 1)));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vfnma_vfnms;
    ins.m_to_string = decode_vfnma_vfnms_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vfnma_vfnms_t1";
    ins.encoding = encoding;
    ins.op1_neg = op1_neg;
    ins.n = n;
    ins.m = m;
    ins.dp_operation = dp_operation;
    ins.d = d;
    ins.D = D;
    ins.op = op;

    return ins;
}

ARMInstruction ARMDecoder::decode_vfnma_vfnms_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     D = get_bit(opcode, 22);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int    sz = get_bit(opcode,  8);
    int     N = get_bit(opcode,  7);
    int    op = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int op1_neg = 0;
    int n = 0;
    int m = 0;
    int dp_operation = 0;
    int d = 0;

    if (unlikely(((FPSCR.LEN != 0) || (FPSCR.STRIDE != 0)))) {
        return UnpredictableInstruction("Reason: ((FPSCR.LEN != 0) || (FPSCR.STRIDE != 0))");
    }
    op1_neg = (op == 1);
    dp_operation = (sz == 1);
    d = ((dp_operation) ? UInt(Concatenate(D, Vd, 4)) : UInt(Concatenate(Vd, D, 1)));
    n = ((dp_operation) ? UInt(Concatenate(N, Vn, 4)) : UInt(Concatenate(Vn, N, 1)));
    m = ((dp_operation) ? UInt(Concatenate(M, Vm, 4)) : UInt(Concatenate(Vm, M, 1)));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vfnma_vfnms;
    ins.m_to_string = decode_vfnma_vfnms_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vfnma_vfnms_a1";
    ins.encoding = encoding;
    ins.op1_neg = op1_neg;
    ins.n = n;
    ins.m = m;
    ins.dp_operation = dp_operation;
    ins.d = d;
    ins.cond = cond;
    ins.D = D;
    ins.op = op;

    return ins;
}

ARMInstruction ARMDecoder::decode_vhadd_vhsub_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 28);
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int    op = get_bit(opcode,  9);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int n = 0;
    int add = 0;
    int unsigned_ = 0;

    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1)))");
    }
    if (unlikely((size == 3))) {
        return UndefinedInstruction("Reason: (size == 3)");
    }
    add = (op == 0);
    unsigned_ = (U == 1);
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vhadd_vhsub;
    ins.m_to_string = decode_vhadd_vhsub_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vhadd_vhsub_t1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.add = add;
    ins.unsigned_ = unsigned_;
    ins.U = U;
    ins.D = D;
    ins.size = size;
    ins.op = op;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vhadd_vhsub_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 24);
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int    op = get_bit(opcode,  9);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int n = 0;
    int add = 0;
    int unsigned_ = 0;

    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1)))");
    }
    if (unlikely((size == 3))) {
        return UndefinedInstruction("Reason: (size == 3)");
    }
    add = (op == 0);
    unsigned_ = (U == 1);
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vhadd_vhsub;
    ins.m_to_string = decode_vhadd_vhsub_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vhadd_vhsub_a1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.add = add;
    ins.unsigned_ = unsigned_;
    ins.U = U;
    ins.D = D;
    ins.size = size;
    ins.op = op;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vld1_multiple_single_elements_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    Rn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int  type = get_bits(opcode, 11,  8);
    int  size = get_bits(opcode,  7,  6);
    int align = get_bits(opcode,  5,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int register_index = 0;
    int m = 0;
    int regs = 0;
    int n = 0;
    int wback = 0;
    int ebytes = 0;
    int alignment = 0;

    switch (type) {
        case 7:
            regs = 1;
            if (unlikely((get_bit(align, 1) == 1))) {
            return UndefinedInstruction("Reason: (get_bit(align, 1) == 1)");
        }
            break;
        
        case 10:
            regs = 2;
            if (unlikely((align == 3))) {
            return UndefinedInstruction("Reason: (align == 3)");
        }
            break;
        
        case 6:
            regs = 3;
            if (unlikely((get_bit(align, 1) == 1))) {
            return UndefinedInstruction("Reason: (get_bit(align, 1) == 1)");
        }
            break;
        
        case 2:
            regs = 4;
            break;
        
        default:
            return SeeInstruction("Related encodings");
            break;
        
    }
    
    alignment = (((align == 0)) ? 1 : (4 << UInt(align)));
    ebytes = (1 << UInt(size));
    esize = (8 * ebytes);
    elements = (8 / ebytes);
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Rn);
    m = UInt(Rm);
    wback = (m != 15);
    register_index = ((m != 15) && (m != 13));
    if (unlikely(((n == 15) || ((d + regs) > 32)))) {
        return UnpredictableInstruction("Reason: ((n == 15) || ((d + regs) > 32))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vld1_multiple_single_elements;
    ins.m_to_string = decode_vld1_multiple_single_elements_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vld1_multiple_single_elements_t1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.register_index = register_index;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.wback = wback;
    ins.ebytes = ebytes;
    ins.alignment = alignment;
    ins.D = D;
    ins.type = type;
    ins.size = size;

    return ins;
}

ARMInstruction ARMDecoder::decode_vld1_multiple_single_elements_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    Rn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int  type = get_bits(opcode, 11,  8);
    int  size = get_bits(opcode,  7,  6);
    int align = get_bits(opcode,  5,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int register_index = 0;
    int m = 0;
    int regs = 0;
    int n = 0;
    int wback = 0;
    int ebytes = 0;
    int alignment = 0;

    switch (type) {
        case 7:
            regs = 1;
            if (unlikely((get_bit(align, 1) == 1))) {
            return UndefinedInstruction("Reason: (get_bit(align, 1) == 1)");
        }
            break;
        
        case 10:
            regs = 2;
            if (unlikely((align == 3))) {
            return UndefinedInstruction("Reason: (align == 3)");
        }
            break;
        
        case 6:
            regs = 3;
            if (unlikely((get_bit(align, 1) == 1))) {
            return UndefinedInstruction("Reason: (get_bit(align, 1) == 1)");
        }
            break;
        
        case 2:
            regs = 4;
            break;
        
        default:
            return SeeInstruction("Related encodings");
            break;
        
    }
    
    alignment = (((align == 0)) ? 1 : (4 << UInt(align)));
    ebytes = (1 << UInt(size));
    esize = (8 * ebytes);
    elements = (8 / ebytes);
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Rn);
    m = UInt(Rm);
    wback = (m != 15);
    register_index = ((m != 15) && (m != 13));
    if (unlikely(((n == 15) || ((d + regs) > 32)))) {
        return UnpredictableInstruction("Reason: ((n == 15) || ((d + regs) > 32))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vld1_multiple_single_elements;
    ins.m_to_string = decode_vld1_multiple_single_elements_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vld1_multiple_single_elements_a1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.register_index = register_index;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.wback = wback;
    ins.ebytes = ebytes;
    ins.alignment = alignment;
    ins.D = D;
    ins.type = type;
    ins.size = size;

    return ins;
}

ARMInstruction ARMDecoder::decode_vld1_single_element_to_one_lane_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    Rn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int  size = get_bits(opcode, 11, 10);
    int index_align = get_bits(opcode,  7,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int index = 0;
    int d = 0;
    int esize = 0;
    int register_index = 0;
    int m = 0;
    int n = 0;
    int wback = 0;
    int ebytes = 0;
    int alignment = 0;

    if (unlikely((size == 3))) {
        return SeeInstruction("VLD1 (single element to all lanes)");
    }
    switch (size) {
        case 0:
            if (unlikely((get_bit(index_align, 0) != 0))) {
            return UndefinedInstruction("Reason: (get_bit(index_align, 0) != 0)");
        }
            ebytes = 1;
            esize = 8;
            index = UInt(get_bits(index_align, 3, 1));
            alignment = 1;
            break;
        
        case 1:
            if (unlikely((get_bit(index_align, 1) != 0))) {
            return UndefinedInstruction("Reason: (get_bit(index_align, 1) != 0)");
        }
            ebytes = 2;
            esize = 16;
            index = UInt(get_bits(index_align, 3, 2));
            alignment = (((get_bit(index_align, 0) == 0)) ? 1 : 2);
            break;
        
        case 2:
            if (unlikely((get_bit(index_align, 2) != 0))) {
            return UndefinedInstruction("Reason: (get_bit(index_align, 2) != 0)");
        }
            if (unlikely(((get_bits(index_align, 1, 0) != 0) && (get_bits(index_align, 1, 0) != 3)))) {
            return UndefinedInstruction("Reason: ((get_bits(index_align, 1, 0) != 0) && (get_bits(index_align, 1, 0) != 3))");
        }
            ebytes = 4;
            esize = 32;
            index = UInt(get_bit(index_align, 3));
            alignment = (((get_bits(index_align, 1, 0) == 0)) ? 1 : 4);
            break;
        
    }
    
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Rn);
    m = UInt(Rm);
    wback = (m != 15);
    register_index = ((m != 15) && (m != 13));
    if (unlikely((n == 15))) {
        return UnpredictableInstruction("Reason: (n == 15)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vld1_single_element_to_one_lane;
    ins.m_to_string = decode_vld1_single_element_to_one_lane_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vld1_single_element_to_one_lane_t1";
    ins.encoding = encoding;
    ins.index = index;
    ins.d = d;
    ins.esize = esize;
    ins.register_index = register_index;
    ins.m = m;
    ins.n = n;
    ins.wback = wback;
    ins.ebytes = ebytes;
    ins.alignment = alignment;
    ins.D = D;
    ins.size = size;

    return ins;
}

ARMInstruction ARMDecoder::decode_vld1_single_element_to_one_lane_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    Rn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int  size = get_bits(opcode, 11, 10);
    int index_align = get_bits(opcode,  7,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int index = 0;
    int d = 0;
    int esize = 0;
    int register_index = 0;
    int m = 0;
    int n = 0;
    int wback = 0;
    int ebytes = 0;
    int alignment = 0;

    if (unlikely((size == 3))) {
        return SeeInstruction("VLD1 (single element to all lanes)");
    }
    switch (size) {
        case 0:
            if (unlikely((get_bit(index_align, 0) != 0))) {
            return UndefinedInstruction("Reason: (get_bit(index_align, 0) != 0)");
        }
            ebytes = 1;
            esize = 8;
            index = UInt(get_bits(index_align, 3, 1));
            alignment = 1;
            break;
        
        case 1:
            if (unlikely((get_bit(index_align, 1) != 0))) {
            return UndefinedInstruction("Reason: (get_bit(index_align, 1) != 0)");
        }
            ebytes = 2;
            esize = 16;
            index = UInt(get_bits(index_align, 3, 2));
            alignment = (((get_bit(index_align, 0) == 0)) ? 1 : 2);
            break;
        
        case 2:
            if (unlikely((get_bit(index_align, 2) != 0))) {
            return UndefinedInstruction("Reason: (get_bit(index_align, 2) != 0)");
        }
            if (unlikely(((get_bits(index_align, 1, 0) != 0) && (get_bits(index_align, 1, 0) != 3)))) {
            return UndefinedInstruction("Reason: ((get_bits(index_align, 1, 0) != 0) && (get_bits(index_align, 1, 0) != 3))");
        }
            ebytes = 4;
            esize = 32;
            index = UInt(get_bit(index_align, 3));
            alignment = (((get_bits(index_align, 1, 0) == 0)) ? 1 : 4);
            break;
        
    }
    
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Rn);
    m = UInt(Rm);
    wback = (m != 15);
    register_index = ((m != 15) && (m != 13));
    if (unlikely((n == 15))) {
        return UnpredictableInstruction("Reason: (n == 15)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vld1_single_element_to_one_lane;
    ins.m_to_string = decode_vld1_single_element_to_one_lane_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vld1_single_element_to_one_lane_a1";
    ins.encoding = encoding;
    ins.index = index;
    ins.d = d;
    ins.esize = esize;
    ins.register_index = register_index;
    ins.m = m;
    ins.n = n;
    ins.wback = wback;
    ins.ebytes = ebytes;
    ins.alignment = alignment;
    ins.D = D;
    ins.size = size;

    return ins;
}

ARMInstruction ARMDecoder::decode_vld1_single_element_to_all_lanes_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    Rn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int  size = get_bits(opcode,  7,  6);
    int     T = get_bit(opcode,  5);
    int     a = get_bit(opcode,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int register_index = 0;
    int m = 0;
    int regs = 0;
    int n = 0;
    int wback = 0;
    int ebytes = 0;
    int alignment = 0;

    if (unlikely(((size == 3) || ((size == 0) && (a == 1))))) {
        return UndefinedInstruction("Reason: ((size == 3) || ((size == 0) && (a == 1)))");
    }
    ebytes = (1 << UInt(size));
    elements = (8 / ebytes);
    regs = (((T == 0)) ? 1 : 2);
    alignment = (((a == 0)) ? 1 : ebytes);
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Rn);
    m = UInt(Rm);
    wback = (m != 15);
    register_index = ((m != 15) && (m != 13));
    if (unlikely(((n == 15) || ((d + regs) > 32)))) {
        return UnpredictableInstruction("Reason: ((n == 15) || ((d + regs) > 32))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vld1_single_element_to_all_lanes;
    ins.m_to_string = decode_vld1_single_element_to_all_lanes_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vld1_single_element_to_all_lanes_t1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.register_index = register_index;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.wback = wback;
    ins.ebytes = ebytes;
    ins.alignment = alignment;
    ins.D = D;
    ins.size = size;
    ins.T = T;

    return ins;
}

ARMInstruction ARMDecoder::decode_vld1_single_element_to_all_lanes_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    Rn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int  size = get_bits(opcode,  7,  6);
    int     T = get_bit(opcode,  5);
    int     a = get_bit(opcode,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int register_index = 0;
    int m = 0;
    int regs = 0;
    int n = 0;
    int wback = 0;
    int ebytes = 0;
    int alignment = 0;

    if (unlikely(((size == 3) || ((size == 0) && (a == 1))))) {
        return UndefinedInstruction("Reason: ((size == 3) || ((size == 0) && (a == 1)))");
    }
    ebytes = (1 << UInt(size));
    elements = (8 / ebytes);
    regs = (((T == 0)) ? 1 : 2);
    alignment = (((a == 0)) ? 1 : ebytes);
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Rn);
    m = UInt(Rm);
    wback = (m != 15);
    register_index = ((m != 15) && (m != 13));
    if (unlikely(((n == 15) || ((d + regs) > 32)))) {
        return UnpredictableInstruction("Reason: ((n == 15) || ((d + regs) > 32))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vld1_single_element_to_all_lanes;
    ins.m_to_string = decode_vld1_single_element_to_all_lanes_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vld1_single_element_to_all_lanes_a1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.register_index = register_index;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.wback = wback;
    ins.ebytes = ebytes;
    ins.alignment = alignment;
    ins.D = D;
    ins.size = size;
    ins.T = T;

    return ins;
}

ARMInstruction ARMDecoder::decode_vld2_multiple_2_element_structures_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    Rn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int  type = get_bits(opcode, 11,  8);
    int  size = get_bits(opcode,  7,  6);
    int align = get_bits(opcode,  5,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int register_index = 0;
    int m = 0;
    int regs = 0;
    int n = 0;
    int wback = 0;
    int ebytes = 0;
    int d2 = 0;
    int alignment = 0;
    int inc = 0;

    if (unlikely((size == 3))) {
        return UndefinedInstruction("Reason: (size == 3)");
    }
    switch (type) {
        case 8:
            regs = 1;
            inc = 1;
            if (unlikely((align == 3))) {
            return UndefinedInstruction("Reason: (align == 3)");
        }
            break;
        
        case 9:
            regs = 1;
            inc = 2;
            if (unlikely((align == 3))) {
            return UndefinedInstruction("Reason: (align == 3)");
        }
            break;
        
        case 3:
            regs = 2;
            inc = 2;
            break;
        
        default:
            return SeeInstruction("Related encodings");
            break;
        
    }
    
    alignment = (((align == 0)) ? 1 : (4 << UInt(align)));
    ebytes = (1 << UInt(size));
    esize = (8 * ebytes);
    elements = (8 / ebytes);
    d = UInt(Concatenate(D, Vd, 4));
    d2 = (d + inc);
    n = UInt(Rn);
    m = UInt(Rm);
    wback = (m != 15);
    register_index = ((m != 15) && (m != 13));
    if (unlikely(((n == 15) || ((d2 + regs) > 32)))) {
        return UnpredictableInstruction("Reason: ((n == 15) || ((d2 + regs) > 32))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vld2_multiple_2_element_structures;
    ins.m_to_string = decode_vld2_multiple_2_element_structures_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vld2_multiple_2_element_structures_t1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.register_index = register_index;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.wback = wback;
    ins.ebytes = ebytes;
    ins.d2 = d2;
    ins.alignment = alignment;
    ins.inc = inc;
    ins.D = D;
    ins.type = type;
    ins.size = size;

    return ins;
}

ARMInstruction ARMDecoder::decode_vld2_multiple_2_element_structures_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    Rn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int  type = get_bits(opcode, 11,  8);
    int  size = get_bits(opcode,  7,  6);
    int align = get_bits(opcode,  5,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int register_index = 0;
    int m = 0;
    int regs = 0;
    int n = 0;
    int wback = 0;
    int ebytes = 0;
    int d2 = 0;
    int alignment = 0;
    int inc = 0;

    if (unlikely((size == 3))) {
        return UndefinedInstruction("Reason: (size == 3)");
    }
    switch (type) {
        case 8:
            regs = 1;
            inc = 1;
            if (unlikely((align == 3))) {
            return UndefinedInstruction("Reason: (align == 3)");
        }
            break;
        
        case 9:
            regs = 1;
            inc = 2;
            if (unlikely((align == 3))) {
            return UndefinedInstruction("Reason: (align == 3)");
        }
            break;
        
        case 3:
            regs = 2;
            inc = 2;
            break;
        
        default:
            return SeeInstruction("Related encodings");
            break;
        
    }
    
    alignment = (((align == 0)) ? 1 : (4 << UInt(align)));
    ebytes = (1 << UInt(size));
    esize = (8 * ebytes);
    elements = (8 / ebytes);
    d = UInt(Concatenate(D, Vd, 4));
    d2 = (d + inc);
    n = UInt(Rn);
    m = UInt(Rm);
    wback = (m != 15);
    register_index = ((m != 15) && (m != 13));
    if (unlikely(((n == 15) || ((d2 + regs) > 32)))) {
        return UnpredictableInstruction("Reason: ((n == 15) || ((d2 + regs) > 32))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vld2_multiple_2_element_structures;
    ins.m_to_string = decode_vld2_multiple_2_element_structures_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vld2_multiple_2_element_structures_a1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.register_index = register_index;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.wback = wback;
    ins.ebytes = ebytes;
    ins.d2 = d2;
    ins.alignment = alignment;
    ins.inc = inc;
    ins.D = D;
    ins.type = type;
    ins.size = size;

    return ins;
}

ARMInstruction ARMDecoder::decode_vld2_single_2_element_structure_to_one_lane_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    Rn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int  size = get_bits(opcode, 11, 10);
    int index_align = get_bits(opcode,  7,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int index = 0;
    int d = 0;
    int esize = 0;
    int register_index = 0;
    int m = 0;
    int n = 0;
    int wback = 0;
    int ebytes = 0;
    int d2 = 0;
    int alignment = 0;
    int inc = 0;

    if (unlikely((size == 3))) {
        return SeeInstruction("VLD2 (single 2-element structure to all lanes)");
    }
    switch (size) {
        case 0:
            ebytes = 1;
            esize = 8;
            index = UInt(get_bits(index_align, 3, 1));
            inc = 1;
            alignment = (((get_bit(index_align, 0) == 0)) ? 1 : 2);
            break;
        
        case 1:
            ebytes = 2;
            esize = 16;
            index = UInt(get_bits(index_align, 3, 2));
            inc = (((get_bit(index_align, 1) == 0)) ? 1 : 2);
            alignment = (((get_bit(index_align, 0) == 0)) ? 1 : 4);
            break;
        
        case 2:
            if (unlikely((get_bit(index_align, 1) != 0))) {
            return UndefinedInstruction("Reason: (get_bit(index_align, 1) != 0)");
        }
            ebytes = 4;
            esize = 32;
            index = UInt(get_bit(index_align, 3));
            inc = (((get_bit(index_align, 2) == 0)) ? 1 : 2);
            alignment = (((get_bit(index_align, 0) == 0)) ? 1 : 8);
            break;
        
    }
    
    d = UInt(Concatenate(D, Vd, 4));
    d2 = (d + inc);
    n = UInt(Rn);
    m = UInt(Rm);
    wback = (m != 15);
    register_index = ((m != 15) && (m != 13));
    if (unlikely(((n == 15) || (d2 > 31)))) {
        return UnpredictableInstruction("Reason: ((n == 15) || (d2 > 31))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vld2_single_2_element_structure_to_one_lane;
    ins.m_to_string = decode_vld2_single_2_element_structure_to_one_lane_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vld2_single_2_element_structure_to_one_lane_t1";
    ins.encoding = encoding;
    ins.index = index;
    ins.d = d;
    ins.esize = esize;
    ins.register_index = register_index;
    ins.m = m;
    ins.n = n;
    ins.wback = wback;
    ins.ebytes = ebytes;
    ins.d2 = d2;
    ins.alignment = alignment;
    ins.inc = inc;
    ins.D = D;
    ins.size = size;

    return ins;
}

ARMInstruction ARMDecoder::decode_vld2_single_2_element_structure_to_one_lane_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    Rn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int  size = get_bits(opcode, 11, 10);
    int index_align = get_bits(opcode,  7,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int index = 0;
    int d = 0;
    int esize = 0;
    int register_index = 0;
    int m = 0;
    int n = 0;
    int wback = 0;
    int ebytes = 0;
    int d2 = 0;
    int alignment = 0;
    int inc = 0;

    if (unlikely((size == 3))) {
        return SeeInstruction("VLD2 (single 2-element structure to all lanes)");
    }
    switch (size) {
        case 0:
            ebytes = 1;
            esize = 8;
            index = UInt(get_bits(index_align, 3, 1));
            inc = 1;
            alignment = (((get_bit(index_align, 0) == 0)) ? 1 : 2);
            break;
        
        case 1:
            ebytes = 2;
            esize = 16;
            index = UInt(get_bits(index_align, 3, 2));
            inc = (((get_bit(index_align, 1) == 0)) ? 1 : 2);
            alignment = (((get_bit(index_align, 0) == 0)) ? 1 : 4);
            break;
        
        case 2:
            if (unlikely((get_bit(index_align, 1) != 0))) {
            return UndefinedInstruction("Reason: (get_bit(index_align, 1) != 0)");
        }
            ebytes = 4;
            esize = 32;
            index = UInt(get_bit(index_align, 3));
            inc = (((get_bit(index_align, 2) == 0)) ? 1 : 2);
            alignment = (((get_bit(index_align, 0) == 0)) ? 1 : 8);
            break;
        
    }
    
    d = UInt(Concatenate(D, Vd, 4));
    d2 = (d + inc);
    n = UInt(Rn);
    m = UInt(Rm);
    wback = (m != 15);
    register_index = ((m != 15) && (m != 13));
    if (unlikely(((n == 15) || (d2 > 31)))) {
        return UnpredictableInstruction("Reason: ((n == 15) || (d2 > 31))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vld2_single_2_element_structure_to_one_lane;
    ins.m_to_string = decode_vld2_single_2_element_structure_to_one_lane_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vld2_single_2_element_structure_to_one_lane_a1";
    ins.encoding = encoding;
    ins.index = index;
    ins.d = d;
    ins.esize = esize;
    ins.register_index = register_index;
    ins.m = m;
    ins.n = n;
    ins.wback = wback;
    ins.ebytes = ebytes;
    ins.d2 = d2;
    ins.alignment = alignment;
    ins.inc = inc;
    ins.D = D;
    ins.size = size;

    return ins;
}

ARMInstruction ARMDecoder::decode_vld2_single_2_element_structure_to_all_lanes_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    Rn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int  size = get_bits(opcode,  7,  6);
    int     T = get_bit(opcode,  5);
    int     a = get_bit(opcode,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int register_index = 0;
    int m = 0;
    int n = 0;
    int wback = 0;
    int ebytes = 0;
    int d2 = 0;
    int alignment = 0;
    int inc = 0;

    if (unlikely((size == 3))) {
        return UndefinedInstruction("Reason: (size == 3)");
    }
    ebytes = (1 << UInt(size));
    elements = (8 / ebytes);
    alignment = (((a == 0)) ? 1 : (2 * ebytes));
    inc = (((T == 0)) ? 1 : 2);
    d = UInt(Concatenate(D, Vd, 4));
    d2 = (d + inc);
    n = UInt(Rn);
    m = UInt(Rm);
    wback = (m != 15);
    register_index = ((m != 15) && (m != 13));
    if (unlikely(((n == 15) || (d2 > 31)))) {
        return UnpredictableInstruction("Reason: ((n == 15) || (d2 > 31))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vld2_single_2_element_structure_to_all_lanes;
    ins.m_to_string = decode_vld2_single_2_element_structure_to_all_lanes_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vld2_single_2_element_structure_to_all_lanes_t1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.register_index = register_index;
    ins.m = m;
    ins.n = n;
    ins.wback = wback;
    ins.ebytes = ebytes;
    ins.d2 = d2;
    ins.alignment = alignment;
    ins.inc = inc;
    ins.D = D;
    ins.size = size;
    ins.T = T;

    return ins;
}

ARMInstruction ARMDecoder::decode_vld2_single_2_element_structure_to_all_lanes_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    Rn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int  size = get_bits(opcode,  7,  6);
    int     T = get_bit(opcode,  5);
    int     a = get_bit(opcode,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int register_index = 0;
    int m = 0;
    int n = 0;
    int wback = 0;
    int ebytes = 0;
    int d2 = 0;
    int alignment = 0;
    int inc = 0;

    if (unlikely((size == 3))) {
        return UndefinedInstruction("Reason: (size == 3)");
    }
    ebytes = (1 << UInt(size));
    elements = (8 / ebytes);
    alignment = (((a == 0)) ? 1 : (2 * ebytes));
    inc = (((T == 0)) ? 1 : 2);
    d = UInt(Concatenate(D, Vd, 4));
    d2 = (d + inc);
    n = UInt(Rn);
    m = UInt(Rm);
    wback = (m != 15);
    register_index = ((m != 15) && (m != 13));
    if (unlikely(((n == 15) || (d2 > 31)))) {
        return UnpredictableInstruction("Reason: ((n == 15) || (d2 > 31))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vld2_single_2_element_structure_to_all_lanes;
    ins.m_to_string = decode_vld2_single_2_element_structure_to_all_lanes_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vld2_single_2_element_structure_to_all_lanes_a1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.register_index = register_index;
    ins.m = m;
    ins.n = n;
    ins.wback = wback;
    ins.ebytes = ebytes;
    ins.d2 = d2;
    ins.alignment = alignment;
    ins.inc = inc;
    ins.D = D;
    ins.size = size;
    ins.T = T;

    return ins;
}

ARMInstruction ARMDecoder::decode_vld3_multiple_3_element_structures_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    Rn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int  type = get_bits(opcode, 11,  8);
    int  size = get_bits(opcode,  7,  6);
    int align = get_bits(opcode,  5,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int register_index = 0;
    int m = 0;
    int n = 0;
    int wback = 0;
    int ebytes = 0;
    int d2 = 0;
    int d3 = 0;
    int alignment = 0;
    int inc = 0;

    if (unlikely(((size == 3) || (get_bit(align, 1) == 1)))) {
        return UndefinedInstruction("Reason: ((size == 3) || (get_bit(align, 1) == 1))");
    }
    switch (type) {
        case 4:
            inc = 1;
            break;
        
        case 5:
            inc = 2;
            break;
        
        default:
            return SeeInstruction("Related encodings");
            break;
        
    }
    
    alignment = (((get_bit(align, 0) == 0)) ? 1 : 8);
    ebytes = (1 << UInt(size));
    esize = (8 * ebytes);
    elements = (8 / ebytes);
    d = UInt(Concatenate(D, Vd, 4));
    d2 = (d + inc);
    d3 = (d2 + inc);
    n = UInt(Rn);
    m = UInt(Rm);
    wback = (m != 15);
    register_index = ((m != 15) && (m != 13));
    if (unlikely(((n == 15) || (d3 > 31)))) {
        return UnpredictableInstruction("Reason: ((n == 15) || (d3 > 31))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vld3_multiple_3_element_structures;
    ins.m_to_string = decode_vld3_multiple_3_element_structures_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vld3_multiple_3_element_structures_t1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.register_index = register_index;
    ins.m = m;
    ins.n = n;
    ins.wback = wback;
    ins.ebytes = ebytes;
    ins.d2 = d2;
    ins.d3 = d3;
    ins.alignment = alignment;
    ins.inc = inc;
    ins.D = D;
    ins.type = type;
    ins.size = size;

    return ins;
}

ARMInstruction ARMDecoder::decode_vld3_multiple_3_element_structures_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    Rn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int  type = get_bits(opcode, 11,  8);
    int  size = get_bits(opcode,  7,  6);
    int align = get_bits(opcode,  5,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int register_index = 0;
    int m = 0;
    int n = 0;
    int wback = 0;
    int ebytes = 0;
    int d2 = 0;
    int d3 = 0;
    int alignment = 0;
    int inc = 0;

    if (unlikely(((size == 3) || (get_bit(align, 1) == 1)))) {
        return UndefinedInstruction("Reason: ((size == 3) || (get_bit(align, 1) == 1))");
    }
    switch (type) {
        case 4:
            inc = 1;
            break;
        
        case 5:
            inc = 2;
            break;
        
        default:
            return SeeInstruction("Related encodings");
            break;
        
    }
    
    alignment = (((get_bit(align, 0) == 0)) ? 1 : 8);
    ebytes = (1 << UInt(size));
    esize = (8 * ebytes);
    elements = (8 / ebytes);
    d = UInt(Concatenate(D, Vd, 4));
    d2 = (d + inc);
    d3 = (d2 + inc);
    n = UInt(Rn);
    m = UInt(Rm);
    wback = (m != 15);
    register_index = ((m != 15) && (m != 13));
    if (unlikely(((n == 15) || (d3 > 31)))) {
        return UnpredictableInstruction("Reason: ((n == 15) || (d3 > 31))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vld3_multiple_3_element_structures;
    ins.m_to_string = decode_vld3_multiple_3_element_structures_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vld3_multiple_3_element_structures_a1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.register_index = register_index;
    ins.m = m;
    ins.n = n;
    ins.wback = wback;
    ins.ebytes = ebytes;
    ins.d2 = d2;
    ins.d3 = d3;
    ins.alignment = alignment;
    ins.inc = inc;
    ins.D = D;
    ins.type = type;
    ins.size = size;

    return ins;
}

ARMInstruction ARMDecoder::decode_vld3_single_3_element_structure_to_one_lane_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    Rn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int  size = get_bits(opcode, 11, 10);
    int index_align = get_bits(opcode,  7,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int index = 0;
    int d = 0;
    int esize = 0;
    int register_index = 0;
    int m = 0;
    int n = 0;
    int wback = 0;
    int ebytes = 0;
    int d2 = 0;
    int d3 = 0;
    int inc = 0;

    if (unlikely((size == 3))) {
        return SeeInstruction("VLD3 (single 3-element structure to all lanes)");
    }
    switch (size) {
        case 0:
            if (unlikely((get_bit(index_align, 0) != 0))) {
            return UndefinedInstruction("Reason: (get_bit(index_align, 0) != 0)");
        }
            ebytes = 1;
            esize = 8;
            index = UInt(get_bits(index_align, 3, 1));
            inc = 1;
            break;
        
        case 1:
            if (unlikely((get_bit(index_align, 0) != 0))) {
            return UndefinedInstruction("Reason: (get_bit(index_align, 0) != 0)");
        }
            ebytes = 2;
            esize = 16;
            index = UInt(get_bits(index_align, 3, 2));
            inc = (((get_bit(index_align, 1) == 0)) ? 1 : 2);
            break;
        
        case 2:
            if (unlikely((get_bits(index_align, 1, 0) != 0))) {
            return UndefinedInstruction("Reason: (get_bits(index_align, 1, 0) != 0)");
        }
            ebytes = 4;
            esize = 32;
            index = UInt(get_bit(index_align, 3));
            inc = (((get_bit(index_align, 2) == 0)) ? 1 : 2);
            break;
        
    }
    
    d = UInt(Concatenate(D, Vd, 4));
    d2 = (d + inc);
    d3 = (d2 + inc);
    n = UInt(Rn);
    m = UInt(Rm);
    wback = (m != 15);
    register_index = ((m != 15) && (m != 13));
    if (unlikely(((n == 15) || (d3 > 31)))) {
        return UnpredictableInstruction("Reason: ((n == 15) || (d3 > 31))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vld3_single_3_element_structure_to_one_lane;
    ins.m_to_string = decode_vld3_single_3_element_structure_to_one_lane_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vld3_single_3_element_structure_to_one_lane_t1";
    ins.encoding = encoding;
    ins.index = index;
    ins.d = d;
    ins.esize = esize;
    ins.register_index = register_index;
    ins.m = m;
    ins.n = n;
    ins.wback = wback;
    ins.ebytes = ebytes;
    ins.d2 = d2;
    ins.d3 = d3;
    ins.inc = inc;
    ins.D = D;
    ins.size = size;

    return ins;
}

ARMInstruction ARMDecoder::decode_vld3_single_3_element_structure_to_one_lane_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    Rn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int  size = get_bits(opcode, 11, 10);
    int index_align = get_bits(opcode,  7,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int index = 0;
    int d = 0;
    int esize = 0;
    int register_index = 0;
    int m = 0;
    int n = 0;
    int wback = 0;
    int ebytes = 0;
    int d2 = 0;
    int d3 = 0;
    int inc = 0;

    if (unlikely((size == 3))) {
        return SeeInstruction("VLD3 (single 3-element structure to all lanes)");
    }
    switch (size) {
        case 0:
            if (unlikely((get_bit(index_align, 0) != 0))) {
            return UndefinedInstruction("Reason: (get_bit(index_align, 0) != 0)");
        }
            ebytes = 1;
            esize = 8;
            index = UInt(get_bits(index_align, 3, 1));
            inc = 1;
            break;
        
        case 1:
            if (unlikely((get_bit(index_align, 0) != 0))) {
            return UndefinedInstruction("Reason: (get_bit(index_align, 0) != 0)");
        }
            ebytes = 2;
            esize = 16;
            index = UInt(get_bits(index_align, 3, 2));
            inc = (((get_bit(index_align, 1) == 0)) ? 1 : 2);
            break;
        
        case 2:
            if (unlikely((get_bits(index_align, 1, 0) != 0))) {
            return UndefinedInstruction("Reason: (get_bits(index_align, 1, 0) != 0)");
        }
            ebytes = 4;
            esize = 32;
            index = UInt(get_bit(index_align, 3));
            inc = (((get_bit(index_align, 2) == 0)) ? 1 : 2);
            break;
        
    }
    
    d = UInt(Concatenate(D, Vd, 4));
    d2 = (d + inc);
    d3 = (d2 + inc);
    n = UInt(Rn);
    m = UInt(Rm);
    wback = (m != 15);
    register_index = ((m != 15) && (m != 13));
    if (unlikely(((n == 15) || (d3 > 31)))) {
        return UnpredictableInstruction("Reason: ((n == 15) || (d3 > 31))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vld3_single_3_element_structure_to_one_lane;
    ins.m_to_string = decode_vld3_single_3_element_structure_to_one_lane_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vld3_single_3_element_structure_to_one_lane_a1";
    ins.encoding = encoding;
    ins.index = index;
    ins.d = d;
    ins.esize = esize;
    ins.register_index = register_index;
    ins.m = m;
    ins.n = n;
    ins.wback = wback;
    ins.ebytes = ebytes;
    ins.d2 = d2;
    ins.d3 = d3;
    ins.inc = inc;
    ins.D = D;
    ins.size = size;

    return ins;
}

ARMInstruction ARMDecoder::decode_vld3_single_3_element_structure_to_all_lanes_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    Rn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int  size = get_bits(opcode,  7,  6);
    int     T = get_bit(opcode,  5);
    int     a = get_bit(opcode,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int register_index = 0;
    int m = 0;
    int n = 0;
    int wback = 0;
    int ebytes = 0;
    int d2 = 0;
    int d3 = 0;
    int inc = 0;

    if (unlikely(((size == 3) || (a == 1)))) {
        return UndefinedInstruction("Reason: ((size == 3) || (a == 1))");
    }
    ebytes = (1 << UInt(size));
    elements = (8 / ebytes);
    inc = (((T == 0)) ? 1 : 2);
    d = UInt(Concatenate(D, Vd, 4));
    d2 = (d + inc);
    d3 = (d2 + inc);
    n = UInt(Rn);
    m = UInt(Rm);
    wback = (m != 15);
    register_index = ((m != 15) && (m != 13));
    if (unlikely(((n == 15) || (d3 > 31)))) {
        return UnpredictableInstruction("Reason: ((n == 15) || (d3 > 31))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vld3_single_3_element_structure_to_all_lanes;
    ins.m_to_string = decode_vld3_single_3_element_structure_to_all_lanes_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vld3_single_3_element_structure_to_all_lanes_t1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.register_index = register_index;
    ins.m = m;
    ins.n = n;
    ins.wback = wback;
    ins.ebytes = ebytes;
    ins.d2 = d2;
    ins.d3 = d3;
    ins.inc = inc;
    ins.D = D;
    ins.size = size;
    ins.T = T;

    return ins;
}

ARMInstruction ARMDecoder::decode_vld3_single_3_element_structure_to_all_lanes_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    Rn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int  size = get_bits(opcode,  7,  6);
    int     T = get_bit(opcode,  5);
    int     a = get_bit(opcode,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int register_index = 0;
    int m = 0;
    int n = 0;
    int wback = 0;
    int ebytes = 0;
    int d2 = 0;
    int d3 = 0;
    int inc = 0;

    if (unlikely(((size == 3) || (a == 1)))) {
        return UndefinedInstruction("Reason: ((size == 3) || (a == 1))");
    }
    ebytes = (1 << UInt(size));
    elements = (8 / ebytes);
    inc = (((T == 0)) ? 1 : 2);
    d = UInt(Concatenate(D, Vd, 4));
    d2 = (d + inc);
    d3 = (d2 + inc);
    n = UInt(Rn);
    m = UInt(Rm);
    wback = (m != 15);
    register_index = ((m != 15) && (m != 13));
    if (unlikely(((n == 15) || (d3 > 31)))) {
        return UnpredictableInstruction("Reason: ((n == 15) || (d3 > 31))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vld3_single_3_element_structure_to_all_lanes;
    ins.m_to_string = decode_vld3_single_3_element_structure_to_all_lanes_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vld3_single_3_element_structure_to_all_lanes_a1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.register_index = register_index;
    ins.m = m;
    ins.n = n;
    ins.wback = wback;
    ins.ebytes = ebytes;
    ins.d2 = d2;
    ins.d3 = d3;
    ins.inc = inc;
    ins.D = D;
    ins.size = size;
    ins.T = T;

    return ins;
}

ARMInstruction ARMDecoder::decode_vld4_multiple_4_element_structures_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    Rn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int  type = get_bits(opcode, 11,  8);
    int  size = get_bits(opcode,  7,  6);
    int align = get_bits(opcode,  5,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int register_index = 0;
    int m = 0;
    int n = 0;
    int wback = 0;
    int ebytes = 0;
    int d4 = 0;
    int d2 = 0;
    int d3 = 0;
    int alignment = 0;
    int inc = 0;

    if (unlikely((size == 3))) {
        return UndefinedInstruction("Reason: (size == 3)");
    }
    switch (type) {
        case 0:
            inc = 1;
            break;
        
        case 1:
            inc = 2;
            break;
        
        default:
            return SeeInstruction("Related encodings");
            break;
        
    }
    
    alignment = (((align == 0)) ? 1 : (4 << UInt(align)));
    ebytes = (1 << UInt(size));
    esize = (8 * ebytes);
    elements = (8 / ebytes);
    d = UInt(Concatenate(D, Vd, 4));
    d2 = (d + inc);
    d3 = (d2 + inc);
    d4 = (d3 + inc);
    n = UInt(Rn);
    m = UInt(Rm);
    wback = (m != 15);
    register_index = ((m != 15) && (m != 13));
    if (unlikely(((n == 15) || (d4 > 31)))) {
        return UnpredictableInstruction("Reason: ((n == 15) || (d4 > 31))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vld4_multiple_4_element_structures;
    ins.m_to_string = decode_vld4_multiple_4_element_structures_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vld4_multiple_4_element_structures_t1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.register_index = register_index;
    ins.m = m;
    ins.n = n;
    ins.wback = wback;
    ins.ebytes = ebytes;
    ins.d4 = d4;
    ins.d2 = d2;
    ins.d3 = d3;
    ins.alignment = alignment;
    ins.inc = inc;
    ins.D = D;
    ins.type = type;
    ins.size = size;

    return ins;
}

ARMInstruction ARMDecoder::decode_vld4_multiple_4_element_structures_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    Rn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int  type = get_bits(opcode, 11,  8);
    int  size = get_bits(opcode,  7,  6);
    int align = get_bits(opcode,  5,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int register_index = 0;
    int m = 0;
    int n = 0;
    int wback = 0;
    int ebytes = 0;
    int d4 = 0;
    int d2 = 0;
    int d3 = 0;
    int alignment = 0;
    int inc = 0;

    if (unlikely((size == 3))) {
        return UndefinedInstruction("Reason: (size == 3)");
    }
    switch (type) {
        case 0:
            inc = 1;
            break;
        
        case 1:
            inc = 2;
            break;
        
        default:
            return SeeInstruction("Related encodings");
            break;
        
    }
    
    alignment = (((align == 0)) ? 1 : (4 << UInt(align)));
    ebytes = (1 << UInt(size));
    esize = (8 * ebytes);
    elements = (8 / ebytes);
    d = UInt(Concatenate(D, Vd, 4));
    d2 = (d + inc);
    d3 = (d2 + inc);
    d4 = (d3 + inc);
    n = UInt(Rn);
    m = UInt(Rm);
    wback = (m != 15);
    register_index = ((m != 15) && (m != 13));
    if (unlikely(((n == 15) || (d4 > 31)))) {
        return UnpredictableInstruction("Reason: ((n == 15) || (d4 > 31))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vld4_multiple_4_element_structures;
    ins.m_to_string = decode_vld4_multiple_4_element_structures_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vld4_multiple_4_element_structures_a1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.register_index = register_index;
    ins.m = m;
    ins.n = n;
    ins.wback = wback;
    ins.ebytes = ebytes;
    ins.d4 = d4;
    ins.d2 = d2;
    ins.d3 = d3;
    ins.alignment = alignment;
    ins.inc = inc;
    ins.D = D;
    ins.type = type;
    ins.size = size;

    return ins;
}

ARMInstruction ARMDecoder::decode_vld4_single_4_element_structure_to_one_lane_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    Rn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int  size = get_bits(opcode, 11, 10);
    int index_align = get_bits(opcode,  7,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int index = 0;
    int d = 0;
    int esize = 0;
    int register_index = 0;
    int m = 0;
    int n = 0;
    int wback = 0;
    int ebytes = 0;
    int d4 = 0;
    int d2 = 0;
    int d3 = 0;
    int alignment = 0;
    int inc = 0;

    if (unlikely((size == 3))) {
        return SeeInstruction("VLD4 (single 4-element structure to all lanes)");
    }
    switch (size) {
        case 0:
            ebytes = 1;
            esize = 8;
            index = UInt(get_bits(index_align, 3, 1));
            inc = 1;
            alignment = (((get_bit(index_align, 0) == 0)) ? 1 : 4);
            break;
        
        case 1:
            ebytes = 2;
            esize = 16;
            index = UInt(get_bits(index_align, 3, 2));
            inc = (((get_bit(index_align, 1) == 0)) ? 1 : 2);
            alignment = (((get_bit(index_align, 0) == 0)) ? 1 : 8);
            break;
        
        case 2:
            if (unlikely((get_bits(index_align, 1, 0) == 3))) {
            return UndefinedInstruction("Reason: (get_bits(index_align, 1, 0) == 3)");
        }
            ebytes = 4;
            esize = 32;
            index = UInt(get_bit(index_align, 3));
            inc = (((get_bit(index_align, 2) == 0)) ? 1 : 2);
            alignment = (((get_bits(index_align, 1, 0) == 0)) ? 1 : (4 << UInt(get_bits(index_align, 1, 0))));
            break;
        
    }
    
    d = UInt(Concatenate(D, Vd, 4));
    d2 = (d + inc);
    d3 = (d2 + inc);
    d4 = (d3 + inc);
    n = UInt(Rn);
    m = UInt(Rm);
    wback = (m != 15);
    register_index = ((m != 15) && (m != 13));
    if (unlikely(((n == 15) || (d4 > 31)))) {
        return UnpredictableInstruction("Reason: ((n == 15) || (d4 > 31))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vld4_single_4_element_structure_to_one_lane;
    ins.m_to_string = decode_vld4_single_4_element_structure_to_one_lane_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vld4_single_4_element_structure_to_one_lane_t1";
    ins.encoding = encoding;
    ins.index = index;
    ins.d = d;
    ins.esize = esize;
    ins.register_index = register_index;
    ins.m = m;
    ins.n = n;
    ins.wback = wback;
    ins.ebytes = ebytes;
    ins.d4 = d4;
    ins.d2 = d2;
    ins.d3 = d3;
    ins.alignment = alignment;
    ins.inc = inc;
    ins.D = D;
    ins.size = size;

    return ins;
}

ARMInstruction ARMDecoder::decode_vld4_single_4_element_structure_to_one_lane_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    Rn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int  size = get_bits(opcode, 11, 10);
    int index_align = get_bits(opcode,  7,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int index = 0;
    int d = 0;
    int esize = 0;
    int register_index = 0;
    int m = 0;
    int n = 0;
    int wback = 0;
    int ebytes = 0;
    int d4 = 0;
    int d2 = 0;
    int d3 = 0;
    int alignment = 0;
    int inc = 0;

    if (unlikely((size == 3))) {
        return SeeInstruction("VLD4 (single 4-element structure to all lanes)");
    }
    switch (size) {
        case 0:
            ebytes = 1;
            esize = 8;
            index = UInt(get_bits(index_align, 3, 1));
            inc = 1;
            alignment = (((get_bit(index_align, 0) == 0)) ? 1 : 4);
            break;
        
        case 1:
            ebytes = 2;
            esize = 16;
            index = UInt(get_bits(index_align, 3, 2));
            inc = (((get_bit(index_align, 1) == 0)) ? 1 : 2);
            alignment = (((get_bit(index_align, 0) == 0)) ? 1 : 8);
            break;
        
        case 2:
            if (unlikely((get_bits(index_align, 1, 0) == 3))) {
            return UndefinedInstruction("Reason: (get_bits(index_align, 1, 0) == 3)");
        }
            ebytes = 4;
            esize = 32;
            index = UInt(get_bit(index_align, 3));
            inc = (((get_bit(index_align, 2) == 0)) ? 1 : 2);
            alignment = (((get_bits(index_align, 1, 0) == 0)) ? 1 : (4 << UInt(get_bits(index_align, 1, 0))));
            break;
        
    }
    
    d = UInt(Concatenate(D, Vd, 4));
    d2 = (d + inc);
    d3 = (d2 + inc);
    d4 = (d3 + inc);
    n = UInt(Rn);
    m = UInt(Rm);
    wback = (m != 15);
    register_index = ((m != 15) && (m != 13));
    if (unlikely(((n == 15) || (d4 > 31)))) {
        return UnpredictableInstruction("Reason: ((n == 15) || (d4 > 31))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vld4_single_4_element_structure_to_one_lane;
    ins.m_to_string = decode_vld4_single_4_element_structure_to_one_lane_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vld4_single_4_element_structure_to_one_lane_a1";
    ins.encoding = encoding;
    ins.index = index;
    ins.d = d;
    ins.esize = esize;
    ins.register_index = register_index;
    ins.m = m;
    ins.n = n;
    ins.wback = wback;
    ins.ebytes = ebytes;
    ins.d4 = d4;
    ins.d2 = d2;
    ins.d3 = d3;
    ins.alignment = alignment;
    ins.inc = inc;
    ins.D = D;
    ins.size = size;

    return ins;
}

ARMInstruction ARMDecoder::decode_vld4_single_4_element_structure_to_all_lanes_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    Rn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int  size = get_bits(opcode,  7,  6);
    int     T = get_bit(opcode,  5);
    int     a = get_bit(opcode,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int register_index = 0;
    int m = 0;
    int n = 0;
    int wback = 0;
    int ebytes = 0;
    int d4 = 0;
    int d2 = 0;
    int d3 = 0;
    int alignment = 0;
    int inc = 0;

    if (unlikely(((size == 3) && (a == 0)))) {
        return UndefinedInstruction("Reason: ((size == 3) && (a == 0))");
    }
    if ((size == 3)) {
        ebytes = 4;
        elements = 2;
        alignment = 16;
    } else {
        ebytes = (1 << UInt(size));
        elements = (8 / ebytes);
        if ((size == 2)) {
            alignment = (((a == 0)) ? 1 : 8);
        } else {
            alignment = (((a == 0)) ? 1 : (4 * ebytes));
        }
    }
    inc = (((T == 0)) ? 1 : 2);
    d = UInt(Concatenate(D, Vd, 4));
    d2 = (d + inc);
    d3 = (d2 + inc);
    d4 = (d3 + inc);
    n = UInt(Rn);
    m = UInt(Rm);
    wback = (m != 15);
    register_index = ((m != 15) && (m != 13));
    if (unlikely(((n == 15) || (d4 > 31)))) {
        return UnpredictableInstruction("Reason: ((n == 15) || (d4 > 31))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vld4_single_4_element_structure_to_all_lanes;
    ins.m_to_string = decode_vld4_single_4_element_structure_to_all_lanes_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vld4_single_4_element_structure_to_all_lanes_t1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.register_index = register_index;
    ins.m = m;
    ins.n = n;
    ins.wback = wback;
    ins.ebytes = ebytes;
    ins.d4 = d4;
    ins.d2 = d2;
    ins.d3 = d3;
    ins.alignment = alignment;
    ins.inc = inc;
    ins.D = D;
    ins.size = size;
    ins.T = T;

    return ins;
}

ARMInstruction ARMDecoder::decode_vld4_single_4_element_structure_to_all_lanes_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    Rn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int  size = get_bits(opcode,  7,  6);
    int     T = get_bit(opcode,  5);
    int     a = get_bit(opcode,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int register_index = 0;
    int m = 0;
    int n = 0;
    int wback = 0;
    int ebytes = 0;
    int d4 = 0;
    int d2 = 0;
    int d3 = 0;
    int alignment = 0;
    int inc = 0;

    if (unlikely(((size == 3) && (a == 0)))) {
        return UndefinedInstruction("Reason: ((size == 3) && (a == 0))");
    }
    if ((size == 3)) {
        ebytes = 4;
        elements = 2;
        alignment = 16;
    } else {
        ebytes = (1 << UInt(size));
        elements = (8 / ebytes);
        if ((size == 2)) {
            alignment = (((a == 0)) ? 1 : 8);
        } else {
            alignment = (((a == 0)) ? 1 : (4 * ebytes));
        }
    }
    inc = (((T == 0)) ? 1 : 2);
    d = UInt(Concatenate(D, Vd, 4));
    d2 = (d + inc);
    d3 = (d2 + inc);
    d4 = (d3 + inc);
    n = UInt(Rn);
    m = UInt(Rm);
    wback = (m != 15);
    register_index = ((m != 15) && (m != 13));
    if (unlikely(((n == 15) || (d4 > 31)))) {
        return UnpredictableInstruction("Reason: ((n == 15) || (d4 > 31))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vld4_single_4_element_structure_to_all_lanes;
    ins.m_to_string = decode_vld4_single_4_element_structure_to_all_lanes_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vld4_single_4_element_structure_to_all_lanes_a1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.register_index = register_index;
    ins.m = m;
    ins.n = n;
    ins.wback = wback;
    ins.ebytes = ebytes;
    ins.d4 = d4;
    ins.d2 = d2;
    ins.d3 = d3;
    ins.alignment = alignment;
    ins.inc = inc;
    ins.D = D;
    ins.size = size;
    ins.T = T;

    return ins;
}

ARMInstruction ARMDecoder::decode_vldm_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     P = get_bit(opcode, 24);
    int     U = get_bit(opcode, 23);
    int     D = get_bit(opcode, 22);
    int     W = get_bit(opcode, 21);
    int    Rn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int  imm8 = get_bits(opcode,  7,  0);
    int d = 0;
    int single_regs = 0;
    int regs = 0;
    int imm32 = 0;
    int n = 0;
    int add = 0;
    int wback = 0;

    if (unlikely((((P == 0) && (U == 0)) && (W == 0)))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely(((((P == 0) && (U == 1)) && (W == 1)) && (Rn == 13)))) {
        return SeeInstruction("VPOP");
    }
    if (unlikely(((P == 1) && (W == 0)))) {
        return SeeInstruction("VLDR");
    }
    if (unlikely(((P == U) && (W == 1)))) {
        return UndefinedInstruction("Reason: ((P == U) && (W == 1))");
    }
    single_regs = false;
    add = (U == 1);
    wback = (W == 1);
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Rn);
    imm32 = ZeroExtend(Concatenate(imm8, 0, 2), 32);
    regs = (UInt(imm8) / 2);
    if (unlikely(((n == 15) && (wback || (CurrentInstrSet() != InstrSet_ARM))))) {
        return UnpredictableInstruction("Reason: ((n == 15) && (wback || (CurrentInstrSet() != InstrSet_ARM)))");
    }
    if (unlikely((((regs == 0) || (regs > 16)) || ((d + regs) > 32)))) {
        return UnpredictableInstruction("Reason: (((regs == 0) || (regs > 16)) || ((d + regs) > 32))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vldm;
    ins.m_to_string = decode_vldm_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vldm_t1";
    ins.encoding = encoding;
    ins.d = d;
    ins.single_regs = single_regs;
    ins.regs = regs;
    ins.imm32 = imm32;
    ins.n = n;
    ins.add = add;
    ins.wback = wback;
    ins.P = P;
    ins.U = U;
    ins.D = D;
    ins.W = W;

    return ins;
}

ARMInstruction ARMDecoder::decode_vldm_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     P = get_bit(opcode, 24);
    int     U = get_bit(opcode, 23);
    int     D = get_bit(opcode, 22);
    int     W = get_bit(opcode, 21);
    int    Rn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int  imm8 = get_bits(opcode,  7,  0);
    int d = 0;
    int single_regs = 0;
    int regs = 0;
    int imm32 = 0;
    int n = 0;
    int add = 0;
    int wback = 0;

    if (unlikely((((P == 0) && (U == 0)) && (W == 0)))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely(((((P == 0) && (U == 1)) && (W == 1)) && (Rn == 13)))) {
        return SeeInstruction("VPOP");
    }
    if (unlikely(((P == 1) && (W == 0)))) {
        return SeeInstruction("VLDR");
    }
    if (unlikely(((P == U) && (W == 1)))) {
        return UndefinedInstruction("Reason: ((P == U) && (W == 1))");
    }
    single_regs = false;
    add = (U == 1);
    wback = (W == 1);
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Rn);
    imm32 = ZeroExtend(Concatenate(imm8, 0, 2), 32);
    regs = (UInt(imm8) / 2);
    if (unlikely(((n == 15) && (wback || (CurrentInstrSet() != InstrSet_ARM))))) {
        return UnpredictableInstruction("Reason: ((n == 15) && (wback || (CurrentInstrSet() != InstrSet_ARM)))");
    }
    if (unlikely((((regs == 0) || (regs > 16)) || ((d + regs) > 32)))) {
        return UnpredictableInstruction("Reason: (((regs == 0) || (regs > 16)) || ((d + regs) > 32))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vldm;
    ins.m_to_string = decode_vldm_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vldm_a1";
    ins.encoding = encoding;
    ins.d = d;
    ins.single_regs = single_regs;
    ins.regs = regs;
    ins.imm32 = imm32;
    ins.n = n;
    ins.add = add;
    ins.wback = wback;
    ins.cond = cond;
    ins.P = P;
    ins.U = U;
    ins.D = D;
    ins.W = W;

    return ins;
}

ARMInstruction ARMDecoder::decode_vldm_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     P = get_bit(opcode, 24);
    int     U = get_bit(opcode, 23);
    int     D = get_bit(opcode, 22);
    int     W = get_bit(opcode, 21);
    int    Rn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int  imm8 = get_bits(opcode,  7,  0);
    int d = 0;
    int single_regs = 0;
    int regs = 0;
    int imm32 = 0;
    int n = 0;
    int add = 0;
    int wback = 0;

    if (unlikely((((P == 0) && (U == 0)) && (W == 0)))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely(((((P == 0) && (U == 1)) && (W == 1)) && (Rn == 13)))) {
        return SeeInstruction("VPOP");
    }
    if (unlikely(((P == 1) && (W == 0)))) {
        return SeeInstruction("VLDR");
    }
    if (unlikely(((P == U) && (W == 1)))) {
        return UndefinedInstruction("Reason: ((P == U) && (W == 1))");
    }
    single_regs = true;
    add = (U == 1);
    wback = (W == 1);
    d = UInt(Concatenate(Vd, D, 1));
    n = UInt(Rn);
    imm32 = ZeroExtend(Concatenate(imm8, 0, 2), 32);
    regs = UInt(imm8);
    if (unlikely(((n == 15) && (wback || (CurrentInstrSet() != InstrSet_ARM))))) {
        return UnpredictableInstruction("Reason: ((n == 15) && (wback || (CurrentInstrSet() != InstrSet_ARM)))");
    }
    if (unlikely(((regs == 0) || ((d + regs) > 32)))) {
        return UnpredictableInstruction("Reason: ((regs == 0) || ((d + regs) > 32))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vldm;
    ins.m_to_string = decode_vldm_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vldm_t2";
    ins.encoding = encoding;
    ins.d = d;
    ins.single_regs = single_regs;
    ins.regs = regs;
    ins.imm32 = imm32;
    ins.n = n;
    ins.add = add;
    ins.wback = wback;
    ins.P = P;
    ins.U = U;
    ins.D = D;
    ins.W = W;

    return ins;
}

ARMInstruction ARMDecoder::decode_vldm_a2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     P = get_bit(opcode, 24);
    int     U = get_bit(opcode, 23);
    int     D = get_bit(opcode, 22);
    int     W = get_bit(opcode, 21);
    int    Rn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int  imm8 = get_bits(opcode,  7,  0);
    int d = 0;
    int single_regs = 0;
    int regs = 0;
    int imm32 = 0;
    int n = 0;
    int add = 0;
    int wback = 0;

    if (unlikely((((P == 0) && (U == 0)) && (W == 0)))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely(((((P == 0) && (U == 1)) && (W == 1)) && (Rn == 13)))) {
        return SeeInstruction("VPOP");
    }
    if (unlikely(((P == 1) && (W == 0)))) {
        return SeeInstruction("VLDR");
    }
    if (unlikely(((P == U) && (W == 1)))) {
        return UndefinedInstruction("Reason: ((P == U) && (W == 1))");
    }
    single_regs = true;
    add = (U == 1);
    wback = (W == 1);
    d = UInt(Concatenate(Vd, D, 1));
    n = UInt(Rn);
    imm32 = ZeroExtend(Concatenate(imm8, 0, 2), 32);
    regs = UInt(imm8);
    if (unlikely(((n == 15) && (wback || (CurrentInstrSet() != InstrSet_ARM))))) {
        return UnpredictableInstruction("Reason: ((n == 15) && (wback || (CurrentInstrSet() != InstrSet_ARM)))");
    }
    if (unlikely(((regs == 0) || ((d + regs) > 32)))) {
        return UnpredictableInstruction("Reason: ((regs == 0) || ((d + regs) > 32))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vldm;
    ins.m_to_string = decode_vldm_a2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vldm_a2";
    ins.encoding = encoding;
    ins.d = d;
    ins.single_regs = single_regs;
    ins.regs = regs;
    ins.imm32 = imm32;
    ins.n = n;
    ins.add = add;
    ins.wback = wback;
    ins.cond = cond;
    ins.P = P;
    ins.U = U;
    ins.D = D;
    ins.W = W;

    return ins;
}

ARMInstruction ARMDecoder::decode_vldr_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 23);
    int     D = get_bit(opcode, 22);
    int    Rn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int  imm8 = get_bits(opcode,  7,  0);
    int single_reg = 0;
    int add = 0;
    int n = 0;
    int imm32 = 0;
    int d = 0;

    single_reg = false;
    add = (U == 1);
    imm32 = ZeroExtend(Concatenate(imm8, 0, 2), 32);
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Rn);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vldr;
    ins.m_to_string = decode_vldr_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vldr_t1";
    ins.encoding = encoding;
    ins.single_reg = single_reg;
    ins.add = add;
    ins.n = n;
    ins.imm32 = imm32;
    ins.d = d;
    ins.U = U;
    ins.D = D;

    return ins;
}

ARMInstruction ARMDecoder::decode_vldr_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     U = get_bit(opcode, 23);
    int     D = get_bit(opcode, 22);
    int    Rn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int  imm8 = get_bits(opcode,  7,  0);
    int single_reg = 0;
    int add = 0;
    int n = 0;
    int imm32 = 0;
    int d = 0;

    single_reg = false;
    add = (U == 1);
    imm32 = ZeroExtend(Concatenate(imm8, 0, 2), 32);
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Rn);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vldr;
    ins.m_to_string = decode_vldr_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vldr_a1";
    ins.encoding = encoding;
    ins.single_reg = single_reg;
    ins.add = add;
    ins.n = n;
    ins.imm32 = imm32;
    ins.d = d;
    ins.cond = cond;
    ins.U = U;
    ins.D = D;

    return ins;
}

ARMInstruction ARMDecoder::decode_vldr_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 23);
    int     D = get_bit(opcode, 22);
    int    Rn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int  imm8 = get_bits(opcode,  7,  0);
    int single_reg = 0;
    int add = 0;
    int n = 0;
    int imm32 = 0;
    int d = 0;

    single_reg = true;
    add = (U == 1);
    imm32 = ZeroExtend(Concatenate(imm8, 0, 2), 32);
    d = UInt(Concatenate(Vd, D, 1));
    n = UInt(Rn);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vldr;
    ins.m_to_string = decode_vldr_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vldr_t2";
    ins.encoding = encoding;
    ins.single_reg = single_reg;
    ins.add = add;
    ins.n = n;
    ins.imm32 = imm32;
    ins.d = d;
    ins.U = U;
    ins.D = D;

    return ins;
}

ARMInstruction ARMDecoder::decode_vldr_a2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     U = get_bit(opcode, 23);
    int     D = get_bit(opcode, 22);
    int    Rn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int  imm8 = get_bits(opcode,  7,  0);
    int single_reg = 0;
    int add = 0;
    int n = 0;
    int imm32 = 0;
    int d = 0;

    single_reg = true;
    add = (U == 1);
    imm32 = ZeroExtend(Concatenate(imm8, 0, 2), 32);
    d = UInt(Concatenate(Vd, D, 1));
    n = UInt(Rn);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vldr;
    ins.m_to_string = decode_vldr_a2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vldr_a2";
    ins.encoding = encoding;
    ins.single_reg = single_reg;
    ins.add = add;
    ins.n = n;
    ins.imm32 = imm32;
    ins.d = d;
    ins.cond = cond;
    ins.U = U;
    ins.D = D;

    return ins;
}

ARMInstruction ARMDecoder::decode_vmax_vmin_integer_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 28);
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    op = get_bit(opcode,  4);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int regs = 0;
    int m = 0;
    int maximum = 0;
    int n = 0;
    int unsigned_ = 0;

    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1)))");
    }
    if (unlikely((size == 3))) {
        return UndefinedInstruction("Reason: (size == 3)");
    }
    maximum = (op == 0);
    unsigned_ = (U == 1);
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vmax_vmin_integer;
    ins.m_to_string = decode_vmax_vmin_integer_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vmax_vmin_integer_t1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.regs = regs;
    ins.m = m;
    ins.maximum = maximum;
    ins.n = n;
    ins.unsigned_ = unsigned_;
    ins.U = U;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;
    ins.op = op;

    return ins;
}

ARMInstruction ARMDecoder::decode_vmax_vmin_integer_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 24);
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    op = get_bit(opcode,  4);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int regs = 0;
    int m = 0;
    int maximum = 0;
    int n = 0;
    int unsigned_ = 0;

    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1)))");
    }
    if (unlikely((size == 3))) {
        return UndefinedInstruction("Reason: (size == 3)");
    }
    maximum = (op == 0);
    unsigned_ = (U == 1);
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vmax_vmin_integer;
    ins.m_to_string = decode_vmax_vmin_integer_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vmax_vmin_integer_a1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.regs = regs;
    ins.m = m;
    ins.maximum = maximum;
    ins.n = n;
    ins.unsigned_ = unsigned_;
    ins.U = U;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;
    ins.op = op;

    return ins;
}

ARMInstruction ARMDecoder::decode_vmax_vmin_floating_point_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    op = get_bit(opcode, 21);
    int    sz = get_bit(opcode, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int regs = 0;
    int m = 0;
    int maximum = 0;
    int n = 0;

    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1)))");
    }
    if (unlikely((sz == 1))) {
        return UndefinedInstruction("Reason: (sz == 1)");
    }
    maximum = (op == 0);
    esize = 32;
    elements = 2;
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vmax_vmin_floating_point;
    ins.m_to_string = decode_vmax_vmin_floating_point_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vmax_vmin_floating_point_t1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.regs = regs;
    ins.m = m;
    ins.maximum = maximum;
    ins.n = n;
    ins.D = D;
    ins.op = op;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vmax_vmin_floating_point_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    op = get_bit(opcode, 21);
    int    sz = get_bit(opcode, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int regs = 0;
    int m = 0;
    int maximum = 0;
    int n = 0;

    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1)))");
    }
    if (unlikely((sz == 1))) {
        return UndefinedInstruction("Reason: (sz == 1)");
    }
    maximum = (op == 0);
    esize = 32;
    elements = 2;
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vmax_vmin_floating_point;
    ins.m_to_string = decode_vmax_vmin_floating_point_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vmax_vmin_floating_point_a1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.regs = regs;
    ins.m = m;
    ins.maximum = maximum;
    ins.n = n;
    ins.D = D;
    ins.op = op;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vmla_vmlal_vmls_vmlsl_integer_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    op = get_bit(opcode, 28);
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int n = 0;
    int add = 0;
    int long_destination = 0;
    int unsigned_ = 0;

    if (unlikely((size == 3))) {
        return UndefinedInstruction("Reason: (size == 3)");
    }
    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1)))");
    }
    add = (op == 0);
    long_destination = false;
    unsigned_ = false;
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vmla_vmlal_vmls_vmlsl_integer;
    ins.m_to_string = decode_vmla_vmlal_vmls_vmlsl_integer_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vmla_vmlal_vmls_vmlsl_integer_t1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.add = add;
    ins.long_destination = long_destination;
    ins.unsigned_ = unsigned_;
    ins.op = op;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vmla_vmlal_vmls_vmlsl_integer_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    op = get_bit(opcode, 24);
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int n = 0;
    int add = 0;
    int long_destination = 0;
    int unsigned_ = 0;

    if (unlikely((size == 3))) {
        return UndefinedInstruction("Reason: (size == 3)");
    }
    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1)))");
    }
    add = (op == 0);
    long_destination = false;
    unsigned_ = false;
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vmla_vmlal_vmls_vmlsl_integer;
    ins.m_to_string = decode_vmla_vmlal_vmls_vmlsl_integer_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vmla_vmlal_vmls_vmlsl_integer_a1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.add = add;
    ins.long_destination = long_destination;
    ins.unsigned_ = unsigned_;
    ins.op = op;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vmla_vmlal_vmls_vmlsl_integer_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 28);
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int    op = get_bit(opcode,  9);
    int     N = get_bit(opcode,  7);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int n = 0;
    int add = 0;
    int long_destination = 0;
    int unsigned_ = 0;

    if (unlikely((size == 3))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely((get_bit(Vd, 0) == 1))) {
        return UndefinedInstruction("Reason: (get_bit(Vd, 0) == 1)");
    }
    add = (op == 0);
    long_destination = true;
    unsigned_ = (U == 1);
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = 1;
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vmla_vmlal_vmls_vmlsl_integer;
    ins.m_to_string = decode_vmla_vmlal_vmls_vmlsl_integer_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vmla_vmlal_vmls_vmlsl_integer_t2";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.add = add;
    ins.long_destination = long_destination;
    ins.unsigned_ = unsigned_;
    ins.U = U;
    ins.D = D;
    ins.size = size;
    ins.op = op;

    return ins;
}

ARMInstruction ARMDecoder::decode_vmla_vmlal_vmls_vmlsl_integer_a2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 24);
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int    op = get_bit(opcode,  9);
    int     N = get_bit(opcode,  7);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int n = 0;
    int add = 0;
    int long_destination = 0;
    int unsigned_ = 0;

    if (unlikely((size == 3))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely((get_bit(Vd, 0) == 1))) {
        return UndefinedInstruction("Reason: (get_bit(Vd, 0) == 1)");
    }
    add = (op == 0);
    long_destination = true;
    unsigned_ = (U == 1);
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = 1;
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vmla_vmlal_vmls_vmlsl_integer;
    ins.m_to_string = decode_vmla_vmlal_vmls_vmlsl_integer_a2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vmla_vmlal_vmls_vmlsl_integer_a2";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.add = add;
    ins.long_destination = long_destination;
    ins.unsigned_ = unsigned_;
    ins.U = U;
    ins.D = D;
    ins.size = size;
    ins.op = op;

    return ins;
}

ARMInstruction ARMDecoder::decode_vmla_vmls_floating_point_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    op = get_bit(opcode, 21);
    int    sz = get_bit(opcode, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int advsimd = 0;
    int m = 0;
    int regs = 0;
    int n = 0;
    int add = 0;

    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1)))");
    }
    if (unlikely((sz == 1))) {
        return UndefinedInstruction("Reason: (sz == 1)");
    }
    advsimd = true;
    add = (op == 0);
    esize = 32;
    elements = 2;
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vmla_vmls_floating_point;
    ins.m_to_string = decode_vmla_vmls_floating_point_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vmla_vmls_floating_point_t1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.advsimd = advsimd;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.add = add;
    ins.D = D;
    ins.op = op;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vmla_vmls_floating_point_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    op = get_bit(opcode, 21);
    int    sz = get_bit(opcode, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int advsimd = 0;
    int m = 0;
    int regs = 0;
    int n = 0;
    int add = 0;

    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1)))");
    }
    if (unlikely((sz == 1))) {
        return UndefinedInstruction("Reason: (sz == 1)");
    }
    advsimd = true;
    add = (op == 0);
    esize = 32;
    elements = 2;
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vmla_vmls_floating_point;
    ins.m_to_string = decode_vmla_vmls_floating_point_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vmla_vmls_floating_point_a1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.advsimd = advsimd;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.add = add;
    ins.D = D;
    ins.op = op;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vmla_vmls_floating_point_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int    sz = get_bit(opcode,  8);
    int     N = get_bit(opcode,  7);
    int    op = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int d = 0;
    int dp_operation = 0;
    int advsimd = 0;
    int m = 0;
    int n = 0;
    int add = 0;

    if (unlikely(((FPSCR.LEN != 0) || (FPSCR.STRIDE != 0)))) {
        return SeeInstruction("VFP vectors");
    }
    advsimd = false;
    dp_operation = (sz == 1);
    add = (op == 0);
    d = ((dp_operation) ? UInt(Concatenate(D, Vd, 4)) : UInt(Concatenate(Vd, D, 1)));
    n = ((dp_operation) ? UInt(Concatenate(N, Vn, 4)) : UInt(Concatenate(Vn, N, 1)));
    m = ((dp_operation) ? UInt(Concatenate(M, Vm, 4)) : UInt(Concatenate(Vm, M, 1)));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vmla_vmls_floating_point;
    ins.m_to_string = decode_vmla_vmls_floating_point_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vmla_vmls_floating_point_t2";
    ins.encoding = encoding;
    ins.d = d;
    ins.dp_operation = dp_operation;
    ins.advsimd = advsimd;
    ins.m = m;
    ins.n = n;
    ins.add = add;
    ins.D = D;
    ins.op = op;

    return ins;
}

ARMInstruction ARMDecoder::decode_vmla_vmls_floating_point_a2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     D = get_bit(opcode, 22);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int    sz = get_bit(opcode,  8);
    int     N = get_bit(opcode,  7);
    int    op = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int d = 0;
    int dp_operation = 0;
    int advsimd = 0;
    int m = 0;
    int n = 0;
    int add = 0;

    if (unlikely(((FPSCR.LEN != 0) || (FPSCR.STRIDE != 0)))) {
        return SeeInstruction("VFP vectors");
    }
    advsimd = false;
    dp_operation = (sz == 1);
    add = (op == 0);
    d = ((dp_operation) ? UInt(Concatenate(D, Vd, 4)) : UInt(Concatenate(Vd, D, 1)));
    n = ((dp_operation) ? UInt(Concatenate(N, Vn, 4)) : UInt(Concatenate(Vn, N, 1)));
    m = ((dp_operation) ? UInt(Concatenate(M, Vm, 4)) : UInt(Concatenate(Vm, M, 1)));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vmla_vmls_floating_point;
    ins.m_to_string = decode_vmla_vmls_floating_point_a2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vmla_vmls_floating_point_a2";
    ins.encoding = encoding;
    ins.d = d;
    ins.dp_operation = dp_operation;
    ins.advsimd = advsimd;
    ins.m = m;
    ins.n = n;
    ins.add = add;
    ins.cond = cond;
    ins.D = D;
    ins.op = op;

    return ins;
}

ARMInstruction ARMDecoder::decode_vmla_vmlal_vmls_vmlsl_by_scalar_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     Q = get_bit(opcode, 28);
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int    op = get_bit(opcode, 10);
    int     F = get_bit(opcode,  8);
    int     N = get_bit(opcode,  7);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int index = 0;
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int n = 0;
    int add = 0;
    int long_destination = 0;
    int unsigned_ = 0;
    int floating_point = 0;

    if (unlikely((size == 3))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely(((size == 0) || ((F == 1) && (size == 1))))) {
        return UndefinedInstruction("Reason: ((size == 0) || ((F == 1) && (size == 1)))");
    }
    if (unlikely(((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)))");
    }
    unsigned_ = false;
    add = (op == 0);
    floating_point = (F == 1);
    long_destination = false;
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    regs = (((Q == 0)) ? 1 : 2);
    if ((size == 1)) {
        esize = 16;
        elements = 4;
        m = UInt(get_bits(Vm, 2, 0));
        index = UInt(Concatenate(M, get_bit(Vm, 3), 1));
    }
    if ((size == 2)) {
        esize = 32;
        elements = 2;
        m = UInt(Vm);
        index = UInt(M);
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vmla_vmlal_vmls_vmlsl_by_scalar;
    ins.m_to_string = decode_vmla_vmlal_vmls_vmlsl_by_scalar_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vmla_vmlal_vmls_vmlsl_by_scalar_t1";
    ins.encoding = encoding;
    ins.index = index;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.add = add;
    ins.long_destination = long_destination;
    ins.unsigned_ = unsigned_;
    ins.floating_point = floating_point;
    ins.Q = Q;
    ins.D = D;
    ins.size = size;
    ins.op = op;

    return ins;
}

ARMInstruction ARMDecoder::decode_vmla_vmlal_vmls_vmlsl_by_scalar_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     Q = get_bit(opcode, 24);
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int    op = get_bit(opcode, 10);
    int     F = get_bit(opcode,  8);
    int     N = get_bit(opcode,  7);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int index = 0;
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int n = 0;
    int add = 0;
    int long_destination = 0;
    int unsigned_ = 0;
    int floating_point = 0;

    if (unlikely((size == 3))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely(((size == 0) || ((F == 1) && (size == 1))))) {
        return UndefinedInstruction("Reason: ((size == 0) || ((F == 1) && (size == 1)))");
    }
    if (unlikely(((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)))");
    }
    unsigned_ = false;
    add = (op == 0);
    floating_point = (F == 1);
    long_destination = false;
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    regs = (((Q == 0)) ? 1 : 2);
    if ((size == 1)) {
        esize = 16;
        elements = 4;
        m = UInt(get_bits(Vm, 2, 0));
        index = UInt(Concatenate(M, get_bit(Vm, 3), 1));
    }
    if ((size == 2)) {
        esize = 32;
        elements = 2;
        m = UInt(Vm);
        index = UInt(M);
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vmla_vmlal_vmls_vmlsl_by_scalar;
    ins.m_to_string = decode_vmla_vmlal_vmls_vmlsl_by_scalar_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vmla_vmlal_vmls_vmlsl_by_scalar_a1";
    ins.encoding = encoding;
    ins.index = index;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.add = add;
    ins.long_destination = long_destination;
    ins.unsigned_ = unsigned_;
    ins.floating_point = floating_point;
    ins.Q = Q;
    ins.D = D;
    ins.size = size;
    ins.op = op;

    return ins;
}

ARMInstruction ARMDecoder::decode_vmla_vmlal_vmls_vmlsl_by_scalar_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 28);
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int    op = get_bit(opcode, 10);
    int     N = get_bit(opcode,  7);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int index = 0;
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int n = 0;
    int add = 0;
    int long_destination = 0;
    int unsigned_ = 0;
    int floating_point = 0;

    if (unlikely((size == 3))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely(((size == 0) || (get_bit(Vd, 0) == 1)))) {
        return UndefinedInstruction("Reason: ((size == 0) || (get_bit(Vd, 0) == 1))");
    }
    unsigned_ = (U == 1);
    add = (op == 0);
    floating_point = false;
    long_destination = true;
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    regs = 1;
    if ((size == 1)) {
        esize = 16;
        elements = 4;
        m = UInt(get_bits(Vm, 2, 0));
        index = UInt(Concatenate(M, get_bit(Vm, 3), 1));
    }
    if ((size == 2)) {
        esize = 32;
        elements = 2;
        m = UInt(Vm);
        index = UInt(M);
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vmla_vmlal_vmls_vmlsl_by_scalar;
    ins.m_to_string = decode_vmla_vmlal_vmls_vmlsl_by_scalar_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vmla_vmlal_vmls_vmlsl_by_scalar_t2";
    ins.encoding = encoding;
    ins.index = index;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.add = add;
    ins.long_destination = long_destination;
    ins.unsigned_ = unsigned_;
    ins.floating_point = floating_point;
    ins.U = U;
    ins.D = D;
    ins.size = size;
    ins.op = op;

    return ins;
}

ARMInstruction ARMDecoder::decode_vmla_vmlal_vmls_vmlsl_by_scalar_a2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 24);
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int    op = get_bit(opcode, 10);
    int     N = get_bit(opcode,  7);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int index = 0;
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int n = 0;
    int add = 0;
    int long_destination = 0;
    int unsigned_ = 0;
    int floating_point = 0;

    if (unlikely((size == 3))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely(((size == 0) || (get_bit(Vd, 0) == 1)))) {
        return UndefinedInstruction("Reason: ((size == 0) || (get_bit(Vd, 0) == 1))");
    }
    unsigned_ = (U == 1);
    add = (op == 0);
    floating_point = false;
    long_destination = true;
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    regs = 1;
    if ((size == 1)) {
        esize = 16;
        elements = 4;
        m = UInt(get_bits(Vm, 2, 0));
        index = UInt(Concatenate(M, get_bit(Vm, 3), 1));
    }
    if ((size == 2)) {
        esize = 32;
        elements = 2;
        m = UInt(Vm);
        index = UInt(M);
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vmla_vmlal_vmls_vmlsl_by_scalar;
    ins.m_to_string = decode_vmla_vmlal_vmls_vmlsl_by_scalar_a2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vmla_vmlal_vmls_vmlsl_by_scalar_a2";
    ins.encoding = encoding;
    ins.index = index;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.add = add;
    ins.long_destination = long_destination;
    ins.unsigned_ = unsigned_;
    ins.floating_point = floating_point;
    ins.U = U;
    ins.D = D;
    ins.size = size;
    ins.op = op;

    return ins;
}

ARMInstruction ARMDecoder::decode_vmov_immediate_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     i = get_bit(opcode, 28);
    int     D = get_bit(opcode, 22);
    int  imm3 = get_bits(opcode, 18, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int cmode = get_bits(opcode, 11,  8);
    int     Q = get_bit(opcode,  6);
    int    op = get_bit(opcode,  5);
    int  imm4 = get_bits(opcode,  3,  0);
    uint64_t imm64 = 0;
    int advsimd = 0;
    int single_register = 0;
    int d = 0;
    int regs = 0;

    if (unlikely((((op == 0) && (get_bit(cmode, 0) == 1)) && (get_bits(cmode, 3, 2) != 3)))) {
        return SeeInstruction("VORR (immediate)");
    }
    if (unlikely(((op == 1) && (cmode != 14)))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely(((Q == 1) && (get_bit(Vd, 0) == 1)))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (get_bit(Vd, 0) == 1))");
    }
    single_register = false;
    advsimd = true;
    imm64 = AdvSIMDExpandImm(op, cmode, Concatenate(Concatenate(i, imm3, 3), imm4, 4));
    d = UInt(Concatenate(D, Vd, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vmov_immediate;
    ins.m_to_string = decode_vmov_immediate_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vmov_immediate_t1";
    ins.encoding = encoding;
    ins.imm64 = imm64;
    ins.advsimd = advsimd;
    ins.single_register = single_register;
    ins.d = d;
    ins.regs = regs;
    ins.D = D;
    ins.cmode = cmode;
    ins.Q = Q;
    ins.op = op;

    return ins;
}

ARMInstruction ARMDecoder::decode_vmov_immediate_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     i = get_bit(opcode, 24);
    int     D = get_bit(opcode, 22);
    int  imm3 = get_bits(opcode, 18, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int cmode = get_bits(opcode, 11,  8);
    int     Q = get_bit(opcode,  6);
    int    op = get_bit(opcode,  5);
    int  imm4 = get_bits(opcode,  3,  0);
    uint64_t imm64 = 0;
    int advsimd = 0;
    int single_register = 0;
    int d = 0;
    int regs = 0;

    if (unlikely((((op == 0) && (get_bit(cmode, 0) == 1)) && (get_bits(cmode, 3, 2) != 3)))) {
        return SeeInstruction("VORR (immediate)");
    }
    if (unlikely(((op == 1) && (cmode != 14)))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely(((Q == 1) && (get_bit(Vd, 0) == 1)))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (get_bit(Vd, 0) == 1))");
    }
    single_register = false;
    advsimd = true;
    imm64 = AdvSIMDExpandImm(op, cmode, Concatenate(Concatenate(i, imm3, 3), imm4, 4));
    d = UInt(Concatenate(D, Vd, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vmov_immediate;
    ins.m_to_string = decode_vmov_immediate_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vmov_immediate_a1";
    ins.encoding = encoding;
    ins.imm64 = imm64;
    ins.advsimd = advsimd;
    ins.single_register = single_register;
    ins.d = d;
    ins.regs = regs;
    ins.D = D;
    ins.cmode = cmode;
    ins.Q = Q;
    ins.op = op;

    return ins;
}

ARMInstruction ARMDecoder::decode_vmov_immediate_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int imm4H = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int    sz = get_bit(opcode,  8);
    int imm4L = get_bits(opcode,  3,  0);
    uint64_t imm64 = 0;
    int single_register = 0;
    int d = 0;
    int advsimd = 0;
    int regs = 0;
    int imm32 = 0;

    if (unlikely(((FPSCR.LEN != 0) || (FPSCR.STRIDE != 0)))) {
        return SeeInstruction("VFP vectors");
    }
    single_register = (sz == 0);
    advsimd = false;
    if (single_register) {
        d = UInt(Concatenate(Vd, D, 1));
        imm32 = VFPExpandImm(Concatenate(imm4H, imm4L, 4), 32);
    } else {
        d = UInt(Concatenate(D, Vd, 4));
        imm64 = VFPExpandImm(Concatenate(imm4H, imm4L, 4), 64);
        regs = 1;
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vmov_immediate;
    ins.m_to_string = decode_vmov_immediate_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vmov_immediate_t2";
    ins.encoding = encoding;
    ins.imm64 = imm64;
    ins.single_register = single_register;
    ins.d = d;
    ins.advsimd = advsimd;
    ins.regs = regs;
    ins.imm32 = imm32;
    ins.D = D;

    return ins;
}

ARMInstruction ARMDecoder::decode_vmov_immediate_a2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     D = get_bit(opcode, 22);
    int imm4H = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int    sz = get_bit(opcode,  8);
    int imm4L = get_bits(opcode,  3,  0);
    uint64_t imm64 = 0;
    int single_register = 0;
    int d = 0;
    int advsimd = 0;
    int regs = 0;
    int imm32 = 0;

    if (unlikely(((FPSCR.LEN != 0) || (FPSCR.STRIDE != 0)))) {
        return SeeInstruction("VFP vectors");
    }
    single_register = (sz == 0);
    advsimd = false;
    if (single_register) {
        d = UInt(Concatenate(Vd, D, 1));
        imm32 = VFPExpandImm(Concatenate(imm4H, imm4L, 4), 32);
    } else {
        d = UInt(Concatenate(D, Vd, 4));
        imm64 = VFPExpandImm(Concatenate(imm4H, imm4L, 4), 64);
        regs = 1;
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vmov_immediate;
    ins.m_to_string = decode_vmov_immediate_a2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vmov_immediate_a2";
    ins.encoding = encoding;
    ins.imm64 = imm64;
    ins.single_register = single_register;
    ins.d = d;
    ins.advsimd = advsimd;
    ins.regs = regs;
    ins.imm32 = imm32;
    ins.cond = cond;
    ins.D = D;

    return ins;
}

ARMInstruction ARMDecoder::decode_vmov_register_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int   Vm_ = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int    M_ = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int advsimd = 0;
    int single_register = 0;
    int m = 0;
    int d = 0;
    int regs = 0;

    if (unlikely((!(M == M_) || !(Vm == Vm_)))) {
        return SeeInstruction("VORR (register)");
    }
    if (unlikely(((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)))");
    }
    single_register = false;
    advsimd = true;
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vmov_register;
    ins.m_to_string = decode_vmov_register_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vmov_register_t1";
    ins.encoding = encoding;
    ins.advsimd = advsimd;
    ins.single_register = single_register;
    ins.m = m;
    ins.d = d;
    ins.regs = regs;
    ins.D = D;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vmov_register_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int   Vm_ = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int    M_ = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int advsimd = 0;
    int single_register = 0;
    int m = 0;
    int d = 0;
    int regs = 0;

    if (unlikely((!(M == M_) || !(Vm == Vm_)))) {
        return SeeInstruction("VORR (register)");
    }
    if (unlikely(((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)))");
    }
    single_register = false;
    advsimd = true;
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vmov_register;
    ins.m_to_string = decode_vmov_register_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vmov_register_a1";
    ins.encoding = encoding;
    ins.advsimd = advsimd;
    ins.single_register = single_register;
    ins.m = m;
    ins.d = d;
    ins.regs = regs;
    ins.D = D;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vmov_register_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    Vd = get_bits(opcode, 15, 12);
    int    sz = get_bit(opcode,  8);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int advsimd = 0;
    int single_register = 0;
    int m = 0;
    int d = 0;
    int regs = 0;

    if (unlikely(((FPSCR.LEN != 0) || (FPSCR.STRIDE != 0)))) {
        return SeeInstruction("VFP vectors");
    }
    single_register = (sz == 0);
    advsimd = false;
    if (single_register) {
        d = UInt(Concatenate(Vd, D, 1));
        m = UInt(Concatenate(Vm, M, 1));
    } else {
        d = UInt(Concatenate(D, Vd, 4));
        m = UInt(Concatenate(M, Vm, 4));
        regs = 1;
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vmov_register;
    ins.m_to_string = decode_vmov_register_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vmov_register_t2";
    ins.encoding = encoding;
    ins.advsimd = advsimd;
    ins.single_register = single_register;
    ins.m = m;
    ins.d = d;
    ins.regs = regs;
    ins.D = D;

    return ins;
}

ARMInstruction ARMDecoder::decode_vmov_register_a2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     D = get_bit(opcode, 22);
    int    Vd = get_bits(opcode, 15, 12);
    int    sz = get_bit(opcode,  8);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int advsimd = 0;
    int single_register = 0;
    int m = 0;
    int d = 0;
    int regs = 0;

    if (unlikely(((FPSCR.LEN != 0) || (FPSCR.STRIDE != 0)))) {
        return SeeInstruction("VFP vectors");
    }
    single_register = (sz == 0);
    advsimd = false;
    if (single_register) {
        d = UInt(Concatenate(Vd, D, 1));
        m = UInt(Concatenate(Vm, M, 1));
    } else {
        d = UInt(Concatenate(D, Vd, 4));
        m = UInt(Concatenate(M, Vm, 4));
        regs = 1;
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vmov_register;
    ins.m_to_string = decode_vmov_register_a2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vmov_register_a2";
    ins.encoding = encoding;
    ins.advsimd = advsimd;
    ins.single_register = single_register;
    ins.m = m;
    ins.d = d;
    ins.regs = regs;
    ins.cond = cond;
    ins.D = D;

    return ins;
}

ARMInstruction ARMDecoder::decode_vmov_arm_core_register_to_scalar_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  opc1 = get_bits(opcode, 22, 21);
    int    Vd = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int     D = get_bit(opcode,  7);
    int  opc2 = get_bits(opcode,  6,  5);
    int index = 0;
    int t = 0;
    int advsimd = 0;
    int d = 0;
    int esize = 0;

    switch (Concatenate(opc1, opc2, 2)) {
        // Values of 1xxx
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
            advsimd = true;
            esize = 8;
            index = UInt(Concatenate(get_bit(opc1, 0), opc2, 2));
            break;
        
        // Values of 0xx1
        case 1:
        case 3:
        case 5:
        case 7:
            advsimd = true;
            esize = 16;
            index = UInt(Concatenate(get_bit(opc1, 0), get_bit(opc2, 1), 1));
            break;
        
        // Values of 0x00
        case 0:
        case 4:
            advsimd = false;
            esize = 32;
            index = UInt(get_bit(opc1, 0));
            break;
        
        // Values of 0x10
        case 2:
        case 6:
            return UndefinedInstruction("Reason: ");
            break;
        
    }
    
    d = UInt(Concatenate(D, Vd, 4));
    t = UInt(Rt);
    if (unlikely(((t == 15) || ((CurrentInstrSet() != InstrSet_ARM) && (t == 13))))) {
        return UnpredictableInstruction("Reason: ((t == 15) || ((CurrentInstrSet() != InstrSet_ARM) && (t == 13)))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vmov_arm_core_register_to_scalar;
    ins.m_to_string = decode_vmov_arm_core_register_to_scalar_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vmov_arm_core_register_to_scalar_t1";
    ins.encoding = encoding;
    ins.index = index;
    ins.t = t;
    ins.advsimd = advsimd;
    ins.d = d;
    ins.esize = esize;
    ins.opc1 = opc1;
    ins.D = D;
    ins.opc2 = opc2;

    return ins;
}

ARMInstruction ARMDecoder::decode_vmov_arm_core_register_to_scalar_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int  opc1 = get_bits(opcode, 22, 21);
    int    Vd = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int     D = get_bit(opcode,  7);
    int  opc2 = get_bits(opcode,  6,  5);
    int index = 0;
    int t = 0;
    int advsimd = 0;
    int d = 0;
    int esize = 0;

    switch (Concatenate(opc1, opc2, 2)) {
        // Values of 1xxx
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
            advsimd = true;
            esize = 8;
            index = UInt(Concatenate(get_bit(opc1, 0), opc2, 2));
            break;
        
        // Values of 0xx1
        case 1:
        case 3:
        case 5:
        case 7:
            advsimd = true;
            esize = 16;
            index = UInt(Concatenate(get_bit(opc1, 0), get_bit(opc2, 1), 1));
            break;
        
        // Values of 0x00
        case 0:
        case 4:
            advsimd = false;
            esize = 32;
            index = UInt(get_bit(opc1, 0));
            break;
        
        // Values of 0x10
        case 2:
        case 6:
            return UndefinedInstruction("Reason: ");
            break;
        
    }
    
    d = UInt(Concatenate(D, Vd, 4));
    t = UInt(Rt);
    if (unlikely(((t == 15) || ((CurrentInstrSet() != InstrSet_ARM) && (t == 13))))) {
        return UnpredictableInstruction("Reason: ((t == 15) || ((CurrentInstrSet() != InstrSet_ARM) && (t == 13)))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vmov_arm_core_register_to_scalar;
    ins.m_to_string = decode_vmov_arm_core_register_to_scalar_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vmov_arm_core_register_to_scalar_a1";
    ins.encoding = encoding;
    ins.index = index;
    ins.t = t;
    ins.advsimd = advsimd;
    ins.d = d;
    ins.esize = esize;
    ins.cond = cond;
    ins.opc1 = opc1;
    ins.D = D;
    ins.opc2 = opc2;

    return ins;
}

ARMInstruction ARMDecoder::decode_vmov_scalar_to_arm_core_register_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 23);
    int  opc1 = get_bits(opcode, 22, 21);
    int    Vn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int  opc2 = get_bits(opcode,  6,  5);
    int index = 0;
    int esize = 0;
    int advsimd = 0;
    int n = 0;
    int t = 0;
    int unsigned_ = 0;

    switch (Concatenate(Concatenate(U, opc1, 2), opc2, 2)) {
        // Values of x1xxx
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
        case 24:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
            advsimd = true;
            esize = 8;
            index = UInt(Concatenate(get_bit(opc1, 0), opc2, 2));
            break;
        
        // Values of x0xx1
        case 1:
        case 3:
        case 5:
        case 7:
        case 17:
        case 19:
        case 21:
        case 23:
            advsimd = true;
            esize = 16;
            index = UInt(Concatenate(get_bit(opc1, 0), get_bit(opc2, 1), 1));
            break;
        
        // Values of 00x00
        case 0:
        case 4:
            advsimd = false;
            esize = 32;
            index = UInt(get_bit(opc1, 0));
            break;
        
        // Values of 10x00
        case 16:
        case 20:
            return UndefinedInstruction("Reason: ");
            break;
        
        // Values of x0x10
        case 2:
        case 6:
        case 18:
        case 22:
            return UndefinedInstruction("Reason: ");
            break;
        
    }
    
    t = UInt(Rt);
    n = UInt(Concatenate(N, Vn, 4));
    unsigned_ = (U == 1);
    if (unlikely(((t == 15) || ((CurrentInstrSet() != InstrSet_ARM) && (t == 13))))) {
        return UnpredictableInstruction("Reason: ((t == 15) || ((CurrentInstrSet() != InstrSet_ARM) && (t == 13)))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vmov_scalar_to_arm_core_register;
    ins.m_to_string = decode_vmov_scalar_to_arm_core_register_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vmov_scalar_to_arm_core_register_t1";
    ins.encoding = encoding;
    ins.index = index;
    ins.esize = esize;
    ins.advsimd = advsimd;
    ins.n = n;
    ins.t = t;
    ins.unsigned_ = unsigned_;
    ins.U = U;
    ins.opc1 = opc1;
    ins.opc2 = opc2;

    return ins;
}

ARMInstruction ARMDecoder::decode_vmov_scalar_to_arm_core_register_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     U = get_bit(opcode, 23);
    int  opc1 = get_bits(opcode, 22, 21);
    int    Vn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int  opc2 = get_bits(opcode,  6,  5);
    int index = 0;
    int esize = 0;
    int advsimd = 0;
    int n = 0;
    int t = 0;
    int unsigned_ = 0;

    switch (Concatenate(Concatenate(U, opc1, 2), opc2, 2)) {
        // Values of x1xxx
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
        case 24:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
            advsimd = true;
            esize = 8;
            index = UInt(Concatenate(get_bit(opc1, 0), opc2, 2));
            break;
        
        // Values of x0xx1
        case 1:
        case 3:
        case 5:
        case 7:
        case 17:
        case 19:
        case 21:
        case 23:
            advsimd = true;
            esize = 16;
            index = UInt(Concatenate(get_bit(opc1, 0), get_bit(opc2, 1), 1));
            break;
        
        // Values of 00x00
        case 0:
        case 4:
            advsimd = false;
            esize = 32;
            index = UInt(get_bit(opc1, 0));
            break;
        
        // Values of 10x00
        case 16:
        case 20:
            return UndefinedInstruction("Reason: ");
            break;
        
        // Values of x0x10
        case 2:
        case 6:
        case 18:
        case 22:
            return UndefinedInstruction("Reason: ");
            break;
        
    }
    
    t = UInt(Rt);
    n = UInt(Concatenate(N, Vn, 4));
    unsigned_ = (U == 1);
    if (unlikely(((t == 15) || ((CurrentInstrSet() != InstrSet_ARM) && (t == 13))))) {
        return UnpredictableInstruction("Reason: ((t == 15) || ((CurrentInstrSet() != InstrSet_ARM) && (t == 13)))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vmov_scalar_to_arm_core_register;
    ins.m_to_string = decode_vmov_scalar_to_arm_core_register_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vmov_scalar_to_arm_core_register_a1";
    ins.encoding = encoding;
    ins.index = index;
    ins.esize = esize;
    ins.advsimd = advsimd;
    ins.n = n;
    ins.t = t;
    ins.unsigned_ = unsigned_;
    ins.cond = cond;
    ins.U = U;
    ins.opc1 = opc1;
    ins.opc2 = opc2;

    return ins;
}

ARMInstruction ARMDecoder::decode_vmov_between_arm_core_register_and_single_precision_register_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    op = get_bit(opcode, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int to_arm_register = 0;
    int t = 0;
    int n = 0;

    to_arm_register = (op == 1);
    t = UInt(Rt);
    n = UInt(Concatenate(Vn, N, 1));
    if (unlikely(((t == 15) || ((CurrentInstrSet() != InstrSet_ARM) && (t == 13))))) {
        return UnpredictableInstruction("Reason: ((t == 15) || ((CurrentInstrSet() != InstrSet_ARM) && (t == 13)))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vmov_between_arm_core_register_and_single_precision_register;
    ins.m_to_string = decode_vmov_between_arm_core_register_and_single_precision_register_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vmov_between_arm_core_register_and_single_precision_register_t1";
    ins.encoding = encoding;
    ins.to_arm_register = to_arm_register;
    ins.t = t;
    ins.n = n;
    ins.op = op;

    return ins;
}

ARMInstruction ARMDecoder::decode_vmov_between_arm_core_register_and_single_precision_register_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    op = get_bit(opcode, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int to_arm_register = 0;
    int t = 0;
    int n = 0;

    to_arm_register = (op == 1);
    t = UInt(Rt);
    n = UInt(Concatenate(Vn, N, 1));
    if (unlikely(((t == 15) || ((CurrentInstrSet() != InstrSet_ARM) && (t == 13))))) {
        return UnpredictableInstruction("Reason: ((t == 15) || ((CurrentInstrSet() != InstrSet_ARM) && (t == 13)))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vmov_between_arm_core_register_and_single_precision_register;
    ins.m_to_string = decode_vmov_between_arm_core_register_and_single_precision_register_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vmov_between_arm_core_register_and_single_precision_register_a1";
    ins.encoding = encoding;
    ins.to_arm_register = to_arm_register;
    ins.t = t;
    ins.n = n;
    ins.cond = cond;
    ins.op = op;

    return ins;
}

ARMInstruction ARMDecoder::decode_vmov_between_two_arm_core_registers_and_two_single_precision_registers_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    op = get_bit(opcode, 20);
    int   Rt2 = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int m = 0;
    int t2 = 0;
    int t = 0;
    int to_arm_registers = 0;

    to_arm_registers = (op == 1);
    t = UInt(Rt);
    t2 = UInt(Rt2);
    m = UInt(Concatenate(Vm, M, 1));
    if (unlikely((((t == 15) || (t2 == 15)) || (m == 31)))) {
        return UnpredictableInstruction("Reason: (((t == 15) || (t2 == 15)) || (m == 31))");
    }
    if (unlikely(((CurrentInstrSet() != InstrSet_ARM) && ((t == 13) || (t2 == 13))))) {
        return UnpredictableInstruction("Reason: ((CurrentInstrSet() != InstrSet_ARM) && ((t == 13) || (t2 == 13)))");
    }
    if (unlikely((to_arm_registers && (t == t2)))) {
        return UnpredictableInstruction("Reason: (to_arm_registers && (t == t2))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vmov_between_two_arm_core_registers_and_two_single_precision_registers;
    ins.m_to_string = decode_vmov_between_two_arm_core_registers_and_two_single_precision_registers_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vmov_between_two_arm_core_registers_and_two_single_precision_registers_t1";
    ins.encoding = encoding;
    ins.m = m;
    ins.t2 = t2;
    ins.t = t;
    ins.to_arm_registers = to_arm_registers;
    ins.op = op;

    return ins;
}

ARMInstruction ARMDecoder::decode_vmov_between_two_arm_core_registers_and_two_single_precision_registers_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    op = get_bit(opcode, 20);
    int   Rt2 = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int m = 0;
    int t2 = 0;
    int t = 0;
    int to_arm_registers = 0;

    to_arm_registers = (op == 1);
    t = UInt(Rt);
    t2 = UInt(Rt2);
    m = UInt(Concatenate(Vm, M, 1));
    if (unlikely((((t == 15) || (t2 == 15)) || (m == 31)))) {
        return UnpredictableInstruction("Reason: (((t == 15) || (t2 == 15)) || (m == 31))");
    }
    if (unlikely(((CurrentInstrSet() != InstrSet_ARM) && ((t == 13) || (t2 == 13))))) {
        return UnpredictableInstruction("Reason: ((CurrentInstrSet() != InstrSet_ARM) && ((t == 13) || (t2 == 13)))");
    }
    if (unlikely((to_arm_registers && (t == t2)))) {
        return UnpredictableInstruction("Reason: (to_arm_registers && (t == t2))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vmov_between_two_arm_core_registers_and_two_single_precision_registers;
    ins.m_to_string = decode_vmov_between_two_arm_core_registers_and_two_single_precision_registers_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vmov_between_two_arm_core_registers_and_two_single_precision_registers_a1";
    ins.encoding = encoding;
    ins.m = m;
    ins.t2 = t2;
    ins.t = t;
    ins.to_arm_registers = to_arm_registers;
    ins.cond = cond;
    ins.op = op;

    return ins;
}

ARMInstruction ARMDecoder::decode_vmov_between_two_arm_core_registers_and_a_doubleword_extension_register_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    op = get_bit(opcode, 20);
    int   Rt2 = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int m = 0;
    int t2 = 0;
    int t = 0;
    int to_arm_registers = 0;

    to_arm_registers = (op == 1);
    t = UInt(Rt);
    t2 = UInt(Rt2);
    m = UInt(Concatenate(M, Vm, 4));
    if (unlikely(((t == 15) || (t2 == 15)))) {
        return UnpredictableInstruction("Reason: ((t == 15) || (t2 == 15))");
    }
    if (unlikely(((CurrentInstrSet() != InstrSet_ARM) && ((t == 13) || (t2 == 13))))) {
        return UnpredictableInstruction("Reason: ((CurrentInstrSet() != InstrSet_ARM) && ((t == 13) || (t2 == 13)))");
    }
    if (unlikely((to_arm_registers && (t == t2)))) {
        return UnpredictableInstruction("Reason: (to_arm_registers && (t == t2))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vmov_between_two_arm_core_registers_and_a_doubleword_extension_register;
    ins.m_to_string = decode_vmov_between_two_arm_core_registers_and_a_doubleword_extension_register_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vmov_between_two_arm_core_registers_and_a_doubleword_extension_register_t1";
    ins.encoding = encoding;
    ins.m = m;
    ins.t2 = t2;
    ins.t = t;
    ins.to_arm_registers = to_arm_registers;
    ins.op = op;

    return ins;
}

ARMInstruction ARMDecoder::decode_vmov_between_two_arm_core_registers_and_a_doubleword_extension_register_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int    op = get_bit(opcode, 20);
    int   Rt2 = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int m = 0;
    int t2 = 0;
    int t = 0;
    int to_arm_registers = 0;

    to_arm_registers = (op == 1);
    t = UInt(Rt);
    t2 = UInt(Rt2);
    m = UInt(Concatenate(M, Vm, 4));
    if (unlikely(((t == 15) || (t2 == 15)))) {
        return UnpredictableInstruction("Reason: ((t == 15) || (t2 == 15))");
    }
    if (unlikely(((CurrentInstrSet() != InstrSet_ARM) && ((t == 13) || (t2 == 13))))) {
        return UnpredictableInstruction("Reason: ((CurrentInstrSet() != InstrSet_ARM) && ((t == 13) || (t2 == 13)))");
    }
    if (unlikely((to_arm_registers && (t == t2)))) {
        return UnpredictableInstruction("Reason: (to_arm_registers && (t == t2))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vmov_between_two_arm_core_registers_and_a_doubleword_extension_register;
    ins.m_to_string = decode_vmov_between_two_arm_core_registers_and_a_doubleword_extension_register_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vmov_between_two_arm_core_registers_and_a_doubleword_extension_register_a1";
    ins.encoding = encoding;
    ins.m = m;
    ins.t2 = t2;
    ins.t = t;
    ins.to_arm_registers = to_arm_registers;
    ins.cond = cond;
    ins.op = op;

    return ins;
}

ARMInstruction ARMDecoder::decode_vmovl_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 28);
    int     D = get_bit(opcode, 22);
    int  imm3 = get_bits(opcode, 21, 19);
    int    Vd = get_bits(opcode, 15, 12);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int unsigned_ = 0;
    int elements = 0;
    int m = 0;
    int d = 0;
    int esize = 0;

    if (unlikely((imm3 == 0))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely((((imm3 != 1) && (imm3 != 2)) && (imm3 != 4)))) {
        return SeeInstruction("VSHLL");
    }
    if (unlikely((get_bit(Vd, 0) == 1))) {
        return UndefinedInstruction("Reason: (get_bit(Vd, 0) == 1)");
    }
    esize = (8 * UInt(imm3));
    unsigned_ = (U == 1);
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vmovl;
    ins.m_to_string = decode_vmovl_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vmovl_t1";
    ins.encoding = encoding;
    ins.unsigned_ = unsigned_;
    ins.elements = elements;
    ins.m = m;
    ins.d = d;
    ins.esize = esize;
    ins.U = U;
    ins.D = D;

    return ins;
}

ARMInstruction ARMDecoder::decode_vmovl_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 24);
    int     D = get_bit(opcode, 22);
    int  imm3 = get_bits(opcode, 21, 19);
    int    Vd = get_bits(opcode, 15, 12);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int unsigned_ = 0;
    int elements = 0;
    int m = 0;
    int d = 0;
    int esize = 0;

    if (unlikely((imm3 == 0))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely((((imm3 != 1) && (imm3 != 2)) && (imm3 != 4)))) {
        return SeeInstruction("VSHLL");
    }
    if (unlikely((get_bit(Vd, 0) == 1))) {
        return UndefinedInstruction("Reason: (get_bit(Vd, 0) == 1)");
    }
    esize = (8 * UInt(imm3));
    unsigned_ = (U == 1);
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vmovl;
    ins.m_to_string = decode_vmovl_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vmovl_a1";
    ins.encoding = encoding;
    ins.unsigned_ = unsigned_;
    ins.elements = elements;
    ins.m = m;
    ins.d = d;
    ins.esize = esize;
    ins.U = U;
    ins.D = D;

    return ins;
}

ARMInstruction ARMDecoder::decode_vmovn_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 19, 18);
    int    Vd = get_bits(opcode, 15, 12);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int m = 0;
    int d = 0;
    int esize = 0;

    if (unlikely((size == 3))) {
        return UndefinedInstruction("Reason: (size == 3)");
    }
    if (unlikely((get_bit(Vm, 0) == 1))) {
        return UndefinedInstruction("Reason: (get_bit(Vm, 0) == 1)");
    }
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vmovn;
    ins.m_to_string = decode_vmovn_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vmovn_t1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.m = m;
    ins.d = d;
    ins.esize = esize;
    ins.D = D;
    ins.size = size;

    return ins;
}

ARMInstruction ARMDecoder::decode_vmovn_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 19, 18);
    int    Vd = get_bits(opcode, 15, 12);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int m = 0;
    int d = 0;
    int esize = 0;

    if (unlikely((size == 3))) {
        return UndefinedInstruction("Reason: (size == 3)");
    }
    if (unlikely((get_bit(Vm, 0) == 1))) {
        return UndefinedInstruction("Reason: (get_bit(Vm, 0) == 1)");
    }
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vmovn;
    ins.m_to_string = decode_vmovn_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vmovn_a1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.m = m;
    ins.d = d;
    ins.esize = esize;
    ins.D = D;
    ins.size = size;

    return ins;
}

ARMInstruction ARMDecoder::decode_vmrs_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int   reg = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int t = 0;

    t = UInt(Rt);
    if (unlikely(((t == 13) && (CurrentInstrSet() != InstrSet_ARM)))) {
        return UnpredictableInstruction("Reason: ((t == 13) && (CurrentInstrSet() != InstrSet_ARM))");
    }
    if (unlikely(((t == 15) && (reg != 1)))) {
        return UnpredictableInstruction("Reason: ((t == 15) && (reg != 1))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vmrs;
    ins.m_to_string = decode_vmrs_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vmrs_t1";
    ins.encoding = encoding;
    ins.t = t;
    ins.reg = reg;

    return ins;
}

ARMInstruction ARMDecoder::decode_vmrs_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int   reg = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int t = 0;

    t = UInt(Rt);
    if (unlikely(((t == 13) && (CurrentInstrSet() != InstrSet_ARM)))) {
        return UnpredictableInstruction("Reason: ((t == 13) && (CurrentInstrSet() != InstrSet_ARM))");
    }
    if (unlikely(((t == 15) && (reg != 1)))) {
        return UnpredictableInstruction("Reason: ((t == 15) && (reg != 1))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vmrs;
    ins.m_to_string = decode_vmrs_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vmrs_a1";
    ins.encoding = encoding;
    ins.t = t;
    ins.cond = cond;
    ins.reg = reg;

    return ins;
}

ARMInstruction ARMDecoder::decode_vmsr_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int   reg = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int t = 0;

    t = UInt(Rt);
    if (unlikely(((t == 15) || ((t == 13) && (CurrentInstrSet() != InstrSet_ARM))))) {
        return UnpredictableInstruction("Reason: ((t == 15) || ((t == 13) && (CurrentInstrSet() != InstrSet_ARM)))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vmsr;
    ins.m_to_string = decode_vmsr_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vmsr_t1";
    ins.encoding = encoding;
    ins.t = t;
    ins.reg = reg;

    return ins;
}

ARMInstruction ARMDecoder::decode_vmsr_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int   reg = get_bits(opcode, 19, 16);
    int    Rt = get_bits(opcode, 15, 12);
    int t = 0;

    t = UInt(Rt);
    if (unlikely(((t == 15) || ((t == 13) && (CurrentInstrSet() != InstrSet_ARM))))) {
        return UnpredictableInstruction("Reason: ((t == 15) || ((t == 13) && (CurrentInstrSet() != InstrSet_ARM)))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vmsr;
    ins.m_to_string = decode_vmsr_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vmsr_a1";
    ins.encoding = encoding;
    ins.t = t;
    ins.cond = cond;
    ins.reg = reg;

    return ins;
}

ARMInstruction ARMDecoder::decode_vmul_vmull_integer_and_polynomial_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    op = get_bit(opcode, 28);
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int n = 0;
    int long_destination = 0;
    int polynomial = 0;
    int unsigned_ = 0;

    if (unlikely(((size == 3) || ((op == 1) && (size != 0))))) {
        return UndefinedInstruction("Reason: ((size == 3) || ((op == 1) && (size != 0)))");
    }
    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1)))");
    }
    polynomial = (op == 1);
    long_destination = false;
    unsigned_ = false;
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vmul_vmull_integer_and_polynomial;
    ins.m_to_string = decode_vmul_vmull_integer_and_polynomial_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vmul_vmull_integer_and_polynomial_t1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.long_destination = long_destination;
    ins.polynomial = polynomial;
    ins.unsigned_ = unsigned_;
    ins.op = op;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vmul_vmull_integer_and_polynomial_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int    op = get_bit(opcode, 24);
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int n = 0;
    int long_destination = 0;
    int polynomial = 0;
    int unsigned_ = 0;

    if (unlikely(((size == 3) || ((op == 1) && (size != 0))))) {
        return UndefinedInstruction("Reason: ((size == 3) || ((op == 1) && (size != 0)))");
    }
    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1)))");
    }
    polynomial = (op == 1);
    long_destination = false;
    unsigned_ = false;
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vmul_vmull_integer_and_polynomial;
    ins.m_to_string = decode_vmul_vmull_integer_and_polynomial_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vmul_vmull_integer_and_polynomial_a1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.long_destination = long_destination;
    ins.polynomial = polynomial;
    ins.unsigned_ = unsigned_;
    ins.op = op;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vmul_vmull_integer_and_polynomial_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 28);
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int    op = get_bit(opcode,  9);
    int     N = get_bit(opcode,  7);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int n = 0;
    int long_destination = 0;
    int polynomial = 0;
    int unsigned_ = 0;

    if (unlikely((size == 3))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely(((op == 1) && ((U != 0) || (size != 0))))) {
        return UndefinedInstruction("Reason: ((op == 1) && ((U != 0) || (size != 0)))");
    }
    if (unlikely((get_bit(Vd, 0) == 1))) {
        return UndefinedInstruction("Reason: (get_bit(Vd, 0) == 1)");
    }
    polynomial = (op == 1);
    long_destination = true;
    unsigned_ = (U == 1);
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = 1;
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vmul_vmull_integer_and_polynomial;
    ins.m_to_string = decode_vmul_vmull_integer_and_polynomial_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vmul_vmull_integer_and_polynomial_t2";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.long_destination = long_destination;
    ins.polynomial = polynomial;
    ins.unsigned_ = unsigned_;
    ins.U = U;
    ins.D = D;
    ins.size = size;
    ins.op = op;

    return ins;
}

ARMInstruction ARMDecoder::decode_vmul_vmull_integer_and_polynomial_a2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 24);
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int    op = get_bit(opcode,  9);
    int     N = get_bit(opcode,  7);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int n = 0;
    int long_destination = 0;
    int polynomial = 0;
    int unsigned_ = 0;

    if (unlikely((size == 3))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely(((op == 1) && ((U != 0) || (size != 0))))) {
        return UndefinedInstruction("Reason: ((op == 1) && ((U != 0) || (size != 0)))");
    }
    if (unlikely((get_bit(Vd, 0) == 1))) {
        return UndefinedInstruction("Reason: (get_bit(Vd, 0) == 1)");
    }
    polynomial = (op == 1);
    long_destination = true;
    unsigned_ = (U == 1);
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = 1;
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vmul_vmull_integer_and_polynomial;
    ins.m_to_string = decode_vmul_vmull_integer_and_polynomial_a2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vmul_vmull_integer_and_polynomial_a2";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.long_destination = long_destination;
    ins.polynomial = polynomial;
    ins.unsigned_ = unsigned_;
    ins.U = U;
    ins.D = D;
    ins.size = size;
    ins.op = op;

    return ins;
}

ARMInstruction ARMDecoder::decode_vmul_floating_point_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    sz = get_bit(opcode, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int advsimd = 0;
    int m = 0;
    int regs = 0;
    int n = 0;

    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1)))");
    }
    if (unlikely((sz == 1))) {
        return UndefinedInstruction("Reason: (sz == 1)");
    }
    advsimd = true;
    esize = 32;
    elements = 2;
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vmul_floating_point;
    ins.m_to_string = decode_vmul_floating_point_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vmul_floating_point_t1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.advsimd = advsimd;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.D = D;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vmul_floating_point_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    sz = get_bit(opcode, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int advsimd = 0;
    int m = 0;
    int regs = 0;
    int n = 0;

    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1)))");
    }
    if (unlikely((sz == 1))) {
        return UndefinedInstruction("Reason: (sz == 1)");
    }
    advsimd = true;
    esize = 32;
    elements = 2;
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vmul_floating_point;
    ins.m_to_string = decode_vmul_floating_point_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vmul_floating_point_a1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.advsimd = advsimd;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.D = D;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vmul_floating_point_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int    sz = get_bit(opcode,  8);
    int     N = get_bit(opcode,  7);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int dp_operation = 0;
    int advsimd = 0;
    int m = 0;
    int d = 0;
    int n = 0;

    if (unlikely(((FPSCR.LEN != 0) || (FPSCR.STRIDE != 0)))) {
        return SeeInstruction("VFP vectors");
    }
    advsimd = false;
    dp_operation = (sz == 1);
    d = ((dp_operation) ? UInt(Concatenate(D, Vd, 4)) : UInt(Concatenate(Vd, D, 1)));
    n = ((dp_operation) ? UInt(Concatenate(N, Vn, 4)) : UInt(Concatenate(Vn, N, 1)));
    m = ((dp_operation) ? UInt(Concatenate(M, Vm, 4)) : UInt(Concatenate(Vm, M, 1)));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vmul_floating_point;
    ins.m_to_string = decode_vmul_floating_point_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vmul_floating_point_t2";
    ins.encoding = encoding;
    ins.dp_operation = dp_operation;
    ins.advsimd = advsimd;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.D = D;

    return ins;
}

ARMInstruction ARMDecoder::decode_vmul_floating_point_a2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     D = get_bit(opcode, 22);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int    sz = get_bit(opcode,  8);
    int     N = get_bit(opcode,  7);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int dp_operation = 0;
    int advsimd = 0;
    int m = 0;
    int d = 0;
    int n = 0;

    if (unlikely(((FPSCR.LEN != 0) || (FPSCR.STRIDE != 0)))) {
        return SeeInstruction("VFP vectors");
    }
    advsimd = false;
    dp_operation = (sz == 1);
    d = ((dp_operation) ? UInt(Concatenate(D, Vd, 4)) : UInt(Concatenate(Vd, D, 1)));
    n = ((dp_operation) ? UInt(Concatenate(N, Vn, 4)) : UInt(Concatenate(Vn, N, 1)));
    m = ((dp_operation) ? UInt(Concatenate(M, Vm, 4)) : UInt(Concatenate(Vm, M, 1)));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vmul_floating_point;
    ins.m_to_string = decode_vmul_floating_point_a2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vmul_floating_point_a2";
    ins.encoding = encoding;
    ins.dp_operation = dp_operation;
    ins.advsimd = advsimd;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;
    ins.D = D;

    return ins;
}

ARMInstruction ARMDecoder::decode_vmul_vmull_by_scalar_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     Q = get_bit(opcode, 28);
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     F = get_bit(opcode,  8);
    int     N = get_bit(opcode,  7);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int index = 0;
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int n = 0;
    int long_destination = 0;
    int unsigned_ = 0;
    int floating_point = 0;

    if (unlikely((size == 3))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely(((size == 0) || ((F == 1) && (size == 1))))) {
        return UndefinedInstruction("Reason: ((size == 0) || ((F == 1) && (size == 1)))");
    }
    if (unlikely(((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)))");
    }
    unsigned_ = false;
    floating_point = (F == 1);
    long_destination = false;
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    regs = (((Q == 0)) ? 1 : 2);
    if ((size == 1)) {
        esize = 16;
        elements = 4;
        m = UInt(get_bits(Vm, 2, 0));
        index = UInt(Concatenate(M, get_bit(Vm, 3), 1));
    }
    if ((size == 2)) {
        esize = 32;
        elements = 2;
        m = UInt(Vm);
        index = UInt(M);
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vmul_vmull_by_scalar;
    ins.m_to_string = decode_vmul_vmull_by_scalar_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vmul_vmull_by_scalar_t1";
    ins.encoding = encoding;
    ins.index = index;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.long_destination = long_destination;
    ins.unsigned_ = unsigned_;
    ins.floating_point = floating_point;
    ins.Q = Q;
    ins.D = D;
    ins.size = size;

    return ins;
}

ARMInstruction ARMDecoder::decode_vmul_vmull_by_scalar_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     Q = get_bit(opcode, 24);
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     F = get_bit(opcode,  8);
    int     N = get_bit(opcode,  7);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int index = 0;
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int n = 0;
    int long_destination = 0;
    int unsigned_ = 0;
    int floating_point = 0;

    if (unlikely((size == 3))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely(((size == 0) || ((F == 1) && (size == 1))))) {
        return UndefinedInstruction("Reason: ((size == 0) || ((F == 1) && (size == 1)))");
    }
    if (unlikely(((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)))");
    }
    unsigned_ = false;
    floating_point = (F == 1);
    long_destination = false;
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    regs = (((Q == 0)) ? 1 : 2);
    if ((size == 1)) {
        esize = 16;
        elements = 4;
        m = UInt(get_bits(Vm, 2, 0));
        index = UInt(Concatenate(M, get_bit(Vm, 3), 1));
    }
    if ((size == 2)) {
        esize = 32;
        elements = 2;
        m = UInt(Vm);
        index = UInt(M);
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vmul_vmull_by_scalar;
    ins.m_to_string = decode_vmul_vmull_by_scalar_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vmul_vmull_by_scalar_a1";
    ins.encoding = encoding;
    ins.index = index;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.long_destination = long_destination;
    ins.unsigned_ = unsigned_;
    ins.floating_point = floating_point;
    ins.Q = Q;
    ins.D = D;
    ins.size = size;

    return ins;
}

ARMInstruction ARMDecoder::decode_vmul_vmull_by_scalar_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 28);
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int index = 0;
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int n = 0;
    int long_destination = 0;
    int unsigned_ = 0;
    int floating_point = 0;

    if (unlikely((size == 3))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely(((size == 0) || (get_bit(Vd, 0) == 1)))) {
        return UndefinedInstruction("Reason: ((size == 0) || (get_bit(Vd, 0) == 1))");
    }
    unsigned_ = (U == 1);
    long_destination = true;
    floating_point = false;
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    regs = 1;
    if ((size == 1)) {
        esize = 16;
        elements = 4;
        m = UInt(get_bits(Vm, 2, 0));
        index = UInt(Concatenate(M, get_bit(Vm, 3), 1));
    }
    if ((size == 2)) {
        esize = 32;
        elements = 2;
        m = UInt(Vm);
        index = UInt(M);
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vmul_vmull_by_scalar;
    ins.m_to_string = decode_vmul_vmull_by_scalar_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vmul_vmull_by_scalar_t2";
    ins.encoding = encoding;
    ins.index = index;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.long_destination = long_destination;
    ins.unsigned_ = unsigned_;
    ins.floating_point = floating_point;
    ins.U = U;
    ins.D = D;
    ins.size = size;

    return ins;
}

ARMInstruction ARMDecoder::decode_vmul_vmull_by_scalar_a2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 24);
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int index = 0;
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int n = 0;
    int long_destination = 0;
    int unsigned_ = 0;
    int floating_point = 0;

    if (unlikely((size == 3))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely(((size == 0) || (get_bit(Vd, 0) == 1)))) {
        return UndefinedInstruction("Reason: ((size == 0) || (get_bit(Vd, 0) == 1))");
    }
    unsigned_ = (U == 1);
    long_destination = true;
    floating_point = false;
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    regs = 1;
    if ((size == 1)) {
        esize = 16;
        elements = 4;
        m = UInt(get_bits(Vm, 2, 0));
        index = UInt(Concatenate(M, get_bit(Vm, 3), 1));
    }
    if ((size == 2)) {
        esize = 32;
        elements = 2;
        m = UInt(Vm);
        index = UInt(M);
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vmul_vmull_by_scalar;
    ins.m_to_string = decode_vmul_vmull_by_scalar_a2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vmul_vmull_by_scalar_a2";
    ins.encoding = encoding;
    ins.index = index;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.long_destination = long_destination;
    ins.unsigned_ = unsigned_;
    ins.floating_point = floating_point;
    ins.U = U;
    ins.D = D;
    ins.size = size;

    return ins;
}

ARMInstruction ARMDecoder::decode_vmvn_immediate_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     i = get_bit(opcode, 28);
    int     D = get_bit(opcode, 22);
    int  imm3 = get_bits(opcode, 18, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int cmode = get_bits(opcode, 11,  8);
    int     Q = get_bit(opcode,  6);
    int  imm4 = get_bits(opcode,  3,  0);
    uint64_t imm64 = 0;
    int d = 0;
    int regs = 0;

    if (unlikely((((get_bit(cmode, 0) == 1) && (get_bits(cmode, 3, 2) != 3)) || (get_bits(cmode, 3, 1) == 7)))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely(((Q == 1) && (get_bit(Vd, 0) == 1)))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (get_bit(Vd, 0) == 1))");
    }
    imm64 = AdvSIMDExpandImm(1, cmode, Concatenate(Concatenate(i, imm3, 3), imm4, 4));
    d = UInt(Concatenate(D, Vd, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vmvn_immediate;
    ins.m_to_string = decode_vmvn_immediate_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vmvn_immediate_t1";
    ins.encoding = encoding;
    ins.imm64 = imm64;
    ins.d = d;
    ins.regs = regs;
    ins.D = D;
    ins.cmode = cmode;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vmvn_immediate_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     i = get_bit(opcode, 24);
    int     D = get_bit(opcode, 22);
    int  imm3 = get_bits(opcode, 18, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int cmode = get_bits(opcode, 11,  8);
    int     Q = get_bit(opcode,  6);
    int  imm4 = get_bits(opcode,  3,  0);
    uint64_t imm64 = 0;
    int d = 0;
    int regs = 0;

    if (unlikely((((get_bit(cmode, 0) == 1) && (get_bits(cmode, 3, 2) != 3)) || (get_bits(cmode, 3, 1) == 7)))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely(((Q == 1) && (get_bit(Vd, 0) == 1)))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (get_bit(Vd, 0) == 1))");
    }
    imm64 = AdvSIMDExpandImm(1, cmode, Concatenate(Concatenate(i, imm3, 3), imm4, 4));
    d = UInt(Concatenate(D, Vd, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vmvn_immediate;
    ins.m_to_string = decode_vmvn_immediate_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vmvn_immediate_a1";
    ins.encoding = encoding;
    ins.imm64 = imm64;
    ins.d = d;
    ins.regs = regs;
    ins.D = D;
    ins.cmode = cmode;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vmvn_register_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 19, 18);
    int    Vd = get_bits(opcode, 15, 12);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int regs = 0;

    if (unlikely((size != 0))) {
        return UndefinedInstruction("Reason: (size != 0)");
    }
    if (unlikely(((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)))");
    }
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vmvn_register;
    ins.m_to_string = decode_vmvn_register_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vmvn_register_t1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.regs = regs;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vmvn_register_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 19, 18);
    int    Vd = get_bits(opcode, 15, 12);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int regs = 0;

    if (unlikely((size != 0))) {
        return UndefinedInstruction("Reason: (size != 0)");
    }
    if (unlikely(((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)))");
    }
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vmvn_register;
    ins.m_to_string = decode_vmvn_register_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vmvn_register_a1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.regs = regs;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vneg_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 19, 18);
    int    Vd = get_bits(opcode, 15, 12);
    int     F = get_bit(opcode, 10);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int advsimd = 0;
    int m = 0;
    int regs = 0;
    int floating_point = 0;

    if (unlikely(((size == 3) || ((F == 1) && (size != 2))))) {
        return UndefinedInstruction("Reason: ((size == 3) || ((F == 1) && (size != 2)))");
    }
    if (unlikely(((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)))");
    }
    advsimd = true;
    floating_point = (F == 1);
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vneg;
    ins.m_to_string = decode_vneg_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vneg_t1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.advsimd = advsimd;
    ins.m = m;
    ins.regs = regs;
    ins.floating_point = floating_point;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vneg_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 19, 18);
    int    Vd = get_bits(opcode, 15, 12);
    int     F = get_bit(opcode, 10);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int advsimd = 0;
    int m = 0;
    int regs = 0;
    int floating_point = 0;

    if (unlikely(((size == 3) || ((F == 1) && (size != 2))))) {
        return UndefinedInstruction("Reason: ((size == 3) || ((F == 1) && (size != 2)))");
    }
    if (unlikely(((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)))");
    }
    advsimd = true;
    floating_point = (F == 1);
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vneg;
    ins.m_to_string = decode_vneg_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vneg_a1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.advsimd = advsimd;
    ins.m = m;
    ins.regs = regs;
    ins.floating_point = floating_point;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vneg_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    Vd = get_bits(opcode, 15, 12);
    int    sz = get_bit(opcode,  8);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int dp_operation = 0;
    int advsimd = 0;
    int m = 0;
    int d = 0;

    if (unlikely(((FPSCR.LEN != 0) || (FPSCR.STRIDE != 0)))) {
        return SeeInstruction("VFP vectors");
    }
    advsimd = false;
    dp_operation = (sz == 1);
    d = ((dp_operation) ? UInt(Concatenate(D, Vd, 4)) : UInt(Concatenate(Vd, D, 1)));
    m = ((dp_operation) ? UInt(Concatenate(M, Vm, 4)) : UInt(Concatenate(Vm, M, 1)));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vneg;
    ins.m_to_string = decode_vneg_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vneg_t2";
    ins.encoding = encoding;
    ins.dp_operation = dp_operation;
    ins.advsimd = advsimd;
    ins.m = m;
    ins.d = d;
    ins.D = D;

    return ins;
}

ARMInstruction ARMDecoder::decode_vneg_a2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     D = get_bit(opcode, 22);
    int    Vd = get_bits(opcode, 15, 12);
    int    sz = get_bit(opcode,  8);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int dp_operation = 0;
    int advsimd = 0;
    int m = 0;
    int d = 0;

    if (unlikely(((FPSCR.LEN != 0) || (FPSCR.STRIDE != 0)))) {
        return SeeInstruction("VFP vectors");
    }
    advsimd = false;
    dp_operation = (sz == 1);
    d = ((dp_operation) ? UInt(Concatenate(D, Vd, 4)) : UInt(Concatenate(Vd, D, 1)));
    m = ((dp_operation) ? UInt(Concatenate(M, Vm, 4)) : UInt(Concatenate(Vm, M, 1)));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vneg;
    ins.m_to_string = decode_vneg_a2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vneg_a2";
    ins.encoding = encoding;
    ins.dp_operation = dp_operation;
    ins.advsimd = advsimd;
    ins.m = m;
    ins.d = d;
    ins.cond = cond;
    ins.D = D;

    return ins;
}

ARMInstruction ARMDecoder::decode_vnmla_vnmls_vnmul_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int    sz = get_bit(opcode,  8);
    int     N = get_bit(opcode,  7);
    int    op = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int m = 0;
    int dp_operation = 0;
    int type = 0;
    int d = 0;
    int n = 0;

    if (unlikely(((FPSCR.LEN != 0) || (FPSCR.STRIDE != 0)))) {
        return SeeInstruction("VFP vectors");
    }
    type = (((op == 1)) ? VFPNegMul_VNMLA : VFPNegMul_VNMLS);
    dp_operation = (sz == 1);
    d = ((dp_operation) ? UInt(Concatenate(D, Vd, 4)) : UInt(Concatenate(Vd, D, 1)));
    n = ((dp_operation) ? UInt(Concatenate(N, Vn, 4)) : UInt(Concatenate(Vn, N, 1)));
    m = ((dp_operation) ? UInt(Concatenate(M, Vm, 4)) : UInt(Concatenate(Vm, M, 1)));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vnmla_vnmls_vnmul;
    ins.m_to_string = decode_vnmla_vnmls_vnmul_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vnmla_vnmls_vnmul_t1";
    ins.encoding = encoding;
    ins.m = m;
    ins.dp_operation = dp_operation;
    ins.type = type;
    ins.d = d;
    ins.n = n;
    ins.D = D;
    ins.op = op;

    return ins;
}

ARMInstruction ARMDecoder::decode_vnmla_vnmls_vnmul_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     D = get_bit(opcode, 22);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int    sz = get_bit(opcode,  8);
    int     N = get_bit(opcode,  7);
    int    op = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int m = 0;
    int dp_operation = 0;
    int type = 0;
    int d = 0;
    int n = 0;

    if (unlikely(((FPSCR.LEN != 0) || (FPSCR.STRIDE != 0)))) {
        return SeeInstruction("VFP vectors");
    }
    type = (((op == 1)) ? VFPNegMul_VNMLA : VFPNegMul_VNMLS);
    dp_operation = (sz == 1);
    d = ((dp_operation) ? UInt(Concatenate(D, Vd, 4)) : UInt(Concatenate(Vd, D, 1)));
    n = ((dp_operation) ? UInt(Concatenate(N, Vn, 4)) : UInt(Concatenate(Vn, N, 1)));
    m = ((dp_operation) ? UInt(Concatenate(M, Vm, 4)) : UInt(Concatenate(Vm, M, 1)));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vnmla_vnmls_vnmul;
    ins.m_to_string = decode_vnmla_vnmls_vnmul_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vnmla_vnmls_vnmul_a1";
    ins.encoding = encoding;
    ins.m = m;
    ins.dp_operation = dp_operation;
    ins.type = type;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;
    ins.D = D;
    ins.op = op;

    return ins;
}

ARMInstruction ARMDecoder::decode_vnmla_vnmls_vnmul_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int    sz = get_bit(opcode,  8);
    int     N = get_bit(opcode,  7);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int m = 0;
    int dp_operation = 0;
    int type = 0;
    int d = 0;
    int n = 0;

    if (unlikely(((FPSCR.LEN != 0) || (FPSCR.STRIDE != 0)))) {
        return SeeInstruction("VFP vectors");
    }
    type = VFPNegMul_VNMUL;
    dp_operation = (sz == 1);
    d = ((dp_operation) ? UInt(Concatenate(D, Vd, 4)) : UInt(Concatenate(Vd, D, 1)));
    n = ((dp_operation) ? UInt(Concatenate(N, Vn, 4)) : UInt(Concatenate(Vn, N, 1)));
    m = ((dp_operation) ? UInt(Concatenate(M, Vm, 4)) : UInt(Concatenate(Vm, M, 1)));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vnmla_vnmls_vnmul;
    ins.m_to_string = decode_vnmla_vnmls_vnmul_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vnmla_vnmls_vnmul_t2";
    ins.encoding = encoding;
    ins.m = m;
    ins.dp_operation = dp_operation;
    ins.type = type;
    ins.d = d;
    ins.n = n;
    ins.D = D;

    return ins;
}

ARMInstruction ARMDecoder::decode_vnmla_vnmls_vnmul_a2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     D = get_bit(opcode, 22);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int    sz = get_bit(opcode,  8);
    int     N = get_bit(opcode,  7);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int m = 0;
    int dp_operation = 0;
    int type = 0;
    int d = 0;
    int n = 0;

    if (unlikely(((FPSCR.LEN != 0) || (FPSCR.STRIDE != 0)))) {
        return SeeInstruction("VFP vectors");
    }
    type = VFPNegMul_VNMUL;
    dp_operation = (sz == 1);
    d = ((dp_operation) ? UInt(Concatenate(D, Vd, 4)) : UInt(Concatenate(Vd, D, 1)));
    n = ((dp_operation) ? UInt(Concatenate(N, Vn, 4)) : UInt(Concatenate(Vn, N, 1)));
    m = ((dp_operation) ? UInt(Concatenate(M, Vm, 4)) : UInt(Concatenate(Vm, M, 1)));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vnmla_vnmls_vnmul;
    ins.m_to_string = decode_vnmla_vnmls_vnmul_a2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vnmla_vnmls_vnmul_a2";
    ins.encoding = encoding;
    ins.m = m;
    ins.dp_operation = dp_operation;
    ins.type = type;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;
    ins.D = D;

    return ins;
}

ARMInstruction ARMDecoder::decode_vorn_register_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int regs = 0;
    int m = 0;
    int d = 0;
    int n = 0;

    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1)))");
    }
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vorn_register;
    ins.m_to_string = decode_vorn_register_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vorn_register_t1";
    ins.encoding = encoding;
    ins.regs = regs;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.D = D;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vorn_register_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int regs = 0;
    int m = 0;
    int d = 0;
    int n = 0;

    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1)))");
    }
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vorn_register;
    ins.m_to_string = decode_vorn_register_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vorn_register_a1";
    ins.encoding = encoding;
    ins.regs = regs;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.D = D;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vorr_immediate_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     i = get_bit(opcode, 28);
    int     D = get_bit(opcode, 22);
    int  imm3 = get_bits(opcode, 18, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int cmode = get_bits(opcode, 11,  8);
    int     Q = get_bit(opcode,  6);
    int  imm4 = get_bits(opcode,  3,  0);
    uint64_t imm64 = 0;
    int d = 0;
    int regs = 0;

    if (unlikely(((get_bit(cmode, 0) == 0) || (get_bits(cmode, 3, 2) == 3)))) {
        return SeeInstruction("VMOV (immediate)");
    }
    if (unlikely(((Q == 1) && (get_bit(Vd, 0) == 1)))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (get_bit(Vd, 0) == 1))");
    }
    imm64 = AdvSIMDExpandImm(0, cmode, Concatenate(Concatenate(i, imm3, 3), imm4, 4));
    d = UInt(Concatenate(D, Vd, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vorr_immediate;
    ins.m_to_string = decode_vorr_immediate_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vorr_immediate_t1";
    ins.encoding = encoding;
    ins.imm64 = imm64;
    ins.d = d;
    ins.regs = regs;
    ins.D = D;
    ins.cmode = cmode;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vorr_immediate_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     i = get_bit(opcode, 24);
    int     D = get_bit(opcode, 22);
    int  imm3 = get_bits(opcode, 18, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int cmode = get_bits(opcode, 11,  8);
    int     Q = get_bit(opcode,  6);
    int  imm4 = get_bits(opcode,  3,  0);
    uint64_t imm64 = 0;
    int d = 0;
    int regs = 0;

    if (unlikely(((get_bit(cmode, 0) == 0) || (get_bits(cmode, 3, 2) == 3)))) {
        return SeeInstruction("VMOV (immediate)");
    }
    if (unlikely(((Q == 1) && (get_bit(Vd, 0) == 1)))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (get_bit(Vd, 0) == 1))");
    }
    imm64 = AdvSIMDExpandImm(0, cmode, Concatenate(Concatenate(i, imm3, 3), imm4, 4));
    d = UInt(Concatenate(D, Vd, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vorr_immediate;
    ins.m_to_string = decode_vorr_immediate_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vorr_immediate_a1";
    ins.encoding = encoding;
    ins.imm64 = imm64;
    ins.d = d;
    ins.regs = regs;
    ins.D = D;
    ins.cmode = cmode;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vorr_register_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int regs = 0;
    int m = 0;
    int d = 0;
    int n = 0;

    if (unlikely(((N == M) && (Vn == Vm)))) {
        return SeeInstruction("VMOV (register)");
    }
    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1)))");
    }
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vorr_register;
    ins.m_to_string = decode_vorr_register_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vorr_register_t1";
    ins.encoding = encoding;
    ins.regs = regs;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.D = D;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vorr_register_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int regs = 0;
    int m = 0;
    int d = 0;
    int n = 0;

    if (unlikely(((N == M) && (Vn == Vm)))) {
        return SeeInstruction("VMOV (register)");
    }
    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1)))");
    }
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vorr_register;
    ins.m_to_string = decode_vorr_register_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vorr_register_a1";
    ins.encoding = encoding;
    ins.regs = regs;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.D = D;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vpadal_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 19, 18);
    int    Vd = get_bits(opcode, 15, 12);
    int    op = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int unsigned_ = 0;

    if (unlikely((size == 3))) {
        return UndefinedInstruction("Reason: (size == 3)");
    }
    if (unlikely(((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)))");
    }
    unsigned_ = (op == 1);
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vpadal;
    ins.m_to_string = decode_vpadal_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vpadal_t1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.unsigned_ = unsigned_;
    ins.D = D;
    ins.size = size;
    ins.op = op;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vpadal_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 19, 18);
    int    Vd = get_bits(opcode, 15, 12);
    int    op = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int unsigned_ = 0;

    if (unlikely((size == 3))) {
        return UndefinedInstruction("Reason: (size == 3)");
    }
    if (unlikely(((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)))");
    }
    unsigned_ = (op == 1);
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vpadal;
    ins.m_to_string = decode_vpadal_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vpadal_a1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.unsigned_ = unsigned_;
    ins.D = D;
    ins.size = size;
    ins.op = op;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vpadd_integer_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int n = 0;
    int elements = 0;
    int m = 0;
    int d = 0;
    int esize = 0;

    if (unlikely(((size == 3) || (Q == 1)))) {
        return UndefinedInstruction("Reason: ((size == 3) || (Q == 1))");
    }
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vpadd_integer;
    ins.m_to_string = decode_vpadd_integer_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vpadd_integer_t1";
    ins.encoding = encoding;
    ins.n = n;
    ins.elements = elements;
    ins.m = m;
    ins.d = d;
    ins.esize = esize;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vpadd_integer_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int n = 0;
    int elements = 0;
    int m = 0;
    int d = 0;
    int esize = 0;

    if (unlikely(((size == 3) || (Q == 1)))) {
        return UndefinedInstruction("Reason: ((size == 3) || (Q == 1))");
    }
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vpadd_integer;
    ins.m_to_string = decode_vpadd_integer_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vpadd_integer_a1";
    ins.encoding = encoding;
    ins.n = n;
    ins.elements = elements;
    ins.m = m;
    ins.d = d;
    ins.esize = esize;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vpadd_floating_point_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    sz = get_bit(opcode, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int n = 0;
    int elements = 0;
    int m = 0;
    int d = 0;
    int esize = 0;

    if (unlikely(((sz == 1) || (Q == 1)))) {
        return UndefinedInstruction("Reason: ((sz == 1) || (Q == 1))");
    }
    esize = 32;
    elements = 2;
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vpadd_floating_point;
    ins.m_to_string = decode_vpadd_floating_point_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vpadd_floating_point_t1";
    ins.encoding = encoding;
    ins.n = n;
    ins.elements = elements;
    ins.m = m;
    ins.d = d;
    ins.esize = esize;
    ins.D = D;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vpadd_floating_point_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    sz = get_bit(opcode, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int n = 0;
    int elements = 0;
    int m = 0;
    int d = 0;
    int esize = 0;

    if (unlikely(((sz == 1) || (Q == 1)))) {
        return UndefinedInstruction("Reason: ((sz == 1) || (Q == 1))");
    }
    esize = 32;
    elements = 2;
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vpadd_floating_point;
    ins.m_to_string = decode_vpadd_floating_point_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vpadd_floating_point_a1";
    ins.encoding = encoding;
    ins.n = n;
    ins.elements = elements;
    ins.m = m;
    ins.d = d;
    ins.esize = esize;
    ins.D = D;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vpaddl_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 19, 18);
    int    Vd = get_bits(opcode, 15, 12);
    int    op = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int unsigned_ = 0;

    if (unlikely((size == 3))) {
        return UndefinedInstruction("Reason: (size == 3)");
    }
    if (unlikely(((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)))");
    }
    unsigned_ = (op == 1);
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vpaddl;
    ins.m_to_string = decode_vpaddl_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vpaddl_t1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.unsigned_ = unsigned_;
    ins.D = D;
    ins.size = size;
    ins.op = op;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vpaddl_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 19, 18);
    int    Vd = get_bits(opcode, 15, 12);
    int    op = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int unsigned_ = 0;

    if (unlikely((size == 3))) {
        return UndefinedInstruction("Reason: (size == 3)");
    }
    if (unlikely(((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)))");
    }
    unsigned_ = (op == 1);
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vpaddl;
    ins.m_to_string = decode_vpaddl_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vpaddl_a1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.unsigned_ = unsigned_;
    ins.D = D;
    ins.size = size;
    ins.op = op;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vpmax_vpmin_integer_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 28);
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    op = get_bit(opcode,  4);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int maximum = 0;
    int n = 0;
    int unsigned_ = 0;

    if (unlikely(((size == 3) || (Q == 1)))) {
        return UndefinedInstruction("Reason: ((size == 3) || (Q == 1))");
    }
    maximum = (op == 0);
    unsigned_ = (U == 1);
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vpmax_vpmin_integer;
    ins.m_to_string = decode_vpmax_vpmin_integer_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vpmax_vpmin_integer_t1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.maximum = maximum;
    ins.n = n;
    ins.unsigned_ = unsigned_;
    ins.U = U;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;
    ins.op = op;

    return ins;
}

ARMInstruction ARMDecoder::decode_vpmax_vpmin_integer_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 24);
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    op = get_bit(opcode,  4);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int maximum = 0;
    int n = 0;
    int unsigned_ = 0;

    if (unlikely(((size == 3) || (Q == 1)))) {
        return UndefinedInstruction("Reason: ((size == 3) || (Q == 1))");
    }
    maximum = (op == 0);
    unsigned_ = (U == 1);
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vpmax_vpmin_integer;
    ins.m_to_string = decode_vpmax_vpmin_integer_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vpmax_vpmin_integer_a1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.maximum = maximum;
    ins.n = n;
    ins.unsigned_ = unsigned_;
    ins.U = U;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;
    ins.op = op;

    return ins;
}

ARMInstruction ARMDecoder::decode_vpmax_vpmin_floating_point_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    op = get_bit(opcode, 21);
    int    sz = get_bit(opcode, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int maximum = 0;
    int n = 0;

    if (unlikely(((sz == 1) || (Q == 1)))) {
        return UndefinedInstruction("Reason: ((sz == 1) || (Q == 1))");
    }
    maximum = (op == 0);
    esize = 32;
    elements = 2;
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vpmax_vpmin_floating_point;
    ins.m_to_string = decode_vpmax_vpmin_floating_point_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vpmax_vpmin_floating_point_t1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.maximum = maximum;
    ins.n = n;
    ins.D = D;
    ins.op = op;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vpmax_vpmin_floating_point_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    op = get_bit(opcode, 21);
    int    sz = get_bit(opcode, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int maximum = 0;
    int n = 0;

    if (unlikely(((sz == 1) || (Q == 1)))) {
        return UndefinedInstruction("Reason: ((sz == 1) || (Q == 1))");
    }
    maximum = (op == 0);
    esize = 32;
    elements = 2;
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vpmax_vpmin_floating_point;
    ins.m_to_string = decode_vpmax_vpmin_floating_point_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vpmax_vpmin_floating_point_a1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.maximum = maximum;
    ins.n = n;
    ins.D = D;
    ins.op = op;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vpop_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    Vd = get_bits(opcode, 15, 12);
    int  imm8 = get_bits(opcode,  7,  0);
    int single_regs = 0;
    int regs = 0;
    int d = 0;
    int imm32 = 0;

    single_regs = false;
    d = UInt(Concatenate(D, Vd, 4));
    imm32 = ZeroExtend(Concatenate(imm8, 0, 2), 32);
    regs = (UInt(imm8) / 2);
    if (unlikely((((regs == 0) || (regs > 16)) || ((d + regs) > 32)))) {
        return UnpredictableInstruction("Reason: (((regs == 0) || (regs > 16)) || ((d + regs) > 32))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vpop;
    ins.m_to_string = decode_vpop_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vpop_t1";
    ins.encoding = encoding;
    ins.single_regs = single_regs;
    ins.regs = regs;
    ins.d = d;
    ins.imm32 = imm32;
    ins.D = D;

    return ins;
}

ARMInstruction ARMDecoder::decode_vpop_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     D = get_bit(opcode, 22);
    int    Vd = get_bits(opcode, 15, 12);
    int  imm8 = get_bits(opcode,  7,  0);
    int single_regs = 0;
    int regs = 0;
    int d = 0;
    int imm32 = 0;

    single_regs = false;
    d = UInt(Concatenate(D, Vd, 4));
    imm32 = ZeroExtend(Concatenate(imm8, 0, 2), 32);
    regs = (UInt(imm8) / 2);
    if (unlikely((((regs == 0) || (regs > 16)) || ((d + regs) > 32)))) {
        return UnpredictableInstruction("Reason: (((regs == 0) || (regs > 16)) || ((d + regs) > 32))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vpop;
    ins.m_to_string = decode_vpop_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vpop_a1";
    ins.encoding = encoding;
    ins.single_regs = single_regs;
    ins.regs = regs;
    ins.d = d;
    ins.imm32 = imm32;
    ins.cond = cond;
    ins.D = D;

    return ins;
}

ARMInstruction ARMDecoder::decode_vpop_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    Vd = get_bits(opcode, 15, 12);
    int  imm8 = get_bits(opcode,  7,  0);
    int single_regs = 0;
    int regs = 0;
    int d = 0;
    int imm32 = 0;

    single_regs = true;
    d = UInt(Concatenate(Vd, D, 1));
    imm32 = ZeroExtend(Concatenate(imm8, 0, 2), 32);
    regs = UInt(imm8);
    if (unlikely(((regs == 0) || ((d + regs) > 32)))) {
        return UnpredictableInstruction("Reason: ((regs == 0) || ((d + regs) > 32))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vpop;
    ins.m_to_string = decode_vpop_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vpop_t2";
    ins.encoding = encoding;
    ins.single_regs = single_regs;
    ins.regs = regs;
    ins.d = d;
    ins.imm32 = imm32;
    ins.D = D;

    return ins;
}

ARMInstruction ARMDecoder::decode_vpop_a2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     D = get_bit(opcode, 22);
    int    Vd = get_bits(opcode, 15, 12);
    int  imm8 = get_bits(opcode,  7,  0);
    int single_regs = 0;
    int regs = 0;
    int d = 0;
    int imm32 = 0;

    single_regs = true;
    d = UInt(Concatenate(Vd, D, 1));
    imm32 = ZeroExtend(Concatenate(imm8, 0, 2), 32);
    regs = UInt(imm8);
    if (unlikely(((regs == 0) || ((d + regs) > 32)))) {
        return UnpredictableInstruction("Reason: ((regs == 0) || ((d + regs) > 32))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vpop;
    ins.m_to_string = decode_vpop_a2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vpop_a2";
    ins.encoding = encoding;
    ins.single_regs = single_regs;
    ins.regs = regs;
    ins.d = d;
    ins.imm32 = imm32;
    ins.cond = cond;
    ins.D = D;

    return ins;
}

ARMInstruction ARMDecoder::decode_vpush_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    Vd = get_bits(opcode, 15, 12);
    int  imm8 = get_bits(opcode,  7,  0);
    int single_regs = 0;
    int regs = 0;
    int d = 0;
    int imm32 = 0;

    single_regs = false;
    d = UInt(Concatenate(D, Vd, 4));
    imm32 = ZeroExtend(Concatenate(imm8, 0, 2), 32);
    regs = (UInt(imm8) / 2);
    if (unlikely((((regs == 0) || (regs > 16)) || ((d + regs) > 32)))) {
        return UnpredictableInstruction("Reason: (((regs == 0) || (regs > 16)) || ((d + regs) > 32))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vpush;
    ins.m_to_string = decode_vpush_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vpush_t1";
    ins.encoding = encoding;
    ins.single_regs = single_regs;
    ins.regs = regs;
    ins.d = d;
    ins.imm32 = imm32;
    ins.D = D;

    return ins;
}

ARMInstruction ARMDecoder::decode_vpush_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     D = get_bit(opcode, 22);
    int    Vd = get_bits(opcode, 15, 12);
    int  imm8 = get_bits(opcode,  7,  0);
    int single_regs = 0;
    int regs = 0;
    int d = 0;
    int imm32 = 0;

    single_regs = false;
    d = UInt(Concatenate(D, Vd, 4));
    imm32 = ZeroExtend(Concatenate(imm8, 0, 2), 32);
    regs = (UInt(imm8) / 2);
    if (unlikely((((regs == 0) || (regs > 16)) || ((d + regs) > 32)))) {
        return UnpredictableInstruction("Reason: (((regs == 0) || (regs > 16)) || ((d + regs) > 32))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vpush;
    ins.m_to_string = decode_vpush_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vpush_a1";
    ins.encoding = encoding;
    ins.single_regs = single_regs;
    ins.regs = regs;
    ins.d = d;
    ins.imm32 = imm32;
    ins.cond = cond;
    ins.D = D;

    return ins;
}

ARMInstruction ARMDecoder::decode_vpush_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    Vd = get_bits(opcode, 15, 12);
    int  imm8 = get_bits(opcode,  7,  0);
    int single_regs = 0;
    int regs = 0;
    int d = 0;
    int imm32 = 0;

    single_regs = true;
    d = UInt(Concatenate(Vd, D, 1));
    imm32 = ZeroExtend(Concatenate(imm8, 0, 2), 32);
    regs = UInt(imm8);
    if (unlikely(((regs == 0) || ((d + regs) > 32)))) {
        return UnpredictableInstruction("Reason: ((regs == 0) || ((d + regs) > 32))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vpush;
    ins.m_to_string = decode_vpush_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vpush_t2";
    ins.encoding = encoding;
    ins.single_regs = single_regs;
    ins.regs = regs;
    ins.d = d;
    ins.imm32 = imm32;
    ins.D = D;

    return ins;
}

ARMInstruction ARMDecoder::decode_vpush_a2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     D = get_bit(opcode, 22);
    int    Vd = get_bits(opcode, 15, 12);
    int  imm8 = get_bits(opcode,  7,  0);
    int single_regs = 0;
    int regs = 0;
    int d = 0;
    int imm32 = 0;

    single_regs = true;
    d = UInt(Concatenate(Vd, D, 1));
    imm32 = ZeroExtend(Concatenate(imm8, 0, 2), 32);
    regs = UInt(imm8);
    if (unlikely(((regs == 0) || ((d + regs) > 32)))) {
        return UnpredictableInstruction("Reason: ((regs == 0) || ((d + regs) > 32))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vpush;
    ins.m_to_string = decode_vpush_a2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vpush_a2";
    ins.encoding = encoding;
    ins.single_regs = single_regs;
    ins.regs = regs;
    ins.d = d;
    ins.imm32 = imm32;
    ins.cond = cond;
    ins.D = D;

    return ins;
}

ARMInstruction ARMDecoder::decode_vqabs_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 19, 18);
    int    Vd = get_bits(opcode, 15, 12);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int regs = 0;
    int elements = 0;
    int m = 0;
    int d = 0;
    int esize = 0;

    if (unlikely((size == 3))) {
        return UndefinedInstruction("Reason: (size == 3)");
    }
    if (unlikely(((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)))");
    }
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vqabs;
    ins.m_to_string = decode_vqabs_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vqabs_t1";
    ins.encoding = encoding;
    ins.regs = regs;
    ins.elements = elements;
    ins.m = m;
    ins.d = d;
    ins.esize = esize;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vqabs_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 19, 18);
    int    Vd = get_bits(opcode, 15, 12);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int regs = 0;
    int elements = 0;
    int m = 0;
    int d = 0;
    int esize = 0;

    if (unlikely((size == 3))) {
        return UndefinedInstruction("Reason: (size == 3)");
    }
    if (unlikely(((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)))");
    }
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vqabs;
    ins.m_to_string = decode_vqabs_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vqabs_a1";
    ins.encoding = encoding;
    ins.regs = regs;
    ins.elements = elements;
    ins.m = m;
    ins.d = d;
    ins.esize = esize;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vqadd_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 28);
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int n = 0;
    int unsigned_ = 0;

    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1)))");
    }
    unsigned_ = (U == 1);
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vqadd;
    ins.m_to_string = decode_vqadd_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vqadd_t1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.unsigned_ = unsigned_;
    ins.U = U;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vqadd_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 24);
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int n = 0;
    int unsigned_ = 0;

    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1)))");
    }
    unsigned_ = (U == 1);
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vqadd;
    ins.m_to_string = decode_vqadd_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vqadd_a1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.unsigned_ = unsigned_;
    ins.U = U;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vqdmlal_vqdmlsl_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int    op = get_bit(opcode,  9);
    int     N = get_bit(opcode,  7);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int n = 0;
    int add = 0;
    int scalar_form = 0;

    if (unlikely((size == 3))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely(((size == 0) || (get_bit(Vd, 0) == 1)))) {
        return UndefinedInstruction("Reason: ((size == 0) || (get_bit(Vd, 0) == 1))");
    }
    add = (op == 0);
    scalar_form = false;
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    esize = (8 << UInt(size));
    elements = (64 / esize);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vqdmlal_vqdmlsl;
    ins.m_to_string = decode_vqdmlal_vqdmlsl_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vqdmlal_vqdmlsl_t1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.n = n;
    ins.add = add;
    ins.scalar_form = scalar_form;
    ins.D = D;
    ins.size = size;
    ins.op = op;

    return ins;
}

ARMInstruction ARMDecoder::decode_vqdmlal_vqdmlsl_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int    op = get_bit(opcode,  9);
    int     N = get_bit(opcode,  7);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int n = 0;
    int add = 0;
    int scalar_form = 0;

    if (unlikely((size == 3))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely(((size == 0) || (get_bit(Vd, 0) == 1)))) {
        return UndefinedInstruction("Reason: ((size == 0) || (get_bit(Vd, 0) == 1))");
    }
    add = (op == 0);
    scalar_form = false;
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    esize = (8 << UInt(size));
    elements = (64 / esize);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vqdmlal_vqdmlsl;
    ins.m_to_string = decode_vqdmlal_vqdmlsl_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vqdmlal_vqdmlsl_a1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.n = n;
    ins.add = add;
    ins.scalar_form = scalar_form;
    ins.D = D;
    ins.size = size;
    ins.op = op;

    return ins;
}

ARMInstruction ARMDecoder::decode_vqdmlal_vqdmlsl_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int    op = get_bit(opcode, 10);
    int     N = get_bit(opcode,  7);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int index = 0;
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int n = 0;
    int add = 0;
    int scalar_form = 0;

    if (unlikely((size == 3))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely(((size == 0) || (get_bit(Vd, 0) == 1)))) {
        return UndefinedInstruction("Reason: ((size == 0) || (get_bit(Vd, 0) == 1))");
    }
    add = (op == 0);
    scalar_form = true;
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    if ((size == 1)) {
        esize = 16;
        elements = 4;
        m = UInt(get_bits(Vm, 2, 0));
        index = UInt(Concatenate(M, get_bit(Vm, 3), 1));
    }
    if ((size == 2)) {
        esize = 32;
        elements = 2;
        m = UInt(Vm);
        index = UInt(M);
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vqdmlal_vqdmlsl;
    ins.m_to_string = decode_vqdmlal_vqdmlsl_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vqdmlal_vqdmlsl_t2";
    ins.encoding = encoding;
    ins.index = index;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.n = n;
    ins.add = add;
    ins.scalar_form = scalar_form;
    ins.D = D;
    ins.size = size;
    ins.op = op;

    return ins;
}

ARMInstruction ARMDecoder::decode_vqdmlal_vqdmlsl_a2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int    op = get_bit(opcode, 10);
    int     N = get_bit(opcode,  7);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int index = 0;
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int n = 0;
    int add = 0;
    int scalar_form = 0;

    if (unlikely((size == 3))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely(((size == 0) || (get_bit(Vd, 0) == 1)))) {
        return UndefinedInstruction("Reason: ((size == 0) || (get_bit(Vd, 0) == 1))");
    }
    add = (op == 0);
    scalar_form = true;
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    if ((size == 1)) {
        esize = 16;
        elements = 4;
        m = UInt(get_bits(Vm, 2, 0));
        index = UInt(Concatenate(M, get_bit(Vm, 3), 1));
    }
    if ((size == 2)) {
        esize = 32;
        elements = 2;
        m = UInt(Vm);
        index = UInt(M);
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vqdmlal_vqdmlsl;
    ins.m_to_string = decode_vqdmlal_vqdmlsl_a2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vqdmlal_vqdmlsl_a2";
    ins.encoding = encoding;
    ins.index = index;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.n = n;
    ins.add = add;
    ins.scalar_form = scalar_form;
    ins.D = D;
    ins.size = size;
    ins.op = op;

    return ins;
}

ARMInstruction ARMDecoder::decode_vqdmulh_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int n = 0;
    int scalar_form = 0;

    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1)))");
    }
    if (unlikely(((size == 0) || (size == 3)))) {
        return UndefinedInstruction("Reason: ((size == 0) || (size == 3))");
    }
    scalar_form = false;
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vqdmulh;
    ins.m_to_string = decode_vqdmulh_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vqdmulh_t1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.scalar_form = scalar_form;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vqdmulh_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int n = 0;
    int scalar_form = 0;

    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1)))");
    }
    if (unlikely(((size == 0) || (size == 3)))) {
        return UndefinedInstruction("Reason: ((size == 0) || (size == 3))");
    }
    scalar_form = false;
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vqdmulh;
    ins.m_to_string = decode_vqdmulh_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vqdmulh_a1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.scalar_form = scalar_form;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vqdmulh_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     Q = get_bit(opcode, 28);
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int index = 0;
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int n = 0;
    int scalar_form = 0;

    if (unlikely((size == 3))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely((size == 0))) {
        return UndefinedInstruction("Reason: (size == 0)");
    }
    if (unlikely(((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)))");
    }
    scalar_form = true;
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    regs = (((Q == 0)) ? 1 : 2);
    if ((size == 1)) {
        esize = 16;
        elements = 4;
        m = UInt(get_bits(Vm, 2, 0));
        index = UInt(Concatenate(M, get_bit(Vm, 3), 1));
    }
    if ((size == 2)) {
        esize = 32;
        elements = 2;
        m = UInt(Vm);
        index = UInt(M);
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vqdmulh;
    ins.m_to_string = decode_vqdmulh_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vqdmulh_t2";
    ins.encoding = encoding;
    ins.index = index;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.scalar_form = scalar_form;
    ins.Q = Q;
    ins.D = D;
    ins.size = size;

    return ins;
}

ARMInstruction ARMDecoder::decode_vqdmulh_a2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     Q = get_bit(opcode, 24);
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int index = 0;
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int n = 0;
    int scalar_form = 0;

    if (unlikely((size == 3))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely((size == 0))) {
        return UndefinedInstruction("Reason: (size == 0)");
    }
    if (unlikely(((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)))");
    }
    scalar_form = true;
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    regs = (((Q == 0)) ? 1 : 2);
    if ((size == 1)) {
        esize = 16;
        elements = 4;
        m = UInt(get_bits(Vm, 2, 0));
        index = UInt(Concatenate(M, get_bit(Vm, 3), 1));
    }
    if ((size == 2)) {
        esize = 32;
        elements = 2;
        m = UInt(Vm);
        index = UInt(M);
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vqdmulh;
    ins.m_to_string = decode_vqdmulh_a2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vqdmulh_a2";
    ins.encoding = encoding;
    ins.index = index;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.scalar_form = scalar_form;
    ins.Q = Q;
    ins.D = D;
    ins.size = size;

    return ins;
}

ARMInstruction ARMDecoder::decode_vqdmull_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int n = 0;
    int scalar_form = 0;

    if (unlikely((size == 3))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely(((size == 0) || (get_bit(Vd, 0) == 1)))) {
        return UndefinedInstruction("Reason: ((size == 0) || (get_bit(Vd, 0) == 1))");
    }
    scalar_form = false;
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    esize = (8 << UInt(size));
    elements = (64 / esize);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vqdmull;
    ins.m_to_string = decode_vqdmull_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vqdmull_t1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.n = n;
    ins.scalar_form = scalar_form;
    ins.D = D;
    ins.size = size;

    return ins;
}

ARMInstruction ARMDecoder::decode_vqdmull_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int n = 0;
    int scalar_form = 0;

    if (unlikely((size == 3))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely(((size == 0) || (get_bit(Vd, 0) == 1)))) {
        return UndefinedInstruction("Reason: ((size == 0) || (get_bit(Vd, 0) == 1))");
    }
    scalar_form = false;
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    esize = (8 << UInt(size));
    elements = (64 / esize);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vqdmull;
    ins.m_to_string = decode_vqdmull_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vqdmull_a1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.n = n;
    ins.scalar_form = scalar_form;
    ins.D = D;
    ins.size = size;

    return ins;
}

ARMInstruction ARMDecoder::decode_vqdmull_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int index = 0;
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int n = 0;
    int scalar_form = 0;

    if (unlikely((size == 3))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely(((size == 0) || (get_bit(Vd, 0) == 1)))) {
        return UndefinedInstruction("Reason: ((size == 0) || (get_bit(Vd, 0) == 1))");
    }
    scalar_form = true;
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    if ((size == 1)) {
        esize = 16;
        elements = 4;
        m = UInt(get_bits(Vm, 2, 0));
        index = UInt(Concatenate(M, get_bit(Vm, 3), 1));
    }
    if ((size == 2)) {
        esize = 32;
        elements = 2;
        m = UInt(Vm);
        index = UInt(M);
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vqdmull;
    ins.m_to_string = decode_vqdmull_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vqdmull_t2";
    ins.encoding = encoding;
    ins.index = index;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.n = n;
    ins.scalar_form = scalar_form;
    ins.D = D;
    ins.size = size;

    return ins;
}

ARMInstruction ARMDecoder::decode_vqdmull_a2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int index = 0;
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int n = 0;
    int scalar_form = 0;

    if (unlikely((size == 3))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely(((size == 0) || (get_bit(Vd, 0) == 1)))) {
        return UndefinedInstruction("Reason: ((size == 0) || (get_bit(Vd, 0) == 1))");
    }
    scalar_form = true;
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    if ((size == 1)) {
        esize = 16;
        elements = 4;
        m = UInt(get_bits(Vm, 2, 0));
        index = UInt(Concatenate(M, get_bit(Vm, 3), 1));
    }
    if ((size == 2)) {
        esize = 32;
        elements = 2;
        m = UInt(Vm);
        index = UInt(M);
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vqdmull;
    ins.m_to_string = decode_vqdmull_a2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vqdmull_a2";
    ins.encoding = encoding;
    ins.index = index;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.n = n;
    ins.scalar_form = scalar_form;
    ins.D = D;
    ins.size = size;

    return ins;
}

ARMInstruction ARMDecoder::decode_vqmovn_vqmovun_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 19, 18);
    int    Vd = get_bits(opcode, 15, 12);
    int    op = get_bits(opcode,  7,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int src_unsigned = 0;
    int dest_unsigned = 0;

    if (unlikely((op == 0))) {
        return SeeInstruction("VMOVN");
    }
    if (unlikely(((size == 3) || (get_bit(Vm, 0) == 1)))) {
        return UndefinedInstruction("Reason: ((size == 3) || (get_bit(Vm, 0) == 1))");
    }
    src_unsigned = (op == 3);
    dest_unsigned = (get_bit(op, 0) == 1);
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vqmovn_vqmovun;
    ins.m_to_string = decode_vqmovn_vqmovun_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vqmovn_vqmovun_t1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.src_unsigned = src_unsigned;
    ins.dest_unsigned = dest_unsigned;
    ins.D = D;
    ins.size = size;
    ins.op = op;

    return ins;
}

ARMInstruction ARMDecoder::decode_vqmovn_vqmovun_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 19, 18);
    int    Vd = get_bits(opcode, 15, 12);
    int    op = get_bits(opcode,  7,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int src_unsigned = 0;
    int dest_unsigned = 0;

    if (unlikely((op == 0))) {
        return SeeInstruction("VMOVN");
    }
    if (unlikely(((size == 3) || (get_bit(Vm, 0) == 1)))) {
        return UndefinedInstruction("Reason: ((size == 3) || (get_bit(Vm, 0) == 1))");
    }
    src_unsigned = (op == 3);
    dest_unsigned = (get_bit(op, 0) == 1);
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vqmovn_vqmovun;
    ins.m_to_string = decode_vqmovn_vqmovun_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vqmovn_vqmovun_a1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.src_unsigned = src_unsigned;
    ins.dest_unsigned = dest_unsigned;
    ins.D = D;
    ins.size = size;
    ins.op = op;

    return ins;
}

ARMInstruction ARMDecoder::decode_vqneg_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 19, 18);
    int    Vd = get_bits(opcode, 15, 12);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int regs = 0;
    int elements = 0;
    int m = 0;
    int d = 0;
    int esize = 0;

    if (unlikely((size == 3))) {
        return UndefinedInstruction("Reason: (size == 3)");
    }
    if (unlikely(((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)))");
    }
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vqneg;
    ins.m_to_string = decode_vqneg_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vqneg_t1";
    ins.encoding = encoding;
    ins.regs = regs;
    ins.elements = elements;
    ins.m = m;
    ins.d = d;
    ins.esize = esize;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vqneg_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 19, 18);
    int    Vd = get_bits(opcode, 15, 12);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int regs = 0;
    int elements = 0;
    int m = 0;
    int d = 0;
    int esize = 0;

    if (unlikely((size == 3))) {
        return UndefinedInstruction("Reason: (size == 3)");
    }
    if (unlikely(((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)))");
    }
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vqneg;
    ins.m_to_string = decode_vqneg_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vqneg_a1";
    ins.encoding = encoding;
    ins.regs = regs;
    ins.elements = elements;
    ins.m = m;
    ins.d = d;
    ins.esize = esize;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vqrdmulh_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int n = 0;
    int scalar_form = 0;

    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1)))");
    }
    if (unlikely(((size == 0) || (size == 3)))) {
        return UndefinedInstruction("Reason: ((size == 0) || (size == 3))");
    }
    scalar_form = false;
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vqrdmulh;
    ins.m_to_string = decode_vqrdmulh_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vqrdmulh_t1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.scalar_form = scalar_form;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vqrdmulh_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int n = 0;
    int scalar_form = 0;

    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1)))");
    }
    if (unlikely(((size == 0) || (size == 3)))) {
        return UndefinedInstruction("Reason: ((size == 0) || (size == 3))");
    }
    scalar_form = false;
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vqrdmulh;
    ins.m_to_string = decode_vqrdmulh_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vqrdmulh_a1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.scalar_form = scalar_form;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vqrdmulh_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     Q = get_bit(opcode, 28);
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int index = 0;
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int n = 0;
    int scalar_form = 0;

    if (unlikely((size == 3))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely((size == 0))) {
        return UndefinedInstruction("Reason: (size == 0)");
    }
    if (unlikely(((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)))");
    }
    scalar_form = true;
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    regs = (((Q == 0)) ? 1 : 2);
    if ((size == 1)) {
        esize = 16;
        elements = 4;
        m = UInt(get_bits(Vm, 2, 0));
        index = UInt(Concatenate(M, get_bit(Vm, 3), 1));
    }
    if ((size == 2)) {
        esize = 32;
        elements = 2;
        m = UInt(Vm);
        index = UInt(M);
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vqrdmulh;
    ins.m_to_string = decode_vqrdmulh_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vqrdmulh_t2";
    ins.encoding = encoding;
    ins.index = index;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.scalar_form = scalar_form;
    ins.Q = Q;
    ins.D = D;
    ins.size = size;

    return ins;
}

ARMInstruction ARMDecoder::decode_vqrdmulh_a2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     Q = get_bit(opcode, 24);
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int index = 0;
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int n = 0;
    int scalar_form = 0;

    if (unlikely((size == 3))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely((size == 0))) {
        return UndefinedInstruction("Reason: (size == 0)");
    }
    if (unlikely(((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)))");
    }
    scalar_form = true;
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    regs = (((Q == 0)) ? 1 : 2);
    if ((size == 1)) {
        esize = 16;
        elements = 4;
        m = UInt(get_bits(Vm, 2, 0));
        index = UInt(Concatenate(M, get_bit(Vm, 3), 1));
    }
    if ((size == 2)) {
        esize = 32;
        elements = 2;
        m = UInt(Vm);
        index = UInt(M);
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vqrdmulh;
    ins.m_to_string = decode_vqrdmulh_a2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vqrdmulh_a2";
    ins.encoding = encoding;
    ins.index = index;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.scalar_form = scalar_form;
    ins.Q = Q;
    ins.D = D;
    ins.size = size;

    return ins;
}

ARMInstruction ARMDecoder::decode_vqrshl_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 28);
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int n = 0;
    int unsigned_ = 0;

    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)) || (get_bit(Vn, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)) || (get_bit(Vn, 0) == 1)))");
    }
    unsigned_ = (U == 1);
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    n = UInt(Concatenate(N, Vn, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vqrshl;
    ins.m_to_string = decode_vqrshl_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vqrshl_t1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.unsigned_ = unsigned_;
    ins.U = U;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vqrshl_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 24);
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int n = 0;
    int unsigned_ = 0;

    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)) || (get_bit(Vn, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)) || (get_bit(Vn, 0) == 1)))");
    }
    unsigned_ = (U == 1);
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    n = UInt(Concatenate(N, Vn, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vqrshl;
    ins.m_to_string = decode_vqrshl_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vqrshl_a1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.unsigned_ = unsigned_;
    ins.U = U;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vqrshrn_vqrshrun_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 28);
    int     D = get_bit(opcode, 22);
    int  imm6 = get_bits(opcode, 21, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int    op = get_bit(opcode,  8);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int imm32 = 0;
    int src_unsigned = 0;
    int shift_amount = 0;
    int dest_unsigned = 0;

    if (unlikely((imm6 >= 0 && imm6 <= 7))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely(((U == 0) && (op == 0)))) {
        return SeeInstruction("VRSHRN");
    }
    if (unlikely((get_bit(Vm, 0) == 1))) {
        return UndefinedInstruction("Reason: (get_bit(Vm, 0) == 1)");
    }
    switch (imm6) {
        // Values of 001xxx
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
            esize = 8;
            elements = 8;
            shift_amount = (16 - UInt(imm6));
            break;
        
        // Values of 01xxxx
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
            esize = 16;
            elements = 4;
            shift_amount = (32 - UInt(imm6));
            break;
        
        // Values of 1xxxxx
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 63:
            esize = 32;
            elements = 2;
            shift_amount = (64 - UInt(imm6));
            break;
        
    }
    
    imm32 = imm6;
    src_unsigned = ((U == 1) && (op == 1));
    dest_unsigned = (U == 1);
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vqrshrn_vqrshrun;
    ins.m_to_string = decode_vqrshrn_vqrshrun_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vqrshrn_vqrshrun_t1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.imm32 = imm32;
    ins.src_unsigned = src_unsigned;
    ins.shift_amount = shift_amount;
    ins.dest_unsigned = dest_unsigned;
    ins.U = U;
    ins.D = D;
    ins.op = op;

    return ins;
}

ARMInstruction ARMDecoder::decode_vqrshrn_vqrshrun_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 24);
    int     D = get_bit(opcode, 22);
    int  imm6 = get_bits(opcode, 21, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int    op = get_bit(opcode,  8);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int imm32 = 0;
    int src_unsigned = 0;
    int shift_amount = 0;
    int dest_unsigned = 0;

    if (unlikely((imm6 >= 0 && imm6 <= 7))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely(((U == 0) && (op == 0)))) {
        return SeeInstruction("VRSHRN");
    }
    if (unlikely((get_bit(Vm, 0) == 1))) {
        return UndefinedInstruction("Reason: (get_bit(Vm, 0) == 1)");
    }
    switch (imm6) {
        // Values of 001xxx
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
            esize = 8;
            elements = 8;
            shift_amount = (16 - UInt(imm6));
            break;
        
        // Values of 01xxxx
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
            esize = 16;
            elements = 4;
            shift_amount = (32 - UInt(imm6));
            break;
        
        // Values of 1xxxxx
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 63:
            esize = 32;
            elements = 2;
            shift_amount = (64 - UInt(imm6));
            break;
        
    }
    
    imm32 = imm6;
    src_unsigned = ((U == 1) && (op == 1));
    dest_unsigned = (U == 1);
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vqrshrn_vqrshrun;
    ins.m_to_string = decode_vqrshrn_vqrshrun_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vqrshrn_vqrshrun_a1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.imm32 = imm32;
    ins.src_unsigned = src_unsigned;
    ins.shift_amount = shift_amount;
    ins.dest_unsigned = dest_unsigned;
    ins.U = U;
    ins.D = D;
    ins.op = op;

    return ins;
}

ARMInstruction ARMDecoder::decode_vqshl_register_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 28);
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int n = 0;
    int unsigned_ = 0;

    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)) || (get_bit(Vn, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)) || (get_bit(Vn, 0) == 1)))");
    }
    unsigned_ = (U == 1);
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    n = UInt(Concatenate(N, Vn, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vqshl_register;
    ins.m_to_string = decode_vqshl_register_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vqshl_register_t1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.unsigned_ = unsigned_;
    ins.U = U;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vqshl_register_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 24);
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int n = 0;
    int unsigned_ = 0;

    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)) || (get_bit(Vn, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)) || (get_bit(Vn, 0) == 1)))");
    }
    unsigned_ = (U == 1);
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    n = UInt(Concatenate(N, Vn, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vqshl_register;
    ins.m_to_string = decode_vqshl_register_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vqshl_register_a1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.unsigned_ = unsigned_;
    ins.U = U;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vqshl_vqshlu_immediate_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 28);
    int     D = get_bit(opcode, 22);
    int  imm6 = get_bits(opcode, 21, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int    op = get_bit(opcode,  8);
    int     L = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int src_unsigned = 0;
    int shift_amount = 0;
    int dest_unsigned = 0;

    if (unlikely((Concatenate(L, imm6, 6) >= 0 && Concatenate(L, imm6, 6) <= 7))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely(((U == 0) && (op == 0)))) {
        return UndefinedInstruction("Reason: ((U == 0) && (op == 0))");
    }
    if (unlikely(((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)))");
    }
    switch (Concatenate(L, imm6, 6)) {
        // Values of 0001xxx
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
            esize = 8;
            elements = 8;
            shift_amount = (UInt(imm6) - 8);
            break;
        
        // Values of 001xxxx
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
            esize = 16;
            elements = 4;
            shift_amount = (UInt(imm6) - 16);
            break;
        
        // Values of 01xxxxx
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 63:
            esize = 32;
            elements = 2;
            shift_amount = (UInt(imm6) - 32);
            break;
        
        // Values of 1xxxxxx
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
            esize = 64;
            elements = 1;
            shift_amount = UInt(imm6);
            break;
        
    }
    
    src_unsigned = ((U == 1) && (op == 1));
    dest_unsigned = (U == 1);
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vqshl_vqshlu_immediate;
    ins.m_to_string = decode_vqshl_vqshlu_immediate_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vqshl_vqshlu_immediate_t1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.src_unsigned = src_unsigned;
    ins.shift_amount = shift_amount;
    ins.dest_unsigned = dest_unsigned;
    ins.U = U;
    ins.D = D;
    ins.op = op;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vqshl_vqshlu_immediate_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 24);
    int     D = get_bit(opcode, 22);
    int  imm6 = get_bits(opcode, 21, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int    op = get_bit(opcode,  8);
    int     L = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int src_unsigned = 0;
    int shift_amount = 0;
    int dest_unsigned = 0;

    if (unlikely((Concatenate(L, imm6, 6) >= 0 && Concatenate(L, imm6, 6) <= 7))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely(((U == 0) && (op == 0)))) {
        return UndefinedInstruction("Reason: ((U == 0) && (op == 0))");
    }
    if (unlikely(((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)))");
    }
    switch (Concatenate(L, imm6, 6)) {
        // Values of 0001xxx
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
            esize = 8;
            elements = 8;
            shift_amount = (UInt(imm6) - 8);
            break;
        
        // Values of 001xxxx
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
            esize = 16;
            elements = 4;
            shift_amount = (UInt(imm6) - 16);
            break;
        
        // Values of 01xxxxx
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 63:
            esize = 32;
            elements = 2;
            shift_amount = (UInt(imm6) - 32);
            break;
        
        // Values of 1xxxxxx
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
            esize = 64;
            elements = 1;
            shift_amount = UInt(imm6);
            break;
        
    }
    
    src_unsigned = ((U == 1) && (op == 1));
    dest_unsigned = (U == 1);
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vqshl_vqshlu_immediate;
    ins.m_to_string = decode_vqshl_vqshlu_immediate_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vqshl_vqshlu_immediate_a1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.src_unsigned = src_unsigned;
    ins.shift_amount = shift_amount;
    ins.dest_unsigned = dest_unsigned;
    ins.U = U;
    ins.D = D;
    ins.op = op;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vqshrn_vqshrun_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 28);
    int     D = get_bit(opcode, 22);
    int  imm6 = get_bits(opcode, 21, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int    op = get_bit(opcode,  8);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int src_unsigned = 0;
    int shift_amount = 0;
    int dest_unsigned = 0;

    if (unlikely((imm6 >= 0 && imm6 <= 7))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely(((U == 0) && (op == 0)))) {
        return SeeInstruction("VSHRN");
    }
    if (unlikely((get_bit(Vm, 0) == 1))) {
        return UndefinedInstruction("Reason: (get_bit(Vm, 0) == 1)");
    }
    switch (imm6) {
        // Values of 001xxx
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
            esize = 8;
            elements = 8;
            shift_amount = (16 - UInt(imm6));
            break;
        
        // Values of 01xxxx
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
            esize = 16;
            elements = 4;
            shift_amount = (32 - UInt(imm6));
            break;
        
        // Values of 1xxxxx
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 63:
            esize = 32;
            elements = 2;
            shift_amount = (64 - UInt(imm6));
            break;
        
    }
    
    src_unsigned = ((U == 1) && (op == 1));
    dest_unsigned = (U == 1);
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vqshrn_vqshrun;
    ins.m_to_string = decode_vqshrn_vqshrun_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vqshrn_vqshrun_t1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.src_unsigned = src_unsigned;
    ins.shift_amount = shift_amount;
    ins.dest_unsigned = dest_unsigned;
    ins.U = U;
    ins.D = D;
    ins.op = op;

    return ins;
}

ARMInstruction ARMDecoder::decode_vqshrn_vqshrun_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 24);
    int     D = get_bit(opcode, 22);
    int  imm6 = get_bits(opcode, 21, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int    op = get_bit(opcode,  8);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int src_unsigned = 0;
    int shift_amount = 0;
    int dest_unsigned = 0;

    if (unlikely((imm6 >= 0 && imm6 <= 7))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely(((U == 0) && (op == 0)))) {
        return SeeInstruction("VSHRN");
    }
    if (unlikely((get_bit(Vm, 0) == 1))) {
        return UndefinedInstruction("Reason: (get_bit(Vm, 0) == 1)");
    }
    switch (imm6) {
        // Values of 001xxx
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
            esize = 8;
            elements = 8;
            shift_amount = (16 - UInt(imm6));
            break;
        
        // Values of 01xxxx
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
            esize = 16;
            elements = 4;
            shift_amount = (32 - UInt(imm6));
            break;
        
        // Values of 1xxxxx
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 63:
            esize = 32;
            elements = 2;
            shift_amount = (64 - UInt(imm6));
            break;
        
    }
    
    src_unsigned = ((U == 1) && (op == 1));
    dest_unsigned = (U == 1);
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vqshrn_vqshrun;
    ins.m_to_string = decode_vqshrn_vqshrun_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vqshrn_vqshrun_a1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.src_unsigned = src_unsigned;
    ins.shift_amount = shift_amount;
    ins.dest_unsigned = dest_unsigned;
    ins.U = U;
    ins.D = D;
    ins.op = op;

    return ins;
}

ARMInstruction ARMDecoder::decode_vqsub_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 28);
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int n = 0;
    int unsigned_ = 0;

    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1)))");
    }
    unsigned_ = (U == 1);
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vqsub;
    ins.m_to_string = decode_vqsub_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vqsub_t1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.unsigned_ = unsigned_;
    ins.U = U;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vqsub_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 24);
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int n = 0;
    int unsigned_ = 0;

    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1)))");
    }
    unsigned_ = (U == 1);
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vqsub;
    ins.m_to_string = decode_vqsub_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vqsub_a1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.unsigned_ = unsigned_;
    ins.U = U;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vraddhn_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int n = 0;
    int elements = 0;
    int m = 0;
    int d = 0;
    int esize = 0;

    if (unlikely((size == 3))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely(((get_bit(Vn, 0) == 1) || (get_bit(Vm, 0) == 1)))) {
        return UndefinedInstruction("Reason: ((get_bit(Vn, 0) == 1) || (get_bit(Vm, 0) == 1))");
    }
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vraddhn;
    ins.m_to_string = decode_vraddhn_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vraddhn_t1";
    ins.encoding = encoding;
    ins.n = n;
    ins.elements = elements;
    ins.m = m;
    ins.d = d;
    ins.esize = esize;
    ins.D = D;
    ins.size = size;

    return ins;
}

ARMInstruction ARMDecoder::decode_vraddhn_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int n = 0;
    int elements = 0;
    int m = 0;
    int d = 0;
    int esize = 0;

    if (unlikely((size == 3))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely(((get_bit(Vn, 0) == 1) || (get_bit(Vm, 0) == 1)))) {
        return UndefinedInstruction("Reason: ((get_bit(Vn, 0) == 1) || (get_bit(Vm, 0) == 1))");
    }
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vraddhn;
    ins.m_to_string = decode_vraddhn_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vraddhn_a1";
    ins.encoding = encoding;
    ins.n = n;
    ins.elements = elements;
    ins.m = m;
    ins.d = d;
    ins.esize = esize;
    ins.D = D;
    ins.size = size;

    return ins;
}

ARMInstruction ARMDecoder::decode_vrecpe_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 19, 18);
    int    Vd = get_bits(opcode, 15, 12);
    int     F = get_bit(opcode,  8);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int floating_point = 0;

    if (unlikely(((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)))");
    }
    if (unlikely((size != 2))) {
        return UndefinedInstruction("Reason: (size != 2)");
    }
    floating_point = (F == 1);
    esize = 32;
    elements = 2;
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vrecpe;
    ins.m_to_string = decode_vrecpe_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vrecpe_t1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.floating_point = floating_point;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vrecpe_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 19, 18);
    int    Vd = get_bits(opcode, 15, 12);
    int     F = get_bit(opcode,  8);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int floating_point = 0;

    if (unlikely(((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)))");
    }
    if (unlikely((size != 2))) {
        return UndefinedInstruction("Reason: (size != 2)");
    }
    floating_point = (F == 1);
    esize = 32;
    elements = 2;
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vrecpe;
    ins.m_to_string = decode_vrecpe_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vrecpe_a1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.floating_point = floating_point;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vrecps_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    sz = get_bit(opcode, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int n = 0;

    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1)))");
    }
    if (unlikely((sz == 1))) {
        return UndefinedInstruction("Reason: (sz == 1)");
    }
    esize = 32;
    elements = 2;
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vrecps;
    ins.m_to_string = decode_vrecps_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vrecps_t1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.D = D;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vrecps_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    sz = get_bit(opcode, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int n = 0;

    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1)))");
    }
    if (unlikely((sz == 1))) {
        return UndefinedInstruction("Reason: (sz == 1)");
    }
    esize = 32;
    elements = 2;
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vrecps;
    ins.m_to_string = decode_vrecps_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vrecps_a1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.D = D;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vrev16_vrev32_vrev64_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 19, 18);
    int    Vd = get_bits(opcode, 15, 12);
    int    op = get_bits(opcode,  8,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int groupsize_minus_one = 0;
    int m = 0;
    int regs = 0;
    int esize_minus_one = 0;
    int reverse_mask = 0;
    int groupsize = 0;

    if (unlikely(((UInt(op) + UInt(size)) >= 3))) {
        return UndefinedInstruction("Reason: ((UInt(op) + UInt(size)) >= 3)");
    }
    if (unlikely(((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)))");
    }
    esize = (8 << UInt(size));
    elements = (64 / esize);
    groupsize = (1 << ((3 - UInt(op)) - UInt(size)));
    groupsize_minus_one = (groupsize - 1);
    esize_minus_one = (esize - 1);
    reverse_mask = get_bits(groupsize_minus_one, esize_minus_one, 0);
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vrev16_vrev32_vrev64;
    ins.m_to_string = decode_vrev16_vrev32_vrev64_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vrev16_vrev32_vrev64_t1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.groupsize_minus_one = groupsize_minus_one;
    ins.m = m;
    ins.regs = regs;
    ins.esize_minus_one = esize_minus_one;
    ins.reverse_mask = reverse_mask;
    ins.groupsize = groupsize;
    ins.D = D;
    ins.size = size;
    ins.op = op;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vrev16_vrev32_vrev64_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 19, 18);
    int    Vd = get_bits(opcode, 15, 12);
    int    op = get_bits(opcode,  8,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int groupsize_minus_one = 0;
    int m = 0;
    int regs = 0;
    int esize_minus_one = 0;
    int reverse_mask = 0;
    int groupsize = 0;

    if (unlikely(((UInt(op) + UInt(size)) >= 3))) {
        return UndefinedInstruction("Reason: ((UInt(op) + UInt(size)) >= 3)");
    }
    if (unlikely(((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)))");
    }
    esize = (8 << UInt(size));
    elements = (64 / esize);
    groupsize = (1 << ((3 - UInt(op)) - UInt(size)));
    groupsize_minus_one = (groupsize - 1);
    esize_minus_one = (esize - 1);
    reverse_mask = get_bits(groupsize_minus_one, esize_minus_one, 0);
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vrev16_vrev32_vrev64;
    ins.m_to_string = decode_vrev16_vrev32_vrev64_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vrev16_vrev32_vrev64_a1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.groupsize_minus_one = groupsize_minus_one;
    ins.m = m;
    ins.regs = regs;
    ins.esize_minus_one = esize_minus_one;
    ins.reverse_mask = reverse_mask;
    ins.groupsize = groupsize;
    ins.D = D;
    ins.size = size;
    ins.op = op;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vrhadd_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 28);
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int n = 0;
    int unsigned_ = 0;

    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1)))");
    }
    if (unlikely((size == 3))) {
        return UndefinedInstruction("Reason: (size == 3)");
    }
    unsigned_ = (U == 1);
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vrhadd;
    ins.m_to_string = decode_vrhadd_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vrhadd_t1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.unsigned_ = unsigned_;
    ins.U = U;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vrhadd_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 24);
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int n = 0;
    int unsigned_ = 0;

    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1)))");
    }
    if (unlikely((size == 3))) {
        return UndefinedInstruction("Reason: (size == 3)");
    }
    unsigned_ = (U == 1);
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vrhadd;
    ins.m_to_string = decode_vrhadd_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vrhadd_a1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.unsigned_ = unsigned_;
    ins.U = U;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vrshl_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 28);
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int n = 0;
    int unsigned_ = 0;

    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)) || (get_bit(Vn, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)) || (get_bit(Vn, 0) == 1)))");
    }
    unsigned_ = (U == 1);
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    n = UInt(Concatenate(N, Vn, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vrshl;
    ins.m_to_string = decode_vrshl_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vrshl_t1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.unsigned_ = unsigned_;
    ins.U = U;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vrshl_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 24);
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int n = 0;
    int unsigned_ = 0;

    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)) || (get_bit(Vn, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)) || (get_bit(Vn, 0) == 1)))");
    }
    unsigned_ = (U == 1);
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    n = UInt(Concatenate(N, Vn, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vrshl;
    ins.m_to_string = decode_vrshl_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vrshl_a1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.unsigned_ = unsigned_;
    ins.U = U;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vrshr_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 28);
    int     D = get_bit(opcode, 22);
    int  imm6 = get_bits(opcode, 21, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     L = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int shift_amount = 0;
    int unsigned_ = 0;

    if (unlikely((Concatenate(L, imm6, 6) >= 0 && Concatenate(L, imm6, 6) <= 7))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely(((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)))");
    }
    switch (Concatenate(L, imm6, 6)) {
        // Values of 0001xxx
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
            esize = 8;
            elements = 8;
            shift_amount = (16 - UInt(imm6));
            break;
        
        // Values of 001xxxx
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
            esize = 16;
            elements = 4;
            shift_amount = (32 - UInt(imm6));
            break;
        
        // Values of 01xxxxx
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 63:
            esize = 32;
            elements = 2;
            shift_amount = (64 - UInt(imm6));
            break;
        
        // Values of 1xxxxxx
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
            esize = 64;
            elements = 1;
            shift_amount = (64 - UInt(imm6));
            break;
        
    }
    
    unsigned_ = (U == 1);
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vrshr;
    ins.m_to_string = decode_vrshr_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vrshr_t1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.shift_amount = shift_amount;
    ins.unsigned_ = unsigned_;
    ins.U = U;
    ins.D = D;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vrshr_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 24);
    int     D = get_bit(opcode, 22);
    int  imm6 = get_bits(opcode, 21, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     L = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int shift_amount = 0;
    int unsigned_ = 0;

    if (unlikely((Concatenate(L, imm6, 6) >= 0 && Concatenate(L, imm6, 6) <= 7))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely(((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)))");
    }
    switch (Concatenate(L, imm6, 6)) {
        // Values of 0001xxx
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
            esize = 8;
            elements = 8;
            shift_amount = (16 - UInt(imm6));
            break;
        
        // Values of 001xxxx
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
            esize = 16;
            elements = 4;
            shift_amount = (32 - UInt(imm6));
            break;
        
        // Values of 01xxxxx
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 63:
            esize = 32;
            elements = 2;
            shift_amount = (64 - UInt(imm6));
            break;
        
        // Values of 1xxxxxx
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
            esize = 64;
            elements = 1;
            shift_amount = (64 - UInt(imm6));
            break;
        
    }
    
    unsigned_ = (U == 1);
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vrshr;
    ins.m_to_string = decode_vrshr_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vrshr_a1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.shift_amount = shift_amount;
    ins.unsigned_ = unsigned_;
    ins.U = U;
    ins.D = D;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vrshrn_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  imm6 = get_bits(opcode, 21, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int shift_amount = 0;
    int elements = 0;
    int m = 0;
    int d = 0;
    int esize = 0;

    if (unlikely((imm6 >= 0 && imm6 <= 7))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely((get_bit(Vm, 0) == 1))) {
        return UndefinedInstruction("Reason: (get_bit(Vm, 0) == 1)");
    }
    switch (imm6) {
        // Values of 001xxx
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
            esize = 8;
            elements = 8;
            shift_amount = (16 - UInt(imm6));
            break;
        
        // Values of 01xxxx
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
            esize = 16;
            elements = 4;
            shift_amount = (32 - UInt(imm6));
            break;
        
        // Values of 1xxxxx
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 63:
            esize = 32;
            elements = 2;
            shift_amount = (64 - UInt(imm6));
            break;
        
    }
    
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vrshrn;
    ins.m_to_string = decode_vrshrn_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vrshrn_t1";
    ins.encoding = encoding;
    ins.shift_amount = shift_amount;
    ins.elements = elements;
    ins.m = m;
    ins.d = d;
    ins.esize = esize;
    ins.D = D;

    return ins;
}

ARMInstruction ARMDecoder::decode_vrshrn_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  imm6 = get_bits(opcode, 21, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int shift_amount = 0;
    int elements = 0;
    int m = 0;
    int d = 0;
    int esize = 0;

    if (unlikely((imm6 >= 0 && imm6 <= 7))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely((get_bit(Vm, 0) == 1))) {
        return UndefinedInstruction("Reason: (get_bit(Vm, 0) == 1)");
    }
    switch (imm6) {
        // Values of 001xxx
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
            esize = 8;
            elements = 8;
            shift_amount = (16 - UInt(imm6));
            break;
        
        // Values of 01xxxx
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
            esize = 16;
            elements = 4;
            shift_amount = (32 - UInt(imm6));
            break;
        
        // Values of 1xxxxx
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 63:
            esize = 32;
            elements = 2;
            shift_amount = (64 - UInt(imm6));
            break;
        
    }
    
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vrshrn;
    ins.m_to_string = decode_vrshrn_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vrshrn_a1";
    ins.encoding = encoding;
    ins.shift_amount = shift_amount;
    ins.elements = elements;
    ins.m = m;
    ins.d = d;
    ins.esize = esize;
    ins.D = D;

    return ins;
}

ARMInstruction ARMDecoder::decode_vrsqrte_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 19, 18);
    int    Vd = get_bits(opcode, 15, 12);
    int     F = get_bit(opcode,  8);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int floating_point = 0;

    if (unlikely(((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)))");
    }
    if (unlikely((size != 2))) {
        return UndefinedInstruction("Reason: (size != 2)");
    }
    floating_point = (F == 1);
    esize = 32;
    elements = 2;
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vrsqrte;
    ins.m_to_string = decode_vrsqrte_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vrsqrte_t1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.floating_point = floating_point;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vrsqrte_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 19, 18);
    int    Vd = get_bits(opcode, 15, 12);
    int     F = get_bit(opcode,  8);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int floating_point = 0;

    if (unlikely(((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)))");
    }
    if (unlikely((size != 2))) {
        return UndefinedInstruction("Reason: (size != 2)");
    }
    floating_point = (F == 1);
    esize = 32;
    elements = 2;
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vrsqrte;
    ins.m_to_string = decode_vrsqrte_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vrsqrte_a1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.floating_point = floating_point;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vrsqrts_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    sz = get_bit(opcode, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int n = 0;

    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1)))");
    }
    if (unlikely((sz == 1))) {
        return UndefinedInstruction("Reason: (sz == 1)");
    }
    esize = 32;
    elements = 2;
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vrsqrts;
    ins.m_to_string = decode_vrsqrts_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vrsqrts_t1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.D = D;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vrsqrts_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    sz = get_bit(opcode, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int n = 0;

    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1)))");
    }
    if (unlikely((sz == 1))) {
        return UndefinedInstruction("Reason: (sz == 1)");
    }
    esize = 32;
    elements = 2;
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vrsqrts;
    ins.m_to_string = decode_vrsqrts_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vrsqrts_a1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.D = D;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vrsra_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 28);
    int     D = get_bit(opcode, 22);
    int  imm6 = get_bits(opcode, 21, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     L = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int shift_amount = 0;
    int unsigned_ = 0;

    if (unlikely((Concatenate(L, imm6, 6) >= 0 && Concatenate(L, imm6, 6) <= 7))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely(((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)))");
    }
    switch (Concatenate(L, imm6, 6)) {
        // Values of 0001xxx
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
            esize = 8;
            elements = 8;
            shift_amount = (16 - UInt(imm6));
            break;
        
        // Values of 001xxxx
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
            esize = 16;
            elements = 4;
            shift_amount = (32 - UInt(imm6));
            break;
        
        // Values of 01xxxxx
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 63:
            esize = 32;
            elements = 2;
            shift_amount = (64 - UInt(imm6));
            break;
        
        // Values of 1xxxxxx
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
            esize = 64;
            elements = 1;
            shift_amount = (64 - UInt(imm6));
            break;
        
    }
    
    unsigned_ = (U == 1);
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vrsra;
    ins.m_to_string = decode_vrsra_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vrsra_t1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.shift_amount = shift_amount;
    ins.unsigned_ = unsigned_;
    ins.U = U;
    ins.D = D;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vrsra_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 24);
    int     D = get_bit(opcode, 22);
    int  imm6 = get_bits(opcode, 21, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     L = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int shift_amount = 0;
    int unsigned_ = 0;

    if (unlikely((Concatenate(L, imm6, 6) >= 0 && Concatenate(L, imm6, 6) <= 7))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely(((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)))");
    }
    switch (Concatenate(L, imm6, 6)) {
        // Values of 0001xxx
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
            esize = 8;
            elements = 8;
            shift_amount = (16 - UInt(imm6));
            break;
        
        // Values of 001xxxx
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
            esize = 16;
            elements = 4;
            shift_amount = (32 - UInt(imm6));
            break;
        
        // Values of 01xxxxx
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 63:
            esize = 32;
            elements = 2;
            shift_amount = (64 - UInt(imm6));
            break;
        
        // Values of 1xxxxxx
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
            esize = 64;
            elements = 1;
            shift_amount = (64 - UInt(imm6));
            break;
        
    }
    
    unsigned_ = (U == 1);
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vrsra;
    ins.m_to_string = decode_vrsra_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vrsra_a1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.shift_amount = shift_amount;
    ins.unsigned_ = unsigned_;
    ins.U = U;
    ins.D = D;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vrsubhn_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int n = 0;
    int elements = 0;
    int m = 0;
    int d = 0;
    int esize = 0;

    if (unlikely((size == 3))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely(((get_bit(Vn, 0) == 1) || (get_bit(Vm, 0) == 1)))) {
        return UndefinedInstruction("Reason: ((get_bit(Vn, 0) == 1) || (get_bit(Vm, 0) == 1))");
    }
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vrsubhn;
    ins.m_to_string = decode_vrsubhn_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vrsubhn_t1";
    ins.encoding = encoding;
    ins.n = n;
    ins.elements = elements;
    ins.m = m;
    ins.d = d;
    ins.esize = esize;
    ins.D = D;
    ins.size = size;

    return ins;
}

ARMInstruction ARMDecoder::decode_vrsubhn_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int n = 0;
    int elements = 0;
    int m = 0;
    int d = 0;
    int esize = 0;

    if (unlikely((size == 3))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely(((get_bit(Vn, 0) == 1) || (get_bit(Vm, 0) == 1)))) {
        return UndefinedInstruction("Reason: ((get_bit(Vn, 0) == 1) || (get_bit(Vm, 0) == 1))");
    }
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vrsubhn;
    ins.m_to_string = decode_vrsubhn_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vrsubhn_a1";
    ins.encoding = encoding;
    ins.n = n;
    ins.elements = elements;
    ins.m = m;
    ins.d = d;
    ins.esize = esize;
    ins.D = D;
    ins.size = size;

    return ins;
}

ARMInstruction ARMDecoder::decode_vshl_immediate_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  imm6 = get_bits(opcode, 21, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     L = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int shift_amount = 0;

    if (unlikely((Concatenate(L, imm6, 6) >= 0 && Concatenate(L, imm6, 6) <= 7))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely(((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)))");
    }
    switch (Concatenate(L, imm6, 6)) {
        // Values of 0001xxx
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
            esize = 8;
            elements = 8;
            shift_amount = (UInt(imm6) - 8);
            break;
        
        // Values of 001xxxx
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
            esize = 16;
            elements = 4;
            shift_amount = (UInt(imm6) - 16);
            break;
        
        // Values of 01xxxxx
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 63:
            esize = 32;
            elements = 2;
            shift_amount = (UInt(imm6) - 32);
            break;
        
        // Values of 1xxxxxx
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
            esize = 64;
            elements = 1;
            shift_amount = UInt(imm6);
            break;
        
    }
    
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vshl_immediate;
    ins.m_to_string = decode_vshl_immediate_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vshl_immediate_t1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.shift_amount = shift_amount;
    ins.D = D;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vshl_immediate_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  imm6 = get_bits(opcode, 21, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     L = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int shift_amount = 0;

    if (unlikely((Concatenate(L, imm6, 6) >= 0 && Concatenate(L, imm6, 6) <= 7))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely(((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)))");
    }
    switch (Concatenate(L, imm6, 6)) {
        // Values of 0001xxx
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
            esize = 8;
            elements = 8;
            shift_amount = (UInt(imm6) - 8);
            break;
        
        // Values of 001xxxx
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
            esize = 16;
            elements = 4;
            shift_amount = (UInt(imm6) - 16);
            break;
        
        // Values of 01xxxxx
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 63:
            esize = 32;
            elements = 2;
            shift_amount = (UInt(imm6) - 32);
            break;
        
        // Values of 1xxxxxx
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
            esize = 64;
            elements = 1;
            shift_amount = UInt(imm6);
            break;
        
    }
    
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vshl_immediate;
    ins.m_to_string = decode_vshl_immediate_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vshl_immediate_a1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.shift_amount = shift_amount;
    ins.D = D;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vshl_register_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 28);
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int n = 0;
    int unsigned_ = 0;

    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)) || (get_bit(Vn, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)) || (get_bit(Vn, 0) == 1)))");
    }
    unsigned_ = (U == 1);
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    n = UInt(Concatenate(N, Vn, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vshl_register;
    ins.m_to_string = decode_vshl_register_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vshl_register_t1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.unsigned_ = unsigned_;
    ins.U = U;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vshl_register_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 24);
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int n = 0;
    int unsigned_ = 0;

    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)) || (get_bit(Vn, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)) || (get_bit(Vn, 0) == 1)))");
    }
    unsigned_ = (U == 1);
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    n = UInt(Concatenate(N, Vn, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vshl_register;
    ins.m_to_string = decode_vshl_register_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vshl_register_a1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.unsigned_ = unsigned_;
    ins.U = U;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vshll_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 28);
    int     D = get_bit(opcode, 22);
    int  imm6 = get_bits(opcode, 21, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int shift_amount = 0;
    int unsigned_ = 0;

    if (unlikely((imm6 >= 0 && imm6 <= 7))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely((get_bit(Vd, 0) == 1))) {
        return UndefinedInstruction("Reason: (get_bit(Vd, 0) == 1)");
    }
    switch (imm6) {
        // Values of 001xxx
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
            esize = 8;
            elements = 8;
            shift_amount = (UInt(imm6) - 8);
            break;
        
        // Values of 01xxxx
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
            esize = 16;
            elements = 4;
            shift_amount = (UInt(imm6) - 16);
            break;
        
        // Values of 1xxxxx
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 63:
            esize = 32;
            elements = 2;
            shift_amount = (UInt(imm6) - 32);
            break;
        
    }
    
    if (unlikely((shift_amount == 0))) {
        return SeeInstruction("VMOVL");
    }
    unsigned_ = (U == 1);
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vshll;
    ins.m_to_string = decode_vshll_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vshll_t1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.shift_amount = shift_amount;
    ins.unsigned_ = unsigned_;
    ins.U = U;
    ins.D = D;

    return ins;
}

ARMInstruction ARMDecoder::decode_vshll_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 24);
    int     D = get_bit(opcode, 22);
    int  imm6 = get_bits(opcode, 21, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int shift_amount = 0;
    int unsigned_ = 0;

    if (unlikely((imm6 >= 0 && imm6 <= 7))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely((get_bit(Vd, 0) == 1))) {
        return UndefinedInstruction("Reason: (get_bit(Vd, 0) == 1)");
    }
    switch (imm6) {
        // Values of 001xxx
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
            esize = 8;
            elements = 8;
            shift_amount = (UInt(imm6) - 8);
            break;
        
        // Values of 01xxxx
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
            esize = 16;
            elements = 4;
            shift_amount = (UInt(imm6) - 16);
            break;
        
        // Values of 1xxxxx
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 63:
            esize = 32;
            elements = 2;
            shift_amount = (UInt(imm6) - 32);
            break;
        
    }
    
    if (unlikely((shift_amount == 0))) {
        return SeeInstruction("VMOVL");
    }
    unsigned_ = (U == 1);
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vshll;
    ins.m_to_string = decode_vshll_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vshll_a1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.shift_amount = shift_amount;
    ins.unsigned_ = unsigned_;
    ins.U = U;
    ins.D = D;

    return ins;
}

ARMInstruction ARMDecoder::decode_vshll_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 19, 18);
    int    Vd = get_bits(opcode, 15, 12);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int unsigned_ = 0;
    int shift_amount = 0;
    int m = 0;
    int d = 0;
    int esize = 0;

    if (unlikely(((size == 3) || (get_bit(Vd, 0) == 1)))) {
        return UndefinedInstruction("Reason: ((size == 3) || (get_bit(Vd, 0) == 1))");
    }
    esize = (8 << UInt(size));
    shift_amount = esize;
    unsigned_ = false;
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vshll;
    ins.m_to_string = decode_vshll_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vshll_t2";
    ins.encoding = encoding;
    ins.unsigned_ = unsigned_;
    ins.shift_amount = shift_amount;
    ins.m = m;
    ins.d = d;
    ins.esize = esize;
    ins.D = D;
    ins.size = size;

    return ins;
}

ARMInstruction ARMDecoder::decode_vshll_a2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 19, 18);
    int    Vd = get_bits(opcode, 15, 12);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int unsigned_ = 0;
    int shift_amount = 0;
    int m = 0;
    int d = 0;
    int esize = 0;

    if (unlikely(((size == 3) || (get_bit(Vd, 0) == 1)))) {
        return UndefinedInstruction("Reason: ((size == 3) || (get_bit(Vd, 0) == 1))");
    }
    esize = (8 << UInt(size));
    shift_amount = esize;
    unsigned_ = false;
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vshll;
    ins.m_to_string = decode_vshll_a2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vshll_a2";
    ins.encoding = encoding;
    ins.unsigned_ = unsigned_;
    ins.shift_amount = shift_amount;
    ins.m = m;
    ins.d = d;
    ins.esize = esize;
    ins.D = D;
    ins.size = size;

    return ins;
}

ARMInstruction ARMDecoder::decode_vshr_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 28);
    int     D = get_bit(opcode, 22);
    int  imm6 = get_bits(opcode, 21, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     L = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int shift_amount = 0;
    int unsigned_ = 0;

    if (unlikely((Concatenate(L, imm6, 6) >= 0 && Concatenate(L, imm6, 6) <= 7))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely(((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)))");
    }
    switch (Concatenate(L, imm6, 6)) {
        // Values of 0001xxx
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
            esize = 8;
            elements = 8;
            shift_amount = (16 - UInt(imm6));
            break;
        
        // Values of 001xxxx
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
            esize = 16;
            elements = 4;
            shift_amount = (32 - UInt(imm6));
            break;
        
        // Values of 01xxxxx
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 63:
            esize = 32;
            elements = 2;
            shift_amount = (64 - UInt(imm6));
            break;
        
        // Values of 1xxxxxx
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
            esize = 64;
            elements = 1;
            shift_amount = (64 - UInt(imm6));
            break;
        
    }
    
    unsigned_ = (U == 1);
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vshr;
    ins.m_to_string = decode_vshr_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vshr_t1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.shift_amount = shift_amount;
    ins.unsigned_ = unsigned_;
    ins.U = U;
    ins.D = D;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vshr_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 24);
    int     D = get_bit(opcode, 22);
    int  imm6 = get_bits(opcode, 21, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     L = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int shift_amount = 0;
    int unsigned_ = 0;

    if (unlikely((Concatenate(L, imm6, 6) >= 0 && Concatenate(L, imm6, 6) <= 7))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely(((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)))");
    }
    switch (Concatenate(L, imm6, 6)) {
        // Values of 0001xxx
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
            esize = 8;
            elements = 8;
            shift_amount = (16 - UInt(imm6));
            break;
        
        // Values of 001xxxx
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
            esize = 16;
            elements = 4;
            shift_amount = (32 - UInt(imm6));
            break;
        
        // Values of 01xxxxx
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 63:
            esize = 32;
            elements = 2;
            shift_amount = (64 - UInt(imm6));
            break;
        
        // Values of 1xxxxxx
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
            esize = 64;
            elements = 1;
            shift_amount = (64 - UInt(imm6));
            break;
        
    }
    
    unsigned_ = (U == 1);
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vshr;
    ins.m_to_string = decode_vshr_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vshr_a1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.shift_amount = shift_amount;
    ins.unsigned_ = unsigned_;
    ins.U = U;
    ins.D = D;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vshrn_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  imm6 = get_bits(opcode, 21, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int shift_amount = 0;
    int elements = 0;
    int m = 0;
    int d = 0;
    int esize = 0;

    if (unlikely((imm6 >= 0 && imm6 <= 7))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely((get_bit(Vm, 0) == 1))) {
        return UndefinedInstruction("Reason: (get_bit(Vm, 0) == 1)");
    }
    switch (imm6) {
        // Values of 001xxx
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
            esize = 8;
            elements = 8;
            shift_amount = (16 - UInt(imm6));
            break;
        
        // Values of 01xxxx
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
            esize = 16;
            elements = 4;
            shift_amount = (32 - UInt(imm6));
            break;
        
        // Values of 1xxxxx
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 63:
            esize = 32;
            elements = 2;
            shift_amount = (64 - UInt(imm6));
            break;
        
    }
    
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vshrn;
    ins.m_to_string = decode_vshrn_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vshrn_t1";
    ins.encoding = encoding;
    ins.shift_amount = shift_amount;
    ins.elements = elements;
    ins.m = m;
    ins.d = d;
    ins.esize = esize;
    ins.D = D;

    return ins;
}

ARMInstruction ARMDecoder::decode_vshrn_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  imm6 = get_bits(opcode, 21, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int shift_amount = 0;
    int elements = 0;
    int m = 0;
    int d = 0;
    int esize = 0;

    if (unlikely((imm6 >= 0 && imm6 <= 7))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely((get_bit(Vm, 0) == 1))) {
        return UndefinedInstruction("Reason: (get_bit(Vm, 0) == 1)");
    }
    switch (imm6) {
        // Values of 001xxx
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
            esize = 8;
            elements = 8;
            shift_amount = (16 - UInt(imm6));
            break;
        
        // Values of 01xxxx
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
            esize = 16;
            elements = 4;
            shift_amount = (32 - UInt(imm6));
            break;
        
        // Values of 1xxxxx
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 63:
            esize = 32;
            elements = 2;
            shift_amount = (64 - UInt(imm6));
            break;
        
    }
    
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vshrn;
    ins.m_to_string = decode_vshrn_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vshrn_a1";
    ins.encoding = encoding;
    ins.shift_amount = shift_amount;
    ins.elements = elements;
    ins.m = m;
    ins.d = d;
    ins.esize = esize;
    ins.D = D;

    return ins;
}

ARMInstruction ARMDecoder::decode_vsli_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  imm6 = get_bits(opcode, 21, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     L = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int shift_amount = 0;

    if (unlikely((Concatenate(L, imm6, 6) >= 0 && Concatenate(L, imm6, 6) <= 7))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely(((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)))");
    }
    switch (Concatenate(L, imm6, 6)) {
        // Values of 0001xxx
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
            esize = 8;
            elements = 8;
            shift_amount = (UInt(imm6) - 8);
            break;
        
        // Values of 001xxxx
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
            esize = 16;
            elements = 4;
            shift_amount = (UInt(imm6) - 16);
            break;
        
        // Values of 01xxxxx
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 63:
            esize = 32;
            elements = 2;
            shift_amount = (UInt(imm6) - 32);
            break;
        
        // Values of 1xxxxxx
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
            esize = 64;
            elements = 1;
            shift_amount = UInt(imm6);
            break;
        
    }
    
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vsli;
    ins.m_to_string = decode_vsli_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vsli_t1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.shift_amount = shift_amount;
    ins.D = D;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vsli_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  imm6 = get_bits(opcode, 21, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     L = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int shift_amount = 0;

    if (unlikely((Concatenate(L, imm6, 6) >= 0 && Concatenate(L, imm6, 6) <= 7))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely(((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)))");
    }
    switch (Concatenate(L, imm6, 6)) {
        // Values of 0001xxx
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
            esize = 8;
            elements = 8;
            shift_amount = (UInt(imm6) - 8);
            break;
        
        // Values of 001xxxx
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
            esize = 16;
            elements = 4;
            shift_amount = (UInt(imm6) - 16);
            break;
        
        // Values of 01xxxxx
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 63:
            esize = 32;
            elements = 2;
            shift_amount = (UInt(imm6) - 32);
            break;
        
        // Values of 1xxxxxx
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
            esize = 64;
            elements = 1;
            shift_amount = UInt(imm6);
            break;
        
    }
    
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vsli;
    ins.m_to_string = decode_vsli_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vsli_a1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.shift_amount = shift_amount;
    ins.D = D;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vsqrt_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    Vd = get_bits(opcode, 15, 12);
    int    sz = get_bit(opcode,  8);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int dp_operation = 0;
    int m = 0;
    int d = 0;

    if (unlikely(((FPSCR.LEN != 0) || (FPSCR.STRIDE != 0)))) {
        return SeeInstruction("VFP vectors");
    }
    dp_operation = (sz == 1);
    d = ((dp_operation) ? UInt(Concatenate(D, Vd, 4)) : UInt(Concatenate(Vd, D, 1)));
    m = ((dp_operation) ? UInt(Concatenate(M, Vm, 4)) : UInt(Concatenate(Vm, M, 1)));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vsqrt;
    ins.m_to_string = decode_vsqrt_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vsqrt_t1";
    ins.encoding = encoding;
    ins.dp_operation = dp_operation;
    ins.m = m;
    ins.d = d;
    ins.D = D;

    return ins;
}

ARMInstruction ARMDecoder::decode_vsqrt_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     D = get_bit(opcode, 22);
    int    Vd = get_bits(opcode, 15, 12);
    int    sz = get_bit(opcode,  8);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int dp_operation = 0;
    int m = 0;
    int d = 0;

    if (unlikely(((FPSCR.LEN != 0) || (FPSCR.STRIDE != 0)))) {
        return SeeInstruction("VFP vectors");
    }
    dp_operation = (sz == 1);
    d = ((dp_operation) ? UInt(Concatenate(D, Vd, 4)) : UInt(Concatenate(Vd, D, 1)));
    m = ((dp_operation) ? UInt(Concatenate(M, Vm, 4)) : UInt(Concatenate(Vm, M, 1)));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vsqrt;
    ins.m_to_string = decode_vsqrt_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vsqrt_a1";
    ins.encoding = encoding;
    ins.dp_operation = dp_operation;
    ins.m = m;
    ins.d = d;
    ins.cond = cond;
    ins.D = D;

    return ins;
}

ARMInstruction ARMDecoder::decode_vsra_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 28);
    int     D = get_bit(opcode, 22);
    int  imm6 = get_bits(opcode, 21, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     L = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int shift_amount = 0;
    int unsigned_ = 0;

    if (unlikely((Concatenate(L, imm6, 6) >= 0 && Concatenate(L, imm6, 6) <= 7))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely(((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)))");
    }
    switch (Concatenate(L, imm6, 6)) {
        // Values of 0001xxx
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
            esize = 8;
            elements = 8;
            shift_amount = (16 - UInt(imm6));
            break;
        
        // Values of 001xxxx
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
            esize = 16;
            elements = 4;
            shift_amount = (32 - UInt(imm6));
            break;
        
        // Values of 01xxxxx
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 63:
            esize = 32;
            elements = 2;
            shift_amount = (64 - UInt(imm6));
            break;
        
        // Values of 1xxxxxx
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
            esize = 64;
            elements = 1;
            shift_amount = (64 - UInt(imm6));
            break;
        
    }
    
    unsigned_ = (U == 1);
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vsra;
    ins.m_to_string = decode_vsra_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vsra_t1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.shift_amount = shift_amount;
    ins.unsigned_ = unsigned_;
    ins.U = U;
    ins.D = D;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vsra_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 24);
    int     D = get_bit(opcode, 22);
    int  imm6 = get_bits(opcode, 21, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     L = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int shift_amount = 0;
    int unsigned_ = 0;

    if (unlikely((Concatenate(L, imm6, 6) >= 0 && Concatenate(L, imm6, 6) <= 7))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely(((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)))");
    }
    switch (Concatenate(L, imm6, 6)) {
        // Values of 0001xxx
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
            esize = 8;
            elements = 8;
            shift_amount = (16 - UInt(imm6));
            break;
        
        // Values of 001xxxx
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
            esize = 16;
            elements = 4;
            shift_amount = (32 - UInt(imm6));
            break;
        
        // Values of 01xxxxx
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 63:
            esize = 32;
            elements = 2;
            shift_amount = (64 - UInt(imm6));
            break;
        
        // Values of 1xxxxxx
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
            esize = 64;
            elements = 1;
            shift_amount = (64 - UInt(imm6));
            break;
        
    }
    
    unsigned_ = (U == 1);
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vsra;
    ins.m_to_string = decode_vsra_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vsra_a1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.shift_amount = shift_amount;
    ins.unsigned_ = unsigned_;
    ins.U = U;
    ins.D = D;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vsri_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  imm6 = get_bits(opcode, 21, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     L = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int shift_amount = 0;

    if (unlikely((Concatenate(L, imm6, 6) >= 0 && Concatenate(L, imm6, 6) <= 7))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely(((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)))");
    }
    switch (Concatenate(L, imm6, 6)) {
        // Values of 0001xxx
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
            esize = 8;
            elements = 8;
            shift_amount = (16 - UInt(imm6));
            break;
        
        // Values of 001xxxx
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
            esize = 16;
            elements = 4;
            shift_amount = (32 - UInt(imm6));
            break;
        
        // Values of 01xxxxx
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 63:
            esize = 32;
            elements = 2;
            shift_amount = (64 - UInt(imm6));
            break;
        
        // Values of 1xxxxxx
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
            esize = 64;
            elements = 1;
            shift_amount = (64 - UInt(imm6));
            break;
        
    }
    
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vsri;
    ins.m_to_string = decode_vsri_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vsri_t1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.shift_amount = shift_amount;
    ins.D = D;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vsri_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  imm6 = get_bits(opcode, 21, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     L = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int shift_amount = 0;

    if (unlikely((Concatenate(L, imm6, 6) >= 0 && Concatenate(L, imm6, 6) <= 7))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely(((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)))");
    }
    switch (Concatenate(L, imm6, 6)) {
        // Values of 0001xxx
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
            esize = 8;
            elements = 8;
            shift_amount = (16 - UInt(imm6));
            break;
        
        // Values of 001xxxx
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
            esize = 16;
            elements = 4;
            shift_amount = (32 - UInt(imm6));
            break;
        
        // Values of 01xxxxx
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 63:
            esize = 32;
            elements = 2;
            shift_amount = (64 - UInt(imm6));
            break;
        
        // Values of 1xxxxxx
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
            esize = 64;
            elements = 1;
            shift_amount = (64 - UInt(imm6));
            break;
        
    }
    
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vsri;
    ins.m_to_string = decode_vsri_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vsri_a1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.shift_amount = shift_amount;
    ins.D = D;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vst1_multiple_single_elements_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    Rn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int  type = get_bits(opcode, 11,  8);
    int  size = get_bits(opcode,  7,  6);
    int align = get_bits(opcode,  5,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int register_index = 0;
    int m = 0;
    int regs = 0;
    int n = 0;
    int wback = 0;
    int ebytes = 0;
    int alignment = 0;

    switch (type) {
        case 7:
            regs = 1;
            if (unlikely((get_bit(align, 1) == 1))) {
            return UndefinedInstruction("Reason: (get_bit(align, 1) == 1)");
        }
            break;
        
        case 10:
            regs = 2;
            if (unlikely((align == 3))) {
            return UndefinedInstruction("Reason: (align == 3)");
        }
            break;
        
        case 6:
            regs = 3;
            if (unlikely((get_bit(align, 1) == 1))) {
            return UndefinedInstruction("Reason: (get_bit(align, 1) == 1)");
        }
            break;
        
        case 2:
            regs = 4;
            break;
        
        default:
            return SeeInstruction("Related encodings");
            break;
        
    }
    
    alignment = (((align == 0)) ? 1 : (4 << UInt(align)));
    ebytes = (1 << UInt(size));
    esize = (8 * ebytes);
    elements = (8 / ebytes);
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Rn);
    m = UInt(Rm);
    wback = (m != 15);
    register_index = ((m != 15) && (m != 13));
    if (unlikely(((n == 15) || ((d + regs) > 32)))) {
        return UnpredictableInstruction("Reason: ((n == 15) || ((d + regs) > 32))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vst1_multiple_single_elements;
    ins.m_to_string = decode_vst1_multiple_single_elements_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vst1_multiple_single_elements_t1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.register_index = register_index;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.wback = wback;
    ins.ebytes = ebytes;
    ins.alignment = alignment;
    ins.D = D;
    ins.type = type;
    ins.size = size;

    return ins;
}

ARMInstruction ARMDecoder::decode_vst1_multiple_single_elements_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    Rn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int  type = get_bits(opcode, 11,  8);
    int  size = get_bits(opcode,  7,  6);
    int align = get_bits(opcode,  5,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int register_index = 0;
    int m = 0;
    int regs = 0;
    int n = 0;
    int wback = 0;
    int ebytes = 0;
    int alignment = 0;

    switch (type) {
        case 7:
            regs = 1;
            if (unlikely((get_bit(align, 1) == 1))) {
            return UndefinedInstruction("Reason: (get_bit(align, 1) == 1)");
        }
            break;
        
        case 10:
            regs = 2;
            if (unlikely((align == 3))) {
            return UndefinedInstruction("Reason: (align == 3)");
        }
            break;
        
        case 6:
            regs = 3;
            if (unlikely((get_bit(align, 1) == 1))) {
            return UndefinedInstruction("Reason: (get_bit(align, 1) == 1)");
        }
            break;
        
        case 2:
            regs = 4;
            break;
        
        default:
            return SeeInstruction("Related encodings");
            break;
        
    }
    
    alignment = (((align == 0)) ? 1 : (4 << UInt(align)));
    ebytes = (1 << UInt(size));
    esize = (8 * ebytes);
    elements = (8 / ebytes);
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Rn);
    m = UInt(Rm);
    wback = (m != 15);
    register_index = ((m != 15) && (m != 13));
    if (unlikely(((n == 15) || ((d + regs) > 32)))) {
        return UnpredictableInstruction("Reason: ((n == 15) || ((d + regs) > 32))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vst1_multiple_single_elements;
    ins.m_to_string = decode_vst1_multiple_single_elements_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vst1_multiple_single_elements_a1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.register_index = register_index;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.wback = wback;
    ins.ebytes = ebytes;
    ins.alignment = alignment;
    ins.D = D;
    ins.type = type;
    ins.size = size;

    return ins;
}

ARMInstruction ARMDecoder::decode_vst1_single_element_from_one_lane_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    Rn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int  size = get_bits(opcode, 11, 10);
    int index_align = get_bits(opcode,  7,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int index = 0;
    int d = 0;
    int esize = 0;
    int register_index = 0;
    int m = 0;
    int n = 0;
    int wback = 0;
    int ebytes = 0;
    int alignment = 0;

    if (unlikely((size == 3))) {
        return UndefinedInstruction("Reason: (size == 3)");
    }
    switch (size) {
        case 0:
            if (unlikely((get_bit(index_align, 0) != 0))) {
            return UndefinedInstruction("Reason: (get_bit(index_align, 0) != 0)");
        }
            ebytes = 1;
            esize = 8;
            index = UInt(get_bits(index_align, 3, 1));
            alignment = 1;
            break;
        
        case 1:
            if (unlikely((get_bit(index_align, 1) != 0))) {
            return UndefinedInstruction("Reason: (get_bit(index_align, 1) != 0)");
        }
            ebytes = 2;
            esize = 16;
            index = UInt(get_bits(index_align, 3, 2));
            alignment = (((get_bit(index_align, 0) == 0)) ? 1 : 2);
            break;
        
        case 2:
            if (unlikely((get_bit(index_align, 2) != 0))) {
            return UndefinedInstruction("Reason: (get_bit(index_align, 2) != 0)");
        }
            if (unlikely(((get_bits(index_align, 1, 0) != 0) && (get_bits(index_align, 1, 0) != 3)))) {
            return UndefinedInstruction("Reason: ((get_bits(index_align, 1, 0) != 0) && (get_bits(index_align, 1, 0) != 3))");
        }
            ebytes = 4;
            esize = 32;
            index = UInt(get_bit(index_align, 3));
            alignment = (((get_bits(index_align, 1, 0) == 0)) ? 1 : 4);
            break;
        
    }
    
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Rn);
    m = UInt(Rm);
    wback = (m != 15);
    register_index = ((m != 15) && (m != 13));
    if (unlikely((n == 15))) {
        return UnpredictableInstruction("Reason: (n == 15)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vst1_single_element_from_one_lane;
    ins.m_to_string = decode_vst1_single_element_from_one_lane_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vst1_single_element_from_one_lane_t1";
    ins.encoding = encoding;
    ins.index = index;
    ins.d = d;
    ins.esize = esize;
    ins.register_index = register_index;
    ins.m = m;
    ins.n = n;
    ins.wback = wback;
    ins.ebytes = ebytes;
    ins.alignment = alignment;
    ins.D = D;
    ins.size = size;

    return ins;
}

ARMInstruction ARMDecoder::decode_vst1_single_element_from_one_lane_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    Rn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int  size = get_bits(opcode, 11, 10);
    int index_align = get_bits(opcode,  7,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int index = 0;
    int d = 0;
    int esize = 0;
    int register_index = 0;
    int m = 0;
    int n = 0;
    int wback = 0;
    int ebytes = 0;
    int alignment = 0;

    if (unlikely((size == 3))) {
        return UndefinedInstruction("Reason: (size == 3)");
    }
    switch (size) {
        case 0:
            if (unlikely((get_bit(index_align, 0) != 0))) {
            return UndefinedInstruction("Reason: (get_bit(index_align, 0) != 0)");
        }
            ebytes = 1;
            esize = 8;
            index = UInt(get_bits(index_align, 3, 1));
            alignment = 1;
            break;
        
        case 1:
            if (unlikely((get_bit(index_align, 1) != 0))) {
            return UndefinedInstruction("Reason: (get_bit(index_align, 1) != 0)");
        }
            ebytes = 2;
            esize = 16;
            index = UInt(get_bits(index_align, 3, 2));
            alignment = (((get_bit(index_align, 0) == 0)) ? 1 : 2);
            break;
        
        case 2:
            if (unlikely((get_bit(index_align, 2) != 0))) {
            return UndefinedInstruction("Reason: (get_bit(index_align, 2) != 0)");
        }
            if (unlikely(((get_bits(index_align, 1, 0) != 0) && (get_bits(index_align, 1, 0) != 3)))) {
            return UndefinedInstruction("Reason: ((get_bits(index_align, 1, 0) != 0) && (get_bits(index_align, 1, 0) != 3))");
        }
            ebytes = 4;
            esize = 32;
            index = UInt(get_bit(index_align, 3));
            alignment = (((get_bits(index_align, 1, 0) == 0)) ? 1 : 4);
            break;
        
    }
    
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Rn);
    m = UInt(Rm);
    wback = (m != 15);
    register_index = ((m != 15) && (m != 13));
    if (unlikely((n == 15))) {
        return UnpredictableInstruction("Reason: (n == 15)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vst1_single_element_from_one_lane;
    ins.m_to_string = decode_vst1_single_element_from_one_lane_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vst1_single_element_from_one_lane_a1";
    ins.encoding = encoding;
    ins.index = index;
    ins.d = d;
    ins.esize = esize;
    ins.register_index = register_index;
    ins.m = m;
    ins.n = n;
    ins.wback = wback;
    ins.ebytes = ebytes;
    ins.alignment = alignment;
    ins.D = D;
    ins.size = size;

    return ins;
}

ARMInstruction ARMDecoder::decode_vst2_multiple_2_element_structures_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    Rn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int  type = get_bits(opcode, 11,  8);
    int  size = get_bits(opcode,  7,  6);
    int align = get_bits(opcode,  5,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int register_index = 0;
    int m = 0;
    int regs = 0;
    int n = 0;
    int wback = 0;
    int ebytes = 0;
    int d2 = 0;
    int alignment = 0;
    int inc = 0;

    if (unlikely((size == 3))) {
        return UndefinedInstruction("Reason: (size == 3)");
    }
    switch (type) {
        case 8:
            regs = 1;
            inc = 1;
            if (unlikely((align == 3))) {
            return UndefinedInstruction("Reason: (align == 3)");
        }
            break;
        
        case 9:
            regs = 1;
            inc = 2;
            if (unlikely((align == 3))) {
            return UndefinedInstruction("Reason: (align == 3)");
        }
            break;
        
        case 3:
            regs = 2;
            inc = 2;
            break;
        
        default:
            return SeeInstruction("Related encodings");
            break;
        
    }
    
    alignment = (((align == 0)) ? 1 : (4 << UInt(align)));
    ebytes = (1 << UInt(size));
    esize = (8 * ebytes);
    elements = (8 / ebytes);
    d = UInt(Concatenate(D, Vd, 4));
    d2 = (d + inc);
    n = UInt(Rn);
    m = UInt(Rm);
    wback = (m != 15);
    register_index = ((m != 15) && (m != 13));
    if (unlikely(((n == 15) || ((d2 + regs) > 32)))) {
        return UnpredictableInstruction("Reason: ((n == 15) || ((d2 + regs) > 32))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vst2_multiple_2_element_structures;
    ins.m_to_string = decode_vst2_multiple_2_element_structures_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vst2_multiple_2_element_structures_t1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.register_index = register_index;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.wback = wback;
    ins.ebytes = ebytes;
    ins.d2 = d2;
    ins.alignment = alignment;
    ins.inc = inc;
    ins.D = D;
    ins.type = type;
    ins.size = size;

    return ins;
}

ARMInstruction ARMDecoder::decode_vst2_multiple_2_element_structures_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    Rn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int  type = get_bits(opcode, 11,  8);
    int  size = get_bits(opcode,  7,  6);
    int align = get_bits(opcode,  5,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int register_index = 0;
    int m = 0;
    int regs = 0;
    int n = 0;
    int wback = 0;
    int ebytes = 0;
    int d2 = 0;
    int alignment = 0;
    int inc = 0;

    if (unlikely((size == 3))) {
        return UndefinedInstruction("Reason: (size == 3)");
    }
    switch (type) {
        case 8:
            regs = 1;
            inc = 1;
            if (unlikely((align == 3))) {
            return UndefinedInstruction("Reason: (align == 3)");
        }
            break;
        
        case 9:
            regs = 1;
            inc = 2;
            if (unlikely((align == 3))) {
            return UndefinedInstruction("Reason: (align == 3)");
        }
            break;
        
        case 3:
            regs = 2;
            inc = 2;
            break;
        
        default:
            return SeeInstruction("Related encodings");
            break;
        
    }
    
    alignment = (((align == 0)) ? 1 : (4 << UInt(align)));
    ebytes = (1 << UInt(size));
    esize = (8 * ebytes);
    elements = (8 / ebytes);
    d = UInt(Concatenate(D, Vd, 4));
    d2 = (d + inc);
    n = UInt(Rn);
    m = UInt(Rm);
    wback = (m != 15);
    register_index = ((m != 15) && (m != 13));
    if (unlikely(((n == 15) || ((d2 + regs) > 32)))) {
        return UnpredictableInstruction("Reason: ((n == 15) || ((d2 + regs) > 32))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vst2_multiple_2_element_structures;
    ins.m_to_string = decode_vst2_multiple_2_element_structures_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vst2_multiple_2_element_structures_a1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.register_index = register_index;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.wback = wback;
    ins.ebytes = ebytes;
    ins.d2 = d2;
    ins.alignment = alignment;
    ins.inc = inc;
    ins.D = D;
    ins.type = type;
    ins.size = size;

    return ins;
}

ARMInstruction ARMDecoder::decode_vst2_single_2_element_structure_from_one_lane_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    Rn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int  size = get_bits(opcode, 11, 10);
    int index_align = get_bits(opcode,  7,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int index = 0;
    int d = 0;
    int esize = 0;
    int register_index = 0;
    int m = 0;
    int n = 0;
    int wback = 0;
    int ebytes = 0;
    int d2 = 0;
    int alignment = 0;
    int inc = 0;

    if (unlikely((size == 3))) {
        return UndefinedInstruction("Reason: (size == 3)");
    }
    switch (size) {
        case 0:
            ebytes = 1;
            esize = 8;
            index = UInt(get_bits(index_align, 3, 1));
            inc = 1;
            alignment = (((get_bit(index_align, 0) == 0)) ? 1 : 2);
            break;
        
        case 1:
            ebytes = 2;
            esize = 16;
            index = UInt(get_bits(index_align, 3, 2));
            inc = (((get_bit(index_align, 1) == 0)) ? 1 : 2);
            alignment = (((get_bit(index_align, 0) == 0)) ? 1 : 4);
            break;
        
        case 2:
            if (unlikely((get_bit(index_align, 1) != 0))) {
            return UndefinedInstruction("Reason: (get_bit(index_align, 1) != 0)");
        }
            ebytes = 4;
            esize = 32;
            index = UInt(get_bit(index_align, 3));
            inc = (((get_bit(index_align, 2) == 0)) ? 1 : 2);
            alignment = (((get_bit(index_align, 0) == 0)) ? 1 : 8);
            break;
        
    }
    
    d = UInt(Concatenate(D, Vd, 4));
    d2 = (d + inc);
    n = UInt(Rn);
    m = UInt(Rm);
    wback = (m != 15);
    register_index = ((m != 15) && (m != 13));
    if (unlikely(((n == 15) || (d2 > 31)))) {
        return UnpredictableInstruction("Reason: ((n == 15) || (d2 > 31))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vst2_single_2_element_structure_from_one_lane;
    ins.m_to_string = decode_vst2_single_2_element_structure_from_one_lane_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vst2_single_2_element_structure_from_one_lane_t1";
    ins.encoding = encoding;
    ins.index = index;
    ins.d = d;
    ins.esize = esize;
    ins.register_index = register_index;
    ins.m = m;
    ins.n = n;
    ins.wback = wback;
    ins.ebytes = ebytes;
    ins.d2 = d2;
    ins.alignment = alignment;
    ins.inc = inc;
    ins.D = D;
    ins.size = size;

    return ins;
}

ARMInstruction ARMDecoder::decode_vst2_single_2_element_structure_from_one_lane_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    Rn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int  size = get_bits(opcode, 11, 10);
    int index_align = get_bits(opcode,  7,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int index = 0;
    int d = 0;
    int esize = 0;
    int register_index = 0;
    int m = 0;
    int n = 0;
    int wback = 0;
    int ebytes = 0;
    int d2 = 0;
    int alignment = 0;
    int inc = 0;

    if (unlikely((size == 3))) {
        return UndefinedInstruction("Reason: (size == 3)");
    }
    switch (size) {
        case 0:
            ebytes = 1;
            esize = 8;
            index = UInt(get_bits(index_align, 3, 1));
            inc = 1;
            alignment = (((get_bit(index_align, 0) == 0)) ? 1 : 2);
            break;
        
        case 1:
            ebytes = 2;
            esize = 16;
            index = UInt(get_bits(index_align, 3, 2));
            inc = (((get_bit(index_align, 1) == 0)) ? 1 : 2);
            alignment = (((get_bit(index_align, 0) == 0)) ? 1 : 4);
            break;
        
        case 2:
            if (unlikely((get_bit(index_align, 1) != 0))) {
            return UndefinedInstruction("Reason: (get_bit(index_align, 1) != 0)");
        }
            ebytes = 4;
            esize = 32;
            index = UInt(get_bit(index_align, 3));
            inc = (((get_bit(index_align, 2) == 0)) ? 1 : 2);
            alignment = (((get_bit(index_align, 0) == 0)) ? 1 : 8);
            break;
        
    }
    
    d = UInt(Concatenate(D, Vd, 4));
    d2 = (d + inc);
    n = UInt(Rn);
    m = UInt(Rm);
    wback = (m != 15);
    register_index = ((m != 15) && (m != 13));
    if (unlikely(((n == 15) || (d2 > 31)))) {
        return UnpredictableInstruction("Reason: ((n == 15) || (d2 > 31))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vst2_single_2_element_structure_from_one_lane;
    ins.m_to_string = decode_vst2_single_2_element_structure_from_one_lane_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vst2_single_2_element_structure_from_one_lane_a1";
    ins.encoding = encoding;
    ins.index = index;
    ins.d = d;
    ins.esize = esize;
    ins.register_index = register_index;
    ins.m = m;
    ins.n = n;
    ins.wback = wback;
    ins.ebytes = ebytes;
    ins.d2 = d2;
    ins.alignment = alignment;
    ins.inc = inc;
    ins.D = D;
    ins.size = size;

    return ins;
}

ARMInstruction ARMDecoder::decode_vst3_multiple_3_element_structures_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    Rn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int  type = get_bits(opcode, 11,  8);
    int  size = get_bits(opcode,  7,  6);
    int align = get_bits(opcode,  5,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int register_index = 0;
    int m = 0;
    int n = 0;
    int wback = 0;
    int ebytes = 0;
    int d2 = 0;
    int d3 = 0;
    int alignment = 0;
    int inc = 0;

    if (unlikely(((size == 3) || (get_bit(align, 1) == 1)))) {
        return UndefinedInstruction("Reason: ((size == 3) || (get_bit(align, 1) == 1))");
    }
    switch (type) {
        case 4:
            inc = 1;
            break;
        
        case 5:
            inc = 2;
            break;
        
        default:
            return SeeInstruction("Related encodings");
            break;
        
    }
    
    alignment = (((get_bit(align, 0) == 0)) ? 1 : 8);
    ebytes = (1 << UInt(size));
    esize = (8 * ebytes);
    elements = (8 / ebytes);
    d = UInt(Concatenate(D, Vd, 4));
    d2 = (d + inc);
    d3 = (d2 + inc);
    n = UInt(Rn);
    m = UInt(Rm);
    wback = (m != 15);
    register_index = ((m != 15) && (m != 13));
    if (unlikely(((n == 15) || (d3 > 31)))) {
        return UnpredictableInstruction("Reason: ((n == 15) || (d3 > 31))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vst3_multiple_3_element_structures;
    ins.m_to_string = decode_vst3_multiple_3_element_structures_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vst3_multiple_3_element_structures_t1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.register_index = register_index;
    ins.m = m;
    ins.n = n;
    ins.wback = wback;
    ins.ebytes = ebytes;
    ins.d2 = d2;
    ins.d3 = d3;
    ins.alignment = alignment;
    ins.inc = inc;
    ins.D = D;
    ins.type = type;
    ins.size = size;

    return ins;
}

ARMInstruction ARMDecoder::decode_vst3_multiple_3_element_structures_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    Rn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int  type = get_bits(opcode, 11,  8);
    int  size = get_bits(opcode,  7,  6);
    int align = get_bits(opcode,  5,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int register_index = 0;
    int m = 0;
    int n = 0;
    int wback = 0;
    int ebytes = 0;
    int d2 = 0;
    int d3 = 0;
    int alignment = 0;
    int inc = 0;

    if (unlikely(((size == 3) || (get_bit(align, 1) == 1)))) {
        return UndefinedInstruction("Reason: ((size == 3) || (get_bit(align, 1) == 1))");
    }
    switch (type) {
        case 4:
            inc = 1;
            break;
        
        case 5:
            inc = 2;
            break;
        
        default:
            return SeeInstruction("Related encodings");
            break;
        
    }
    
    alignment = (((get_bit(align, 0) == 0)) ? 1 : 8);
    ebytes = (1 << UInt(size));
    esize = (8 * ebytes);
    elements = (8 / ebytes);
    d = UInt(Concatenate(D, Vd, 4));
    d2 = (d + inc);
    d3 = (d2 + inc);
    n = UInt(Rn);
    m = UInt(Rm);
    wback = (m != 15);
    register_index = ((m != 15) && (m != 13));
    if (unlikely(((n == 15) || (d3 > 31)))) {
        return UnpredictableInstruction("Reason: ((n == 15) || (d3 > 31))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vst3_multiple_3_element_structures;
    ins.m_to_string = decode_vst3_multiple_3_element_structures_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vst3_multiple_3_element_structures_a1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.register_index = register_index;
    ins.m = m;
    ins.n = n;
    ins.wback = wback;
    ins.ebytes = ebytes;
    ins.d2 = d2;
    ins.d3 = d3;
    ins.alignment = alignment;
    ins.inc = inc;
    ins.D = D;
    ins.type = type;
    ins.size = size;

    return ins;
}

ARMInstruction ARMDecoder::decode_vst3_single_3_element_structure_from_one_lane_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    Rn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int  size = get_bits(opcode, 11, 10);
    int index_align = get_bits(opcode,  7,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int index = 0;
    int d = 0;
    int esize = 0;
    int register_index = 0;
    int m = 0;
    int n = 0;
    int wback = 0;
    int ebytes = 0;
    int d2 = 0;
    int d3 = 0;
    int inc = 0;

    if (unlikely((size == 3))) {
        return UndefinedInstruction("Reason: (size == 3)");
    }
    switch (size) {
        case 0:
            if (unlikely((get_bit(index_align, 0) != 0))) {
            return UndefinedInstruction("Reason: (get_bit(index_align, 0) != 0)");
        }
            ebytes = 1;
            esize = 8;
            index = UInt(get_bits(index_align, 3, 1));
            inc = 1;
            break;
        
        case 1:
            if (unlikely((get_bit(index_align, 0) != 0))) {
            return UndefinedInstruction("Reason: (get_bit(index_align, 0) != 0)");
        }
            ebytes = 2;
            esize = 16;
            index = UInt(get_bits(index_align, 3, 2));
            inc = (((get_bit(index_align, 1) == 0)) ? 1 : 2);
            break;
        
        case 2:
            if (unlikely((get_bits(index_align, 1, 0) != 0))) {
            return UndefinedInstruction("Reason: (get_bits(index_align, 1, 0) != 0)");
        }
            ebytes = 4;
            esize = 32;
            index = UInt(get_bit(index_align, 3));
            inc = (((get_bit(index_align, 2) == 0)) ? 1 : 2);
            break;
        
    }
    
    d = UInt(Concatenate(D, Vd, 4));
    d2 = (d + inc);
    d3 = (d2 + inc);
    n = UInt(Rn);
    m = UInt(Rm);
    wback = (m != 15);
    register_index = ((m != 15) && (m != 13));
    if (unlikely(((n == 15) || (d3 > 31)))) {
        return UnpredictableInstruction("Reason: ((n == 15) || (d3 > 31))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vst3_single_3_element_structure_from_one_lane;
    ins.m_to_string = decode_vst3_single_3_element_structure_from_one_lane_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vst3_single_3_element_structure_from_one_lane_t1";
    ins.encoding = encoding;
    ins.index = index;
    ins.d = d;
    ins.esize = esize;
    ins.register_index = register_index;
    ins.m = m;
    ins.n = n;
    ins.wback = wback;
    ins.ebytes = ebytes;
    ins.d2 = d2;
    ins.d3 = d3;
    ins.inc = inc;
    ins.D = D;
    ins.size = size;

    return ins;
}

ARMInstruction ARMDecoder::decode_vst3_single_3_element_structure_from_one_lane_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    Rn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int  size = get_bits(opcode, 11, 10);
    int index_align = get_bits(opcode,  7,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int index = 0;
    int d = 0;
    int esize = 0;
    int register_index = 0;
    int m = 0;
    int n = 0;
    int wback = 0;
    int ebytes = 0;
    int d2 = 0;
    int d3 = 0;
    int inc = 0;

    if (unlikely((size == 3))) {
        return UndefinedInstruction("Reason: (size == 3)");
    }
    switch (size) {
        case 0:
            if (unlikely((get_bit(index_align, 0) != 0))) {
            return UndefinedInstruction("Reason: (get_bit(index_align, 0) != 0)");
        }
            ebytes = 1;
            esize = 8;
            index = UInt(get_bits(index_align, 3, 1));
            inc = 1;
            break;
        
        case 1:
            if (unlikely((get_bit(index_align, 0) != 0))) {
            return UndefinedInstruction("Reason: (get_bit(index_align, 0) != 0)");
        }
            ebytes = 2;
            esize = 16;
            index = UInt(get_bits(index_align, 3, 2));
            inc = (((get_bit(index_align, 1) == 0)) ? 1 : 2);
            break;
        
        case 2:
            if (unlikely((get_bits(index_align, 1, 0) != 0))) {
            return UndefinedInstruction("Reason: (get_bits(index_align, 1, 0) != 0)");
        }
            ebytes = 4;
            esize = 32;
            index = UInt(get_bit(index_align, 3));
            inc = (((get_bit(index_align, 2) == 0)) ? 1 : 2);
            break;
        
    }
    
    d = UInt(Concatenate(D, Vd, 4));
    d2 = (d + inc);
    d3 = (d2 + inc);
    n = UInt(Rn);
    m = UInt(Rm);
    wback = (m != 15);
    register_index = ((m != 15) && (m != 13));
    if (unlikely(((n == 15) || (d3 > 31)))) {
        return UnpredictableInstruction("Reason: ((n == 15) || (d3 > 31))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vst3_single_3_element_structure_from_one_lane;
    ins.m_to_string = decode_vst3_single_3_element_structure_from_one_lane_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vst3_single_3_element_structure_from_one_lane_a1";
    ins.encoding = encoding;
    ins.index = index;
    ins.d = d;
    ins.esize = esize;
    ins.register_index = register_index;
    ins.m = m;
    ins.n = n;
    ins.wback = wback;
    ins.ebytes = ebytes;
    ins.d2 = d2;
    ins.d3 = d3;
    ins.inc = inc;
    ins.D = D;
    ins.size = size;

    return ins;
}

ARMInstruction ARMDecoder::decode_vst4_multiple_4_element_structures_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    Rn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int  type = get_bits(opcode, 11,  8);
    int  size = get_bits(opcode,  7,  6);
    int align = get_bits(opcode,  5,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int register_index = 0;
    int m = 0;
    int n = 0;
    int wback = 0;
    int ebytes = 0;
    int d4 = 0;
    int d2 = 0;
    int d3 = 0;
    int alignment = 0;
    int inc = 0;

    if (unlikely((size == 3))) {
        return UndefinedInstruction("Reason: (size == 3)");
    }
    switch (type) {
        case 0:
            inc = 1;
            break;
        
        case 1:
            inc = 2;
            break;
        
        default:
            return SeeInstruction("Related encodings");
            break;
        
    }
    
    alignment = (((align == 0)) ? 1 : (4 << UInt(align)));
    ebytes = (1 << UInt(size));
    esize = (8 * ebytes);
    elements = (8 / ebytes);
    d = UInt(Concatenate(D, Vd, 4));
    d2 = (d + inc);
    d3 = (d2 + inc);
    d4 = (d3 + inc);
    n = UInt(Rn);
    m = UInt(Rm);
    wback = (m != 15);
    register_index = ((m != 15) && (m != 13));
    if (unlikely(((n == 15) || (d4 > 31)))) {
        return UnpredictableInstruction("Reason: ((n == 15) || (d4 > 31))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vst4_multiple_4_element_structures;
    ins.m_to_string = decode_vst4_multiple_4_element_structures_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vst4_multiple_4_element_structures_t1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.register_index = register_index;
    ins.m = m;
    ins.n = n;
    ins.wback = wback;
    ins.ebytes = ebytes;
    ins.d4 = d4;
    ins.d2 = d2;
    ins.d3 = d3;
    ins.alignment = alignment;
    ins.inc = inc;
    ins.D = D;
    ins.type = type;
    ins.size = size;

    return ins;
}

ARMInstruction ARMDecoder::decode_vst4_multiple_4_element_structures_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    Rn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int  type = get_bits(opcode, 11,  8);
    int  size = get_bits(opcode,  7,  6);
    int align = get_bits(opcode,  5,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int register_index = 0;
    int m = 0;
    int n = 0;
    int wback = 0;
    int ebytes = 0;
    int d4 = 0;
    int d2 = 0;
    int d3 = 0;
    int alignment = 0;
    int inc = 0;

    if (unlikely((size == 3))) {
        return UndefinedInstruction("Reason: (size == 3)");
    }
    switch (type) {
        case 0:
            inc = 1;
            break;
        
        case 1:
            inc = 2;
            break;
        
        default:
            return SeeInstruction("Related encodings");
            break;
        
    }
    
    alignment = (((align == 0)) ? 1 : (4 << UInt(align)));
    ebytes = (1 << UInt(size));
    esize = (8 * ebytes);
    elements = (8 / ebytes);
    d = UInt(Concatenate(D, Vd, 4));
    d2 = (d + inc);
    d3 = (d2 + inc);
    d4 = (d3 + inc);
    n = UInt(Rn);
    m = UInt(Rm);
    wback = (m != 15);
    register_index = ((m != 15) && (m != 13));
    if (unlikely(((n == 15) || (d4 > 31)))) {
        return UnpredictableInstruction("Reason: ((n == 15) || (d4 > 31))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vst4_multiple_4_element_structures;
    ins.m_to_string = decode_vst4_multiple_4_element_structures_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vst4_multiple_4_element_structures_a1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.register_index = register_index;
    ins.m = m;
    ins.n = n;
    ins.wback = wback;
    ins.ebytes = ebytes;
    ins.d4 = d4;
    ins.d2 = d2;
    ins.d3 = d3;
    ins.alignment = alignment;
    ins.inc = inc;
    ins.D = D;
    ins.type = type;
    ins.size = size;

    return ins;
}

ARMInstruction ARMDecoder::decode_vst4_single_4_element_structure_from_one_lane_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    Rn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int  size = get_bits(opcode, 11, 10);
    int index_align = get_bits(opcode,  7,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int index = 0;
    int d = 0;
    int esize = 0;
    int register_index = 0;
    int m = 0;
    int n = 0;
    int wback = 0;
    int ebytes = 0;
    int d4 = 0;
    int d2 = 0;
    int d3 = 0;
    int alignment = 0;
    int inc = 0;

    if (unlikely((size == 3))) {
        return UndefinedInstruction("Reason: (size == 3)");
    }
    switch (size) {
        case 0:
            ebytes = 1;
            esize = 8;
            index = UInt(get_bits(index_align, 3, 1));
            inc = 1;
            alignment = (((get_bit(index_align, 0) == 0)) ? 1 : 4);
            break;
        
        case 1:
            ebytes = 2;
            esize = 16;
            index = UInt(get_bits(index_align, 3, 2));
            inc = (((get_bit(index_align, 1) == 0)) ? 1 : 2);
            alignment = (((get_bit(index_align, 0) == 0)) ? 1 : 8);
            break;
        
        case 2:
            if (unlikely((get_bits(index_align, 1, 0) == 3))) {
            return UndefinedInstruction("Reason: (get_bits(index_align, 1, 0) == 3)");
        }
            ebytes = 4;
            esize = 32;
            index = UInt(get_bit(index_align, 3));
            inc = (((get_bit(index_align, 2) == 0)) ? 1 : 2);
            alignment = (((get_bits(index_align, 1, 0) == 0)) ? 1 : (4 << UInt(get_bits(index_align, 1, 0))));
            break;
        
    }
    
    d = UInt(Concatenate(D, Vd, 4));
    d2 = (d + inc);
    d3 = (d2 + inc);
    d4 = (d3 + inc);
    n = UInt(Rn);
    m = UInt(Rm);
    wback = (m != 15);
    register_index = ((m != 15) && (m != 13));
    if (unlikely(((n == 15) || (d4 > 31)))) {
        return UnpredictableInstruction("Reason: ((n == 15) || (d4 > 31))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vst4_single_4_element_structure_from_one_lane;
    ins.m_to_string = decode_vst4_single_4_element_structure_from_one_lane_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vst4_single_4_element_structure_from_one_lane_t1";
    ins.encoding = encoding;
    ins.index = index;
    ins.d = d;
    ins.esize = esize;
    ins.register_index = register_index;
    ins.m = m;
    ins.n = n;
    ins.wback = wback;
    ins.ebytes = ebytes;
    ins.d4 = d4;
    ins.d2 = d2;
    ins.d3 = d3;
    ins.alignment = alignment;
    ins.inc = inc;
    ins.D = D;
    ins.size = size;

    return ins;
}

ARMInstruction ARMDecoder::decode_vst4_single_4_element_structure_from_one_lane_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    Rn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int  size = get_bits(opcode, 11, 10);
    int index_align = get_bits(opcode,  7,  4);
    int    Rm = get_bits(opcode,  3,  0);
    int index = 0;
    int d = 0;
    int esize = 0;
    int register_index = 0;
    int m = 0;
    int n = 0;
    int wback = 0;
    int ebytes = 0;
    int d4 = 0;
    int d2 = 0;
    int d3 = 0;
    int alignment = 0;
    int inc = 0;

    if (unlikely((size == 3))) {
        return UndefinedInstruction("Reason: (size == 3)");
    }
    switch (size) {
        case 0:
            ebytes = 1;
            esize = 8;
            index = UInt(get_bits(index_align, 3, 1));
            inc = 1;
            alignment = (((get_bit(index_align, 0) == 0)) ? 1 : 4);
            break;
        
        case 1:
            ebytes = 2;
            esize = 16;
            index = UInt(get_bits(index_align, 3, 2));
            inc = (((get_bit(index_align, 1) == 0)) ? 1 : 2);
            alignment = (((get_bit(index_align, 0) == 0)) ? 1 : 8);
            break;
        
        case 2:
            if (unlikely((get_bits(index_align, 1, 0) == 3))) {
            return UndefinedInstruction("Reason: (get_bits(index_align, 1, 0) == 3)");
        }
            ebytes = 4;
            esize = 32;
            index = UInt(get_bit(index_align, 3));
            inc = (((get_bit(index_align, 2) == 0)) ? 1 : 2);
            alignment = (((get_bits(index_align, 1, 0) == 0)) ? 1 : (4 << UInt(get_bits(index_align, 1, 0))));
            break;
        
    }
    
    d = UInt(Concatenate(D, Vd, 4));
    d2 = (d + inc);
    d3 = (d2 + inc);
    d4 = (d3 + inc);
    n = UInt(Rn);
    m = UInt(Rm);
    wback = (m != 15);
    register_index = ((m != 15) && (m != 13));
    if (unlikely(((n == 15) || (d4 > 31)))) {
        return UnpredictableInstruction("Reason: ((n == 15) || (d4 > 31))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vst4_single_4_element_structure_from_one_lane;
    ins.m_to_string = decode_vst4_single_4_element_structure_from_one_lane_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vst4_single_4_element_structure_from_one_lane_a1";
    ins.encoding = encoding;
    ins.index = index;
    ins.d = d;
    ins.esize = esize;
    ins.register_index = register_index;
    ins.m = m;
    ins.n = n;
    ins.wback = wback;
    ins.ebytes = ebytes;
    ins.d4 = d4;
    ins.d2 = d2;
    ins.d3 = d3;
    ins.alignment = alignment;
    ins.inc = inc;
    ins.D = D;
    ins.size = size;

    return ins;
}

ARMInstruction ARMDecoder::decode_vstm_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     P = get_bit(opcode, 24);
    int     U = get_bit(opcode, 23);
    int     D = get_bit(opcode, 22);
    int     W = get_bit(opcode, 21);
    int    Rn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int  imm8 = get_bits(opcode,  7,  0);
    int d = 0;
    int single_regs = 0;
    int regs = 0;
    int imm32 = 0;
    int n = 0;
    int add = 0;
    int wback = 0;

    if (unlikely((((P == 0) && (U == 0)) && (W == 0)))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely(((((P == 1) && (U == 0)) && (W == 1)) && (Rn == 13)))) {
        return SeeInstruction("VPUSH");
    }
    if (unlikely(((P == 1) && (W == 0)))) {
        return SeeInstruction("VSTR");
    }
    if (unlikely(((P == U) && (W == 1)))) {
        return UndefinedInstruction("Reason: ((P == U) && (W == 1))");
    }
    single_regs = false;
    add = (U == 1);
    wback = (W == 1);
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Rn);
    imm32 = ZeroExtend(Concatenate(imm8, 0, 2), 32);
    regs = (UInt(imm8) / 2);
    if (unlikely(((n == 15) && (wback || (CurrentInstrSet() != InstrSet_ARM))))) {
        return UnpredictableInstruction("Reason: ((n == 15) && (wback || (CurrentInstrSet() != InstrSet_ARM)))");
    }
    if (unlikely((((regs == 0) || (regs > 16)) || ((d + regs) > 32)))) {
        return UnpredictableInstruction("Reason: (((regs == 0) || (regs > 16)) || ((d + regs) > 32))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vstm;
    ins.m_to_string = decode_vstm_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vstm_t1";
    ins.encoding = encoding;
    ins.d = d;
    ins.single_regs = single_regs;
    ins.regs = regs;
    ins.imm32 = imm32;
    ins.n = n;
    ins.add = add;
    ins.wback = wback;
    ins.P = P;
    ins.U = U;
    ins.D = D;
    ins.W = W;

    return ins;
}

ARMInstruction ARMDecoder::decode_vstm_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     P = get_bit(opcode, 24);
    int     U = get_bit(opcode, 23);
    int     D = get_bit(opcode, 22);
    int     W = get_bit(opcode, 21);
    int    Rn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int  imm8 = get_bits(opcode,  7,  0);
    int d = 0;
    int single_regs = 0;
    int regs = 0;
    int imm32 = 0;
    int n = 0;
    int add = 0;
    int wback = 0;

    if (unlikely((((P == 0) && (U == 0)) && (W == 0)))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely(((((P == 1) && (U == 0)) && (W == 1)) && (Rn == 13)))) {
        return SeeInstruction("VPUSH");
    }
    if (unlikely(((P == 1) && (W == 0)))) {
        return SeeInstruction("VSTR");
    }
    if (unlikely(((P == U) && (W == 1)))) {
        return UndefinedInstruction("Reason: ((P == U) && (W == 1))");
    }
    single_regs = false;
    add = (U == 1);
    wback = (W == 1);
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Rn);
    imm32 = ZeroExtend(Concatenate(imm8, 0, 2), 32);
    regs = (UInt(imm8) / 2);
    if (unlikely(((n == 15) && (wback || (CurrentInstrSet() != InstrSet_ARM))))) {
        return UnpredictableInstruction("Reason: ((n == 15) && (wback || (CurrentInstrSet() != InstrSet_ARM)))");
    }
    if (unlikely((((regs == 0) || (regs > 16)) || ((d + regs) > 32)))) {
        return UnpredictableInstruction("Reason: (((regs == 0) || (regs > 16)) || ((d + regs) > 32))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vstm;
    ins.m_to_string = decode_vstm_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vstm_a1";
    ins.encoding = encoding;
    ins.d = d;
    ins.single_regs = single_regs;
    ins.regs = regs;
    ins.imm32 = imm32;
    ins.n = n;
    ins.add = add;
    ins.wback = wback;
    ins.cond = cond;
    ins.P = P;
    ins.U = U;
    ins.D = D;
    ins.W = W;

    return ins;
}

ARMInstruction ARMDecoder::decode_vstm_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     P = get_bit(opcode, 24);
    int     U = get_bit(opcode, 23);
    int     D = get_bit(opcode, 22);
    int     W = get_bit(opcode, 21);
    int    Rn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int  imm8 = get_bits(opcode,  7,  0);
    int d = 0;
    int single_regs = 0;
    int regs = 0;
    int imm32 = 0;
    int n = 0;
    int add = 0;
    int wback = 0;

    if (unlikely((((P == 0) && (U == 0)) && (W == 0)))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely(((((P == 1) && (U == 0)) && (W == 1)) && (Rn == 13)))) {
        return SeeInstruction("VPUSH");
    }
    if (unlikely(((P == 1) && (W == 0)))) {
        return SeeInstruction("VSTR");
    }
    if (unlikely(((P == U) && (W == 1)))) {
        return UndefinedInstruction("Reason: ((P == U) && (W == 1))");
    }
    single_regs = true;
    add = (U == 1);
    wback = (W == 1);
    d = UInt(Concatenate(Vd, D, 1));
    n = UInt(Rn);
    imm32 = ZeroExtend(Concatenate(imm8, 0, 2), 32);
    regs = UInt(imm8);
    if (unlikely(((n == 15) && (wback || (CurrentInstrSet() != InstrSet_ARM))))) {
        return UnpredictableInstruction("Reason: ((n == 15) && (wback || (CurrentInstrSet() != InstrSet_ARM)))");
    }
    if (unlikely(((regs == 0) || ((d + regs) > 32)))) {
        return UnpredictableInstruction("Reason: ((regs == 0) || ((d + regs) > 32))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vstm;
    ins.m_to_string = decode_vstm_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vstm_t2";
    ins.encoding = encoding;
    ins.d = d;
    ins.single_regs = single_regs;
    ins.regs = regs;
    ins.imm32 = imm32;
    ins.n = n;
    ins.add = add;
    ins.wback = wback;
    ins.P = P;
    ins.U = U;
    ins.D = D;
    ins.W = W;

    return ins;
}

ARMInstruction ARMDecoder::decode_vstm_a2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     P = get_bit(opcode, 24);
    int     U = get_bit(opcode, 23);
    int     D = get_bit(opcode, 22);
    int     W = get_bit(opcode, 21);
    int    Rn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int  imm8 = get_bits(opcode,  7,  0);
    int d = 0;
    int single_regs = 0;
    int regs = 0;
    int imm32 = 0;
    int n = 0;
    int add = 0;
    int wback = 0;

    if (unlikely((((P == 0) && (U == 0)) && (W == 0)))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely(((((P == 1) && (U == 0)) && (W == 1)) && (Rn == 13)))) {
        return SeeInstruction("VPUSH");
    }
    if (unlikely(((P == 1) && (W == 0)))) {
        return SeeInstruction("VSTR");
    }
    if (unlikely(((P == U) && (W == 1)))) {
        return UndefinedInstruction("Reason: ((P == U) && (W == 1))");
    }
    single_regs = true;
    add = (U == 1);
    wback = (W == 1);
    d = UInt(Concatenate(Vd, D, 1));
    n = UInt(Rn);
    imm32 = ZeroExtend(Concatenate(imm8, 0, 2), 32);
    regs = UInt(imm8);
    if (unlikely(((n == 15) && (wback || (CurrentInstrSet() != InstrSet_ARM))))) {
        return UnpredictableInstruction("Reason: ((n == 15) && (wback || (CurrentInstrSet() != InstrSet_ARM)))");
    }
    if (unlikely(((regs == 0) || ((d + regs) > 32)))) {
        return UnpredictableInstruction("Reason: ((regs == 0) || ((d + regs) > 32))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vstm;
    ins.m_to_string = decode_vstm_a2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vstm_a2";
    ins.encoding = encoding;
    ins.d = d;
    ins.single_regs = single_regs;
    ins.regs = regs;
    ins.imm32 = imm32;
    ins.n = n;
    ins.add = add;
    ins.wback = wback;
    ins.cond = cond;
    ins.P = P;
    ins.U = U;
    ins.D = D;
    ins.W = W;

    return ins;
}

ARMInstruction ARMDecoder::decode_vstr_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 23);
    int     D = get_bit(opcode, 22);
    int    Rn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int  imm8 = get_bits(opcode,  7,  0);
    int single_reg = 0;
    int add = 0;
    int n = 0;
    int imm32 = 0;
    int d = 0;

    single_reg = false;
    add = (U == 1);
    imm32 = ZeroExtend(Concatenate(imm8, 0, 2), 32);
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Rn);
    if (unlikely(((n == 15) && (CurrentInstrSet() != InstrSet_ARM)))) {
        return UnpredictableInstruction("Reason: ((n == 15) && (CurrentInstrSet() != InstrSet_ARM))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vstr;
    ins.m_to_string = decode_vstr_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vstr_t1";
    ins.encoding = encoding;
    ins.single_reg = single_reg;
    ins.add = add;
    ins.n = n;
    ins.imm32 = imm32;
    ins.d = d;
    ins.U = U;
    ins.D = D;

    return ins;
}

ARMInstruction ARMDecoder::decode_vstr_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     U = get_bit(opcode, 23);
    int     D = get_bit(opcode, 22);
    int    Rn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int  imm8 = get_bits(opcode,  7,  0);
    int single_reg = 0;
    int add = 0;
    int n = 0;
    int imm32 = 0;
    int d = 0;

    single_reg = false;
    add = (U == 1);
    imm32 = ZeroExtend(Concatenate(imm8, 0, 2), 32);
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Rn);
    if (unlikely(((n == 15) && (CurrentInstrSet() != InstrSet_ARM)))) {
        return UnpredictableInstruction("Reason: ((n == 15) && (CurrentInstrSet() != InstrSet_ARM))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vstr;
    ins.m_to_string = decode_vstr_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vstr_a1";
    ins.encoding = encoding;
    ins.single_reg = single_reg;
    ins.add = add;
    ins.n = n;
    ins.imm32 = imm32;
    ins.d = d;
    ins.cond = cond;
    ins.U = U;
    ins.D = D;

    return ins;
}

ARMInstruction ARMDecoder::decode_vstr_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 23);
    int     D = get_bit(opcode, 22);
    int    Rn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int  imm8 = get_bits(opcode,  7,  0);
    int single_reg = 0;
    int add = 0;
    int n = 0;
    int imm32 = 0;
    int d = 0;

    single_reg = true;
    add = (U == 1);
    imm32 = ZeroExtend(Concatenate(imm8, 0, 2), 32);
    d = UInt(Concatenate(Vd, D, 1));
    n = UInt(Rn);
    if (unlikely(((n == 15) && (CurrentInstrSet() != InstrSet_ARM)))) {
        return UnpredictableInstruction("Reason: ((n == 15) && (CurrentInstrSet() != InstrSet_ARM))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vstr;
    ins.m_to_string = decode_vstr_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vstr_t2";
    ins.encoding = encoding;
    ins.single_reg = single_reg;
    ins.add = add;
    ins.n = n;
    ins.imm32 = imm32;
    ins.d = d;
    ins.U = U;
    ins.D = D;

    return ins;
}

ARMInstruction ARMDecoder::decode_vstr_a2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     U = get_bit(opcode, 23);
    int     D = get_bit(opcode, 22);
    int    Rn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int  imm8 = get_bits(opcode,  7,  0);
    int single_reg = 0;
    int add = 0;
    int n = 0;
    int imm32 = 0;
    int d = 0;

    single_reg = true;
    add = (U == 1);
    imm32 = ZeroExtend(Concatenate(imm8, 0, 2), 32);
    d = UInt(Concatenate(Vd, D, 1));
    n = UInt(Rn);
    if (unlikely(((n == 15) && (CurrentInstrSet() != InstrSet_ARM)))) {
        return UnpredictableInstruction("Reason: ((n == 15) && (CurrentInstrSet() != InstrSet_ARM))");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vstr;
    ins.m_to_string = decode_vstr_a2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vstr_a2";
    ins.encoding = encoding;
    ins.single_reg = single_reg;
    ins.add = add;
    ins.n = n;
    ins.imm32 = imm32;
    ins.d = d;
    ins.cond = cond;
    ins.U = U;
    ins.D = D;

    return ins;
}

ARMInstruction ARMDecoder::decode_vsub_integer_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int n = 0;

    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1)))");
    }
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vsub_integer;
    ins.m_to_string = decode_vsub_integer_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vsub_integer_t1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vsub_integer_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int n = 0;

    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1)))");
    }
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vsub_integer;
    ins.m_to_string = decode_vsub_integer_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vsub_integer_a1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vsub_floating_point_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    sz = get_bit(opcode, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int advsimd = 0;
    int m = 0;
    int regs = 0;
    int n = 0;

    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1)))");
    }
    if (unlikely((sz == 1))) {
        return UndefinedInstruction("Reason: (sz == 1)");
    }
    advsimd = true;
    esize = 32;
    elements = 2;
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vsub_floating_point;
    ins.m_to_string = decode_vsub_floating_point_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vsub_floating_point_t1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.advsimd = advsimd;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.D = D;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vsub_floating_point_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    sz = get_bit(opcode, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int advsimd = 0;
    int m = 0;
    int regs = 0;
    int n = 0;

    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1)))");
    }
    if (unlikely((sz == 1))) {
        return UndefinedInstruction("Reason: (sz == 1)");
    }
    advsimd = true;
    esize = 32;
    elements = 2;
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vsub_floating_point;
    ins.m_to_string = decode_vsub_floating_point_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vsub_floating_point_a1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.advsimd = advsimd;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.D = D;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vsub_floating_point_t2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int    sz = get_bit(opcode,  8);
    int     N = get_bit(opcode,  7);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int dp_operation = 0;
    int advsimd = 0;
    int m = 0;
    int d = 0;
    int n = 0;

    if (unlikely(((FPSCR.LEN != 0) || (FPSCR.STRIDE != 0)))) {
        return SeeInstruction("VFP vectors");
    }
    advsimd = false;
    dp_operation = (sz == 1);
    d = ((dp_operation) ? UInt(Concatenate(D, Vd, 4)) : UInt(Concatenate(Vd, D, 1)));
    n = ((dp_operation) ? UInt(Concatenate(N, Vn, 4)) : UInt(Concatenate(Vn, N, 1)));
    m = ((dp_operation) ? UInt(Concatenate(M, Vm, 4)) : UInt(Concatenate(Vm, M, 1)));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vsub_floating_point;
    ins.m_to_string = decode_vsub_floating_point_t2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vsub_floating_point_t2";
    ins.encoding = encoding;
    ins.dp_operation = dp_operation;
    ins.advsimd = advsimd;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.D = D;

    return ins;
}

ARMInstruction ARMDecoder::decode_vsub_floating_point_a2(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int  cond = get_bits(opcode, 31, 28);
    int     D = get_bit(opcode, 22);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int    sz = get_bit(opcode,  8);
    int     N = get_bit(opcode,  7);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int dp_operation = 0;
    int advsimd = 0;
    int m = 0;
    int d = 0;
    int n = 0;

    if (unlikely(((FPSCR.LEN != 0) || (FPSCR.STRIDE != 0)))) {
        return SeeInstruction("VFP vectors");
    }
    advsimd = false;
    dp_operation = (sz == 1);
    d = ((dp_operation) ? UInt(Concatenate(D, Vd, 4)) : UInt(Concatenate(Vd, D, 1)));
    n = ((dp_operation) ? UInt(Concatenate(N, Vn, 4)) : UInt(Concatenate(Vn, N, 1)));
    m = ((dp_operation) ? UInt(Concatenate(M, Vm, 4)) : UInt(Concatenate(Vm, M, 1)));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vsub_floating_point;
    ins.m_to_string = decode_vsub_floating_point_a2_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vsub_floating_point_a2";
    ins.encoding = encoding;
    ins.dp_operation = dp_operation;
    ins.advsimd = advsimd;
    ins.m = m;
    ins.d = d;
    ins.n = n;
    ins.cond = cond;
    ins.D = D;

    return ins;
}

ARMInstruction ARMDecoder::decode_vsubhn_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int n = 0;
    int elements = 0;
    int m = 0;
    int d = 0;
    int esize = 0;

    if (unlikely((size == 3))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely(((get_bit(Vn, 0) == 1) || (get_bit(Vm, 0) == 1)))) {
        return UndefinedInstruction("Reason: ((get_bit(Vn, 0) == 1) || (get_bit(Vm, 0) == 1))");
    }
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vsubhn;
    ins.m_to_string = decode_vsubhn_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vsubhn_t1";
    ins.encoding = encoding;
    ins.n = n;
    ins.elements = elements;
    ins.m = m;
    ins.d = d;
    ins.esize = esize;
    ins.D = D;
    ins.size = size;

    return ins;
}

ARMInstruction ARMDecoder::decode_vsubhn_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int n = 0;
    int elements = 0;
    int m = 0;
    int d = 0;
    int esize = 0;

    if (unlikely((size == 3))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely(((get_bit(Vn, 0) == 1) || (get_bit(Vm, 0) == 1)))) {
        return UndefinedInstruction("Reason: ((get_bit(Vn, 0) == 1) || (get_bit(Vm, 0) == 1))");
    }
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vsubhn;
    ins.m_to_string = decode_vsubhn_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vsubhn_a1";
    ins.encoding = encoding;
    ins.n = n;
    ins.elements = elements;
    ins.m = m;
    ins.d = d;
    ins.esize = esize;
    ins.D = D;
    ins.size = size;

    return ins;
}

ARMInstruction ARMDecoder::decode_vsubl_vsubw_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 28);
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int    op = get_bit(opcode,  8);
    int     N = get_bit(opcode,  7);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int is_vsubw = 0;
    int esize = 0;
    int m = 0;
    int n = 0;
    int unsigned_ = 0;

    if (unlikely((size == 3))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely(((get_bit(Vd, 0) == 1) || ((op == 1) && (get_bit(Vn, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((get_bit(Vd, 0) == 1) || ((op == 1) && (get_bit(Vn, 0) == 1)))");
    }
    unsigned_ = (U == 1);
    esize = (8 << UInt(size));
    elements = (64 / esize);
    is_vsubw = (op == 1);
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vsubl_vsubw;
    ins.m_to_string = decode_vsubl_vsubw_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vsubl_vsubw_t1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.is_vsubw = is_vsubw;
    ins.esize = esize;
    ins.m = m;
    ins.n = n;
    ins.unsigned_ = unsigned_;
    ins.U = U;
    ins.D = D;
    ins.size = size;
    ins.op = op;

    return ins;
}

ARMInstruction ARMDecoder::decode_vsubl_vsubw_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     U = get_bit(opcode, 24);
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int    op = get_bit(opcode,  8);
    int     N = get_bit(opcode,  7);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int is_vsubw = 0;
    int esize = 0;
    int m = 0;
    int n = 0;
    int unsigned_ = 0;

    if (unlikely((size == 3))) {
        return SeeInstruction("Related encodings");
    }
    if (unlikely(((get_bit(Vd, 0) == 1) || ((op == 1) && (get_bit(Vn, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((get_bit(Vd, 0) == 1) || ((op == 1) && (get_bit(Vn, 0) == 1)))");
    }
    unsigned_ = (U == 1);
    esize = (8 << UInt(size));
    elements = (64 / esize);
    is_vsubw = (op == 1);
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vsubl_vsubw;
    ins.m_to_string = decode_vsubl_vsubw_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vsubl_vsubw_a1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.is_vsubw = is_vsubw;
    ins.esize = esize;
    ins.m = m;
    ins.n = n;
    ins.unsigned_ = unsigned_;
    ins.U = U;
    ins.D = D;
    ins.size = size;
    ins.op = op;

    return ins;
}

ARMInstruction ARMDecoder::decode_vswp_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 19, 18);
    int    Vd = get_bits(opcode, 15, 12);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int regs = 0;

    if (unlikely((size != 0))) {
        return UndefinedInstruction("Reason: (size != 0)");
    }
    if (unlikely(((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)))");
    }
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vswp;
    ins.m_to_string = decode_vswp_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vswp_t1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.regs = regs;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vswp_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 19, 18);
    int    Vd = get_bits(opcode, 15, 12);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int m = 0;
    int d = 0;
    int regs = 0;

    if (unlikely((size != 0))) {
        return UndefinedInstruction("Reason: (size != 0)");
    }
    if (unlikely(((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)))");
    }
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vswp;
    ins.m_to_string = decode_vswp_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vswp_a1";
    ins.encoding = encoding;
    ins.m = m;
    ins.d = d;
    ins.regs = regs;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vtbl_vtbx_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int   len = get_bits(opcode,  9,  8);
    int     N = get_bit(opcode,  7);
    int    op = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int m = 0;
    int length = 0;
    int is_vtbl = 0;
    int d = 0;
    int n = 0;

    is_vtbl = (op == 0);
    length = (UInt(len) + 1);
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    if (unlikely(((n + length) > 32))) {
        return UnpredictableInstruction("Reason: ((n + length) > 32)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vtbl_vtbx;
    ins.m_to_string = decode_vtbl_vtbx_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vtbl_vtbx_t1";
    ins.encoding = encoding;
    ins.m = m;
    ins.length = length;
    ins.is_vtbl = is_vtbl;
    ins.d = d;
    ins.n = n;
    ins.D = D;
    ins.op = op;

    return ins;
}

ARMInstruction ARMDecoder::decode_vtbl_vtbx_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int   len = get_bits(opcode,  9,  8);
    int     N = get_bit(opcode,  7);
    int    op = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int m = 0;
    int length = 0;
    int is_vtbl = 0;
    int d = 0;
    int n = 0;

    is_vtbl = (op == 0);
    length = (UInt(len) + 1);
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    if (unlikely(((n + length) > 32))) {
        return UnpredictableInstruction("Reason: ((n + length) > 32)");
    }
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vtbl_vtbx;
    ins.m_to_string = decode_vtbl_vtbx_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vtbl_vtbx_a1";
    ins.encoding = encoding;
    ins.m = m;
    ins.length = length;
    ins.is_vtbl = is_vtbl;
    ins.d = d;
    ins.n = n;
    ins.D = D;
    ins.op = op;

    return ins;
}

ARMInstruction ARMDecoder::decode_vtrn_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 19, 18);
    int    Vd = get_bits(opcode, 15, 12);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int regs = 0;
    int elements = 0;
    int m = 0;
    int d = 0;
    int esize = 0;

    if (unlikely((size == 3))) {
        return UndefinedInstruction("Reason: (size == 3)");
    }
    if (unlikely(((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)))");
    }
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vtrn;
    ins.m_to_string = decode_vtrn_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vtrn_t1";
    ins.encoding = encoding;
    ins.regs = regs;
    ins.elements = elements;
    ins.m = m;
    ins.d = d;
    ins.esize = esize;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vtrn_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 19, 18);
    int    Vd = get_bits(opcode, 15, 12);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int regs = 0;
    int elements = 0;
    int m = 0;
    int d = 0;
    int esize = 0;

    if (unlikely((size == 3))) {
        return UndefinedInstruction("Reason: (size == 3)");
    }
    if (unlikely(((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)))");
    }
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vtrn;
    ins.m_to_string = decode_vtrn_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vtrn_a1";
    ins.encoding = encoding;
    ins.regs = regs;
    ins.elements = elements;
    ins.m = m;
    ins.d = d;
    ins.esize = esize;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vtst_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int n = 0;

    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1)))");
    }
    if (unlikely((size == 3))) {
        return UndefinedInstruction("Reason: (size == 3)");
    }
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vtst;
    ins.m_to_string = decode_vtst_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vtst_t1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vtst_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 21, 20);
    int    Vn = get_bits(opcode, 19, 16);
    int    Vd = get_bits(opcode, 15, 12);
    int     N = get_bit(opcode,  7);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int elements = 0;
    int d = 0;
    int esize = 0;
    int m = 0;
    int regs = 0;
    int n = 0;

    if (unlikely(((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && (((get_bit(Vd, 0) == 1) || (get_bit(Vn, 0) == 1)) || (get_bit(Vm, 0) == 1)))");
    }
    if (unlikely((size == 3))) {
        return UndefinedInstruction("Reason: (size == 3)");
    }
    esize = (8 << UInt(size));
    elements = (64 / esize);
    d = UInt(Concatenate(D, Vd, 4));
    n = UInt(Concatenate(N, Vn, 4));
    m = UInt(Concatenate(M, Vm, 4));
    regs = (((Q == 0)) ? 1 : 2);
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vtst;
    ins.m_to_string = decode_vtst_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vtst_a1";
    ins.encoding = encoding;
    ins.elements = elements;
    ins.d = d;
    ins.esize = esize;
    ins.m = m;
    ins.regs = regs;
    ins.n = n;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vuzp_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 19, 18);
    int    Vd = get_bits(opcode, 15, 12);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int d = 0;
    int m = 0;
    int quadword_operation = 0;
    int esize = 0;

    if (unlikely(((size == 3) || ((Q == 0) && (size == 2))))) {
        return UndefinedInstruction("Reason: ((size == 3) || ((Q == 0) && (size == 2)))");
    }
    if (unlikely(((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)))");
    }
    quadword_operation = (Q == 1);
    esize = (8 << UInt(size));
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vuzp;
    ins.m_to_string = decode_vuzp_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vuzp_t1";
    ins.encoding = encoding;
    ins.d = d;
    ins.m = m;
    ins.quadword_operation = quadword_operation;
    ins.esize = esize;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vuzp_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 19, 18);
    int    Vd = get_bits(opcode, 15, 12);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int d = 0;
    int m = 0;
    int quadword_operation = 0;
    int esize = 0;

    if (unlikely(((size == 3) || ((Q == 0) && (size == 2))))) {
        return UndefinedInstruction("Reason: ((size == 3) || ((Q == 0) && (size == 2)))");
    }
    if (unlikely(((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)))");
    }
    quadword_operation = (Q == 1);
    esize = (8 << UInt(size));
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vuzp;
    ins.m_to_string = decode_vuzp_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vuzp_a1";
    ins.encoding = encoding;
    ins.d = d;
    ins.m = m;
    ins.quadword_operation = quadword_operation;
    ins.esize = esize;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vzip_t1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 19, 18);
    int    Vd = get_bits(opcode, 15, 12);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int d = 0;
    int m = 0;
    int quadword_operation = 0;
    int esize = 0;

    if (unlikely(((size == 3) || ((Q == 0) && (size == 2))))) {
        return UndefinedInstruction("Reason: ((size == 3) || ((Q == 0) && (size == 2)))");
    }
    if (unlikely(((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)))");
    }
    quadword_operation = (Q == 1);
    esize = (8 << UInt(size));
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vzip;
    ins.m_to_string = decode_vzip_t1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vzip_t1";
    ins.encoding = encoding;
    ins.d = d;
    ins.m = m;
    ins.quadword_operation = quadword_operation;
    ins.esize = esize;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}

ARMInstruction ARMDecoder::decode_vzip_a1(uint32_t opcode, Disassembler::ARMInstrSize ins_size, ARMEncoding encoding) {
    int     D = get_bit(opcode, 22);
    int  size = get_bits(opcode, 19, 18);
    int    Vd = get_bits(opcode, 15, 12);
    int     Q = get_bit(opcode,  6);
    int     M = get_bit(opcode,  5);
    int    Vm = get_bits(opcode,  3,  0);
    int d = 0;
    int m = 0;
    int quadword_operation = 0;
    int esize = 0;

    if (unlikely(((size == 3) || ((Q == 0) && (size == 2))))) {
        return UndefinedInstruction("Reason: ((size == 3) || ((Q == 0) && (size == 2)))");
    }
    if (unlikely(((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1))))) {
        return UndefinedInstruction("Reason: ((Q == 1) && ((get_bit(Vd, 0) == 1) || (get_bit(Vm, 0) == 1)))");
    }
    quadword_operation = (Q == 1);
    esize = (8 << UInt(size));
    d = UInt(Concatenate(D, Vd, 4));
    m = UInt(Concatenate(M, Vm, 4));
    ARMInstruction ins = ARMInstruction::create();
    ins.opcode = opcode;
    ins.ins_size = ins_size;
    ins.id = vzip;
    ins.m_to_string = decode_vzip_a1_to_string;
    ins.m_decoded_by = "ARMDecoder::decode_vzip_a1";
    ins.encoding = encoding;
    ins.d = d;
    ins.m = m;
    ins.quadword_operation = quadword_operation;
    ins.esize = esize;
    ins.D = D;
    ins.size = size;
    ins.Q = Q;

    return ins;
}


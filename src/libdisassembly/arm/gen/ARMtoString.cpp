// Warning! autogenerated file, do what you want.
#include <string>
#include <cstdlib>
#include <cstdio>

#include "arm/ARMUtilities.h"
#include "arm/ARMDisassembler.h"
#include "arm/gen/ARMDecodingTable.h"
#include "Utilities.h"

using namespace Disassembler;
using namespace std;

string banked_reg(const ARMInstruction *ins) {
    string tmp = "UNPREDICTABLE";
    if (ins->read_spsr == 0) {
        switch(ins->SYSm) {
            case 0: // 0b0
                tmp = "R8_usr";
                break;
            case 1: // 0b1
                tmp = "R9_usr";
                break;
            case 2: // 0b10
                tmp = "R10_usr";
                break;
            case 3: // 0b11
                tmp = "R11_usr";
                break;
            case 4: // 0b100
                tmp = "R12_usr";
                break;
            case 5: // 0b101
                tmp = "SP_usr";
                break;
            case 6: // 0b110
                tmp = "LR_usr";
                break;
            case 8: // 0b1000
                tmp = "R8_fiq";
                break;
            case 9: // 0b1001
                tmp = "R9_fiq";
                break;
            case 10: // 0b1010
                tmp = "R10_fiq";
                break;
            case 11: // 0b1011
                tmp = "R11_fiq";
                break;
            case 12: // 0b1100
                tmp = "R12_fiq";
                break;
            case 13: // 0b1101
                tmp = "SP_fiq";
                break;
            case 14: // 0b1110
                tmp = "LR_fiq";
                break;
            case 16: // 0b10000
                tmp = "LR_irq";
                break;
            case 17: // 0b10001
                tmp = "SP_irq";
                break;
            case 18: // 0b10010
                tmp = "LR_svc";
                break;
            case 19: // 0b10011
                tmp = "SP_svc";
                break;
            case 20: // 0b10100
                tmp = "LR_abt";
                break;
            case 21: // 0b10101
                tmp = "SP_abt";
                break;
            case 22: // 0b10110
                tmp = "LR_und";
                break;
            case 23: // 0b10111
                tmp = "SP_und";
                break;
            case 28: // 0b11100
                tmp = "LR_mon";
                break;
            case 29: // 0b11101
                tmp = "SP_mon";
                break;
            case 30: // 0b11110
                tmp = "ELR_hyp";
                break;
            case 31: // 0b11111
                tmp = "SP_hyp";
                break;
            default:
                tmp = "UNPREDICTABLE";
                break;
        }
    } else {
        switch(ins->SYSm) {
                case 14: // 0b01110
                    tmp = "SPSR_fiq";
                    break;
                case 16: // 0b10000
                    tmp = "SPSR_irq";
                    break;
                case 18: // 0b10010
                    tmp = "SPSR_svc";
                    break;
                case 20: // 0b10100
                    tmp = "SPSR_abt";
                    break;
                case 22: // 0b10110
                    tmp = "SPSR_und";
                    break;
                case 28: // 0b11100
                    tmp = "SPSR_mon";
                    break;
                case 30: // 0b11110
                    tmp = "SPSR_hyp";
                    break;
                default:
                    tmp = "UNPREDICTABLE";
                    break;
        }
    }

    return tmp;
}

string effect_str(const ARMInstruction *ins) {
    if (ins->enable)
        return "IE";

    if (ins->disable)
        return "ID";

    return "";
}

string align_str(const ARMInstruction *ins) {
    switch(ins->id) {
        case vst4_multiple_4_element_structures:
        case vst3_multiple_3_element_structures:
        case vst1_multiple_single_elements:
        case vst2_multiple_2_element_structures:
        case vld1_multiple_single_elements:         // VLD1 (multiple single elements)
        case vld2_multiple_2_element_structures:    // VLD2 (multiple 2-element structures)
        case vld4_multiple_4_element_structures:    // VLD4 (multiple 4-element structures)
            switch(get_bits(ins->opcode, 5, 4)) { // align
                case 0:  return "";
                case 1:  return ":0x40";
                case 2:  return ":0x80";
                case 3:  return ":0x100";
                default: return "";
            }

        case vld1_single_element_to_one_lane:   // VLD1 (single element to one lane)
        case vld1_single_element_to_all_lanes:  // VLD1 (single element to all lanes)
            switch(ins->size) {
                case 1:  return get_bit(ins->opcode, 4) ? ":0x10" : "";  // a
                case 2:  return get_bit(ins->opcode, 4) ? ":0x20" : "";  // a
                default: return  "";
            }

        case vst2_single_2_element_structure_from_one_lane:
        case vst1_single_element_from_one_lane:
        case vld2_single_2_element_structure_to_one_lane:   // VLD2 (single 2-element structure to one lane)
            switch(ins->alignment) {
                case 2:  return ":0x10";
                case 4:  return ":0x20";
                case 8:  return ":0x40";
                default: return  "";
            }

        case vld2_single_2_element_structure_to_all_lanes:  // VLD2 (single 2-element structure to all lanes)
            switch(ins->size) {
                case 0:  return get_bit(ins->opcode, 4) ? ":0x10" : "";
                case 1:  return get_bit(ins->opcode, 4) ? ":0x20" : "";
                case 2:  return get_bit(ins->opcode, 4) ? ":0x40" : "";
                default: return  "";
            }

        case vld3_multiple_3_element_structures:    // VLD3 (multiple 3-element structures)
            switch(get_bits(ins->opcode, 5, 4)) {
                case 1:   return ":0x40";
                default: return  "";
            }

        case vst4_single_4_element_structure_from_one_lane:
        case vld4_single_4_element_structure_to_one_lane:   // VLD4 (single 4-element structure to one lane)
            switch(ins->alignment) {
                case 2:  return ":0x10";
                case 4:  return ":0x20";
                case 8:  return ":0x40";
                case 16: return ":0x80";
                default: return  "";
            }

        case vld4_single_4_element_structure_to_all_lanes:  // VLD4 (single 4-element structure to all lanes)
            switch(ins->size) {
                case 0:  return get_bit(ins->opcode, 4) ? ":0x20" : "";
                case 1:  return get_bit(ins->opcode, 4) ? ":0x40" : "";
                case 2:  return get_bit(ins->opcode, 4) ? ":0x40" : "";
                case 3:  return get_bit(ins->opcode, 4) ? ":0x80" : "";
                default: return  "";
            }

        default:
            break;
    }

    return "missing_id_align_str";
}

string range(unsigned i, unsigned n, const string &pre) {
    if (n == 0) {
        return pre + to_string(i);
    }

    string tmp = "";
    while (i < n - 1) {
        tmp += pre + to_string(i) + ", ";
        i++;
    }

    tmp += pre + to_string(i);

    return tmp;
}

string list_str(const ARMInstruction *ins) {
    switch(ins->id) {
        case vldm: {
            // Get the value of imm8.
            unsigned n = ins->imm32 >> 2;
            if (!ins->single_regs) {
                n /= 2;
            }

            return "{" + range(ins->d, ins->d + n, ins->single_regs ? "S" : "D") + "}";
        }

        case vld3_multiple_3_element_structures:
            switch(ins->type) {
                case 4:
                    return "{D" + to_string(ins->d) +
                        ", D" + to_string(ins->d + 1) +
                        ", D" + to_string(ins->d + 2) +
                        "}";
                case 5:
                    return "{D" + to_string(ins->d) +
                        ", D" + to_string(ins->d + 2) +
                        ", D" + to_string(ins->d + 4) +
                        "}";
                default:
                    return "INVALID:" + to_string(ins->type);
            }
            break;

        case vst3_single_3_element_structure_from_one_lane:
        case vld3_single_3_element_structure_to_one_lane:
            return "{D" + to_string(ins->d) + "["  + to_string(ins->index) + "], " +
                    "D" + to_string(ins->d + ins->inc) + "["  + to_string(ins->index) + "], " +
                    "D" + to_string(ins->d + ins->inc * 2) + "["  + to_string(ins->index) + "]" + "}";

        case vld3_single_3_element_structure_to_all_lanes:
            return "{D" + to_string(ins->d) + "[], " +
                    "D" + to_string(ins->d + ins->inc) + "[], " +
                    "D" + to_string(ins->d + ins->inc * 2) + "[]" + "}";

        case vld4_multiple_4_element_structures:
            return "{D" + to_string(ins->d) + ", " +
                    "D" + to_string(ins->d + ins->inc) + ", " +
                    "D" + to_string(ins->d + ins->inc * 2) + ", " +
                    "D" + to_string(ins->d + ins->inc * 3) + "}";

        case vst4_single_4_element_structure_from_one_lane:
        case vld4_single_4_element_structure_to_one_lane:
            return "{D" + to_string(ins->d) + "["  + to_string(ins->index) + "], " +
                    "D" + to_string(ins->d + ins->inc) + "["  + to_string(ins->index) + "], " +
                    "D" + to_string(ins->d + ins->inc * 2) + "["  + to_string(ins->index) + "], " +
                    "D" + to_string(ins->d + ins->inc * 3) + "["  + to_string(ins->index) + "]" + "}";

        case vld4_single_4_element_structure_to_all_lanes:
            return "{D" + to_string(ins->d) + "[], " +
                    "D" + to_string(ins->d + ins->inc) + "[], " +
                    "D" + to_string(ins->d + ins->inc * 2) + "[], " +
                    "D" + to_string(ins->d + ins->inc * 3) + "[]" + "}";

        case vld2_single_2_element_structure_to_all_lanes:
            return "{D" + to_string(ins->d) + "[], D" + to_string(ins->d + ins->inc) + "[]}";

        case vst2_single_2_element_structure_from_one_lane:
        case vld2_single_2_element_structure_to_one_lane:
            return "{D" + to_string(ins->d) + "["  + to_string(ins->index) + "], D" + to_string(ins->d + ins->inc) + "["  + to_string(ins->index) + "]}";

        case vld1_single_element_to_all_lanes:
            if (!ins->T) {
                return "{D" + to_string(ins->d) + "[]}";
            }
            return "{D" + to_string(ins->d) + "[], D" + to_string(ins->d + 1) + "[]}";

        case vst1_single_element_from_one_lane:
        case vld1_single_element_to_one_lane:
            return "{D" + to_string(ins->d) + "["  + to_string(ins->index) + "]}";

        case vld2_multiple_2_element_structures:
        case vld1_multiple_single_elements:
        case vst1_multiple_single_elements:
        case vst4_multiple_4_element_structures:
        case vst2_multiple_2_element_structures:
        case vst3_multiple_3_element_structures:
            switch(ins->type) {
                case 1:
                    return "{D" + to_string(ins->d) +
                        ", D" + to_string(ins->d + 2) +
                        ", D" + to_string(ins->d + 4) +
                        ", D" + to_string(ins->d + 6) +
                        "}";
                case 5:
                    return "{D" + to_string(ins->d) +
                        ", D" + to_string(ins->d + 2) +
                        ", D" + to_string(ins->d + 4) +
                        "}";
                case 8:
                    return "{D" + to_string(ins->d) +
                        ", D" + to_string(ins->d + 1) +
                        "}";
                case 9:
                    return "{D" + to_string(ins->d) +
                        ", D" + to_string(ins->d + 2) +
                        "}";
                case 3:
                    return "{D" + to_string(ins->d) +
                        ", D" + to_string(ins->d + 1) +
                        ", D" + to_string(ins->d + 2) +
                        ", D" + to_string(ins->d + 3) +
                        "}";
                case 7:
                    return "{D" + to_string(ins->d) + "}";
                case 10:
                    return "{D" + to_string(ins->d) +
                        ", D" + to_string(ins->d + 1) +
                        "}";
                case 4:
                case 6:
                    return "{D" + to_string(ins->d) +
                        ", D" + to_string(ins->d + 1) +
                        ", D" + to_string(ins->d + 2) +
                        "}";
                case 0:
                case 2:
                    return "{D" + to_string(ins->d) +
                        ", D" + to_string(ins->d + 1) +
                        ", D" + to_string(ins->d + 2) +
                        ", D" + to_string(ins->d + 3) +
                        "}";
                default:
                    return "INVALID" + to_string(ins->type);
            }
            break;
        case vtbl_vtbx:
            switch(ins->length - 1) {
                case 0:
                    return "{D" + to_string(ins->n) + "}";
                case 1:
                    return "{D" + to_string(ins->n) +
                        ", D" + to_string(ins->n + 1) + "}";
                case 2:
                    return "{D" + to_string(ins->n) +
                    ", D" + to_string(ins->n + 1) +
                    ", D" + to_string(ins->n + 2) + "}";
                case 3:
                    return "{D" + to_string(ins->n) +
                    ", D" + to_string(ins->n + 1) +
                    ", D" + to_string(ins->n + 2) +
                    ", D" + to_string(ins->n + 3) + "}";
                default:
                    return "INVALID";
            }
    }

    unsigned first_reg = first_reg = ins->d;
    unsigned n_regs = ins->imm32 >> 2;
    string reg_type = "S";

    if (ins->encoding == eEncodingT1 || ins->encoding == eEncodingA1) {
        n_regs /= 2;
        reg_type = "D";
    }

    string acum;
    for(unsigned i = first_reg; i < first_reg + n_regs; ++i) {
        acum += reg_type + to_string(i);
        if (i != (first_reg + n_regs - 1))
            acum += ", ";
    }

    return "{" + acum + "}";
}

string amode_str(const ARMInstruction *ins) {
    if (ins->P == 0 && ins->U == 0) return "DA";
    else if (ins->P == 1 && ins->U == 0) return "DB";
    else if (ins->P == 0 && ins->U == 1) return "IA";
    else if (ins->P == 1 && ins->U == 1) return "IB";
    return "INVALID";
}

string IA_str(const ARMInstruction *ins) {
    return ins->increment ? "IA" : "DB";
}

string iflags_str(const ARMInstruction *ins) {
    string out;
    if (ins->affectA) out += "A";
    if (ins->affectI) out += "I";
    if (ins->affectF) out += "F";
    return out;
}

string S_str(const ARMInstruction *ins) {
    return ins->setflags ? "S" : "";
}

bool is_conditional_thumb(const ARMInstruction *ins) {
    switch (ins->id) {
    case b:
    case cbnz_cbz:
        return true;
    }

    return false;
}

string c_str(const ARMInstruction *ins) {
    if (EncodingIsThumb(ins->encoding) && !is_conditional_thumb(ins))
        return "";

    return ins->cond != COND_AL ? ARMCondCodeToString((cond_t) ins->cond) : "";
}

string B_str(const ARMInstruction *ins) {
    return ins->B ? "B" : "";
}

string N_str(const ARMInstruction *ins) {
    return ins->nonzero ? "N" : "";
}

string W_str(const ARMInstruction *ins) {
    return ins->is_pldw ? "W" : "";
}

string x_str(const ARMInstruction *ins) {
    return ins->n_high ? "T" : "B";
}

string y_str(const ARMInstruction *ins) {
    return ins->m_high ? "T" : "B";
}

string X_str(const ARMInstruction *ins) {
    return ins->m_swap ? "X" : "";
}

string R_str(const ARMInstruction *ins) {
    return ins->round ? "R" : "";
}

string mode_str(const ARMInstruction *ins) {
    switch (ins->id) {
        case vldm: // VLDM
        case vstm: // VSTM
            if (ins->P == 0 && ins->U == 1)
                return "IA";

            if (ins->P == 1 && ins->U == 0)
                return "DB";

            break;
        default:
            break;
    }

    return "INVALID";
}

string op_str(const ARMInstruction *ins) {
    switch (ins->id) {
        case vpmax_vpmin_floating_point: // VPMAX, VPMIN (floating-point)
        case vpmax_vpmin_integer: // VPMAX, VPMIN (integer)
            return ins->op ? "MIN" : "MAX";
        case vqdmlal_vqdmlsl: // VQDMLAL, VQDMLSL
            return ins->op ? "MLSL" : "MLAL";
        case vtbl_vtbx: // VTBL, VTBX
            return ins->op ? "TBX" : "TBL";

        default:
            break;
    }

    return "INVALID";
}

string dt_str(const ARMInstruction *ins) {
    switch (ins->id) {
        case vrsqrte:
            return ((ins->floating_point) ? "F" : "U") + to_string(ins->esize);

        case vrhadd:
            return (ins->unsigned_ ? "U" : "S") + to_string(ins->esize);

        case vrecpe:
            return (ins->floating_point) ? "F32" : "U32";

        case vpadal:
        case vpaddl:
            return (ins->unsigned_ ? "U" : "S") + to_string(ins->esize);

        case vmla_vmlal_vmls_vmlsl_integer:
            if (ins->encoding == eEncodingT1 || ins->encoding == eEncodingA1) {
                switch (ins->size) {
                    case 0: return "I8";
                    case 1: return "I16";
                    case 2: return "I32";
                    default: return "INVALID";
                }
            }

            if (ins->U) {
                switch (ins->size) {
                    case 0: return "U8";
                    case 1: return "U16";
                    case 2: return "U32";
                    default: return "INVALID";
                }
            } else {
                switch (ins->size) {
                    case 0: return "S8";
                    case 1: return "S16";
                    case 2: return "S32";
                    default: return "INVALID";
                }
            }
        case vmla_vmlal_vmls_vmlsl_by_scalar:
            if (ins->encoding == eEncodingT1 || ins->encoding == eEncodingA1) {
                return (ins->floating_point ? "F" : "I") + string(ins->size == 1 ? "16" : "32");
            }

            return (ins->unsigned_ ? "U" : "S") + string(ins->size == 1 ? "16" : "32");

        case vmax_vmin_integer:
        case vhadd_vhsub:
        case vsubl_vsubw:
            if (ins->U) {
                switch (ins->size) {
                    case 0: return "U8";
                    case 1: return "U16";
                    case 2: return "U32";
                    default: return "INVALID";
                }
            } else {
                switch (ins->size) {
                    case 0: return "S8";
                    case 1: return "S16";
                    case 2: return "S32";
                    default: return "INVALID";
                }
            }
        case vclz:
            switch (ins->size) {
                case 0: return "I8";
                case 1: return "I16";
                case 2: return "I32";
                default: return "INVALID";
            }
        case vcls:
        case vqabs:
            switch (ins->size) {
                case 0: return "S8";
                case 1: return "S16";
                case 2: return "S32";
                default: return "INVALID";
            }
        case vqadd:
            return (ins->unsigned_ ? "U" : "S") + to_string(ins->esize);

        case vceq_immediate_0:
            return (ins->floating_point ? "F" : "I") + to_string(ins->esize);
        case vcgt_immediate_0:
        case vcle_immediate_0:
        case vclt_immediate_0:
        case vcge_immediate_0:
            return (ins->floating_point ? "F" : "S") + to_string(ins->esize);

        case vcgt_register:
        case vcge_register:
            if (ins->encoding == eEncodingT1 || ins->encoding == eEncodingA1) {
                return (ins->U ? "U" : "S") + to_string(ins->esize);
            }

            return "F32";

        case vceq_register: // VCEQ (register)
            return (ins->int_operation ? "I" : "F") + to_string(ins->esize);

        case vbic_immediate:
        case vmov_immediate:
        case vmvn_immediate:
        case vorr_immediate:
            if (ins->cmode <= 7 || (ins->cmode >= 12 && ins->cmode <= 13))
                return "I32";

            else if (ins->cmode >= 8 && ins->cmode <= 11)
                return "I16";

            else if (ins->op == 0 && ins->cmode == 14)
                return "I8";

            else if (ins->cmode == 15)
                return "F32";

            else
                return "I64";

        case vaddl_vaddw:
            if      (ins->U == 0 && ins->size == 0) return "S8";
            else if (ins->U == 0 && ins->size == 1) return "S16";
            else if (ins->U == 0 && ins->size == 2) return "S32";
            else if (ins->U == 1 && ins->size == 0) return "U8";
            else if (ins->U == 1 && ins->size == 1) return "U16";
            else if (ins->U == 1 && ins->size == 2) return "U32";
            else return "INVALID";
        case vsub_integer:
        case vadd_integer: // VADD (integer)
            switch (ins->size) {
                case 0: return "I8";
                case 1: return "I16";
                case 2: return "I32";
                case 3: return "I64";
                default: return "INVALID";
            }
        case vaba_vabal: // VABA, VABAL
        case vabd_vabdl_integer: // VABD, VABDL (integer)
        case vpmax_vpmin_integer: // VPMAX, VPMIN (integer)
                 if (ins->size == 0 && ins->U == 0) return "S8";
            else if (ins->size == 1 && ins->U == 0) return "S16";
            else if (ins->size == 2 && ins->U == 0) return "S32";
            else if (ins->size == 0 && ins->U == 1) return "U8";
            else if (ins->size == 1 && ins->U == 1) return "U16";
            else if (ins->size == 2 && ins->U == 1) return "U32";

            break;
        case vneg:
        case vabs: // VABS
            if (ins->encoding == eEncodingT1 || ins->encoding == eEncodingA1) {
                return (ins->floating_point ? "F" : "S") + to_string(ins->esize);
            }
            return ins->dp_operation ? "F64" : "F32";
        case vaddhn: // VADDHN
            switch (ins->size) {
                case 0:
                    return "I16";
                case 1:
                    return "I32";
                case 2:
                    return "I64";
                default:
                    break;
            }

            break;
        case vmov_scalar_to_arm_core_register: // VMOV (scalar to ARM core register)
            if (ins->U == 0 && get_bit(ins->opc1, 1) == 1)
                return "S8";
            else if (ins->U == 0 && get_bit(ins->opc1, 1) == 0 && get_bit(ins->opc2, 0) == 1)
                return "S16";
            else if (ins->U == 1 && get_bit(ins->opc1, 1) == 1)
                return "U8";
            else if (ins->U == 1 && get_bit(ins->opc1, 1) == 0 && get_bit(ins->opc2, 0) == 1)
                return "U16";
            else if (ins->U == 0 && get_bit(ins->opc1, 1) == 0 && ins->opc2 == 0)
                return "32";

            break;
        case vmovl: // VMOVL
            return (ins->unsigned_ ? "U" : "S") + to_string(ins->esize);

        case vmovn: // VMOVN
            switch (ins->size) {
                case 0:
                    return "I16";
                case 1:
                    return "I32";
                case 2:
                    return "I64";
                default:
                    break;
            }

            break;
        case vmul_vmull_by_scalar: // VMUL, VMULL (by scalar)
            if (ins->encoding == eEncodingT1 || ins->encoding == eEncodingA1) {
                return (ins->floating_point ? "F" : "I") + to_string(ins->esize);
            }

            return (ins->unsigned_ ? "U" : "S") + to_string(ins->esize);

        case vmul_vmull_integer_and_polynomial: // VMUL, VMULL (integer and polynomial)
            if (ins->encoding == eEncodingT1 || ins->encoding == eEncodingA1) {
                return (ins->polynomial ? "P" : "I") + to_string(ins->esize);
            }

            return (ins->polynomial ? "P" : (ins->unsigned_ ? "U" : "S")) + to_string(ins->esize);

        case vpadd_integer: // VPADD (integer)
            switch (ins->size) {
                case 0:
                    return "I8";
                case 1:
                    return "I16";
                case 2:
                    return "I32";
                default:
                    break;
            }

            break;
        case vqneg:
            switch (ins->size) {
                case 0:
                    return "S8";
                case 1:
                    return "S16";
                case 2:
                    return "S32";
                default:
                    break;
            }
            break;
        case vqdmlal_vqdmlsl: // VQDMLAL, VQDMLSL
        case vqdmull: // VQDMULL
        case vqdmulh:
        case vqrdmulh:
            switch (ins->size) {
                case 1:
                    return "S16";
                case 2:
                    return "S32";
                default:
                    break;
            }

            break;
        case vraddhn: // VRADDHN
            switch (ins->size) {
                case 0:
                    return "I16";
                case 1:
                    return "I32";
                case 2:
                    return "I64";
                default:
                    break;
            }

            break;
        case vrsubhn: // VRSUBHN
            switch (ins->size) {
                case 0:
                    return "I16";
                case 1:
                    return "I32";
                case 2:
                    return "I64";
                default:
                    break;
            }

            break;
        case vsubhn: // VSUBHN
            switch (ins->size) {
                case 0:
                    return "I16";
                case 1:
                    return "I32";
                case 2:
                    return "I64";
                default:
                    break;
            }

            break;
        default:
            break;
    }

    return "INVALID";
}

string U_str(const ARMInstruction *ins) {
    switch (ins->id) {
        case vqmovn_vqmovun: // VQMOVN, VQMOVUN
            return ins->op == 1 ? "U" : "";
        case vqrshrn_vqrshrun: // VQRSHRN, VQRSHRUN
        case vqshrn_vqshrun: // VQSHRN, VQSHRUN
            return ins->U == 1 ? "U" : "";

        default:
            break;
    }

    return "INVALID";
}

string size_str(const ARMInstruction *ins) {
    switch (ins->id) {
        case vst3_single_3_element_structure_from_one_lane:
        case vst2_single_2_element_structure_from_one_lane:
        case vst1_single_element_from_one_lane:
        case vst1_multiple_single_elements:
        case vst2_multiple_2_element_structures:
        case vst3_multiple_3_element_structures:
        case vst4_multiple_4_element_structures:
        case vst4_single_4_element_structure_from_one_lane:
        case vsri:
        case vsra:
        case vsli:
        case vshr:
        case vshl_immediate:
        case vshl_register:
        case vrsra:
        case vrshl:
        case vrshr:
        case vrev16_vrev32_vrev64:
        case vqsub:
        case vqshl_vqshlu_immediate:
            return to_string(ins->esize);

        case vld1_single_element_to_one_lane:
        case vld1_single_element_to_all_lanes:
        case vld2_multiple_2_element_structures:
        case vld2_single_2_element_structure_to_one_lane:
        case vld2_single_2_element_structure_to_all_lanes:
        case vld3_multiple_3_element_structures:
        case vld3_single_3_element_structure_to_one_lane:
        case vld3_single_3_element_structure_to_all_lanes:
        case vld4_multiple_4_element_structures:
        case vld4_single_4_element_structure_to_one_lane:
        case vld4_single_4_element_structure_to_all_lanes:
        case vtrn:
        case vtst:
        case vuzp:
        case vzip:
            switch(ins->size) {
                case 0: return "8";
                case 1: return "16";
                case 2: return "32";
                case 3: return "32";
                default: return "INVALID";
            }

        case vld1_multiple_single_elements:
        case vqrshl:
        case vqshl_register:
            switch(ins->size) {
                case 0: return "8";
                case 1: return "16";
                case 2: return "32";
                case 3: return "64";
                default: return "INVALID";
            }
        case vmov_arm_core_register_to_scalar: // VMOV (ARM core register to scalar)
            if (get_bit(ins->opc1, 1) == 1)
                return "8";

            else if (get_bit(ins->opc1, 1) == 0 && get_bit(ins->opc2, 0) == 1)
                return "16";

            else if (get_bit(ins->opc1, 1) == 0 && ins->opc2 == 0)
                return "32";

            break;
        case vqmovn_vqmovun: // VQMOVN, VQMOVUN
            if (ins->size == 0)
                return "16";

            else if (ins->size == 1)
                return "32";

            else if (ins->size == 2)
                return "64";

            break;
        case vshll: // VSHLL
            return to_string(ins->esize);
        case vqrshrn_vqrshrun: // VQRSHRN, VQRSHRUN
        case vqshrn_vqshrun: // VQSHRN, VQSHRUN
        case vrshrn: // VRSHRN
        case vshrn: // VSHRN
            if (get_bits(ins->imm32, 5, 3) == 1) return "16";
            else if (get_bits(ins->imm32, 5, 4) == 1) return "32";
            else if (get_bit(ins->imm32, 5) == 1) return "64";
            break;
        default:
            break;
    }

    return "INVALID";
}

string type_str(const ARMInstruction *ins) {
    switch (ins->id) {
        case vqshl_vqshlu_immediate:
            return ins->src_unsigned ? "U" : "S";

        case vsra:
        case vshr:
        case vshl_register:
        case vrsra:
        case vrshr:
        case vqsub:
        case vqshl_register:
        case vqrshl:
        case vrshl:
            return ins->U ? "U" : "S";

        case vqmovn_vqmovun: // VQMOVN, VQMOVUN
            if (ins->op == 1 || ins->op == 2)
                return "S";

            if (ins->op == 3)
                return "U";

            break;
        case vqrshrn_vqrshrun: // VQRSHRN, VQRSHRUN
        case vqshrn_vqshrun: // VQSHRN, VQSHRUN
            if (ins->U == 0 && ins->op == 1)
                return "S";

            if (ins->U == 1 && ins->op == 0)
                return "S";

            if (ins->U == 1 && ins->op == 1)
                return "U";

            break;
        case vshll: // VSHLL
            if (ins->encoding == eEncodingT1 || ins->encoding == eEncodingA1) {
                if (ins->U == 0)
                    return "S";

                if (ins->U == 1)
                    return "U";
            } else if (ins->encoding == eEncodingT2 || ins->encoding == eEncodingA2) {
                return "I";
            }

            break;

        default:
            break;
    }

    return "INVALID";
}

string regular_reg_str(unsigned reg) {
    switch (reg) {
        case 0:
            return "r0";
        case 1:
            return "r1";
        case 2:
            return "r2";
        case 3:
            return "r3";
        case 4:
            return "r4";
        case 5:
            return "r5";
        case 6:
            return "r6";
        case 7:
            return "r7";
        case 8:
            return "r8";
        case 9:
            return "r9";
        case 10:
            return "r10";
        case 11:
            return "r11";
        case 12:
            return "r12";
        case 13:
            return "sp";
        case 14:
            return "lr";
        case 15:
            return "pc";
        default:
            break;
    }

    return "INVALID";
}

string coproc_str(unsigned coproc) {
    switch (coproc) {
        case 0:
            return "p0";
        case 1:
            return "p1";
        case 2:
            return "p2";
        case 3:
            return "p3";
        case 4:
            return "p4";
        case 5:
            return "p5";
        case 6:
            return "p6";
        case 7:
            return "p7";
        case 8:
            return "p8";
        case 9:
            return "p9";
        case 10:
            return "p10";
        case 11:
            return "p11";
        case 12:
            return "p12";
        case 13:
            return "p13";
        case 14:
            return "p14";
        case 15:
            return "p15";
        default:
            break;
    }

    return "INVALID";
}

string shift_type_str(unsigned shift) {
    switch (shift) {
        case 0:
            return "LSL";
        case 1:
            return "LSR";
        case 2:
            return "ASR";
        case 3:
            return "ROR";
        case 4:
            return "RRX";
        default:
            break;
    }

    return "INVALID";
}

string coproc_reg_str(unsigned coproc) {
    switch (coproc) {
        case 0:
            return "c0";
        case 1:
            return "c1";
        case 2:
            return "c2";
        case 3:
            return "c3";
        case 4:
            return "c4";
        case 5:
            return "c5";
        case 6:
            return "c6";
        case 7:
            return "c7";
        case 8:
            return "c8";
        case 9:
            return "c9";
        case 10:
            return "c10";
        case 11:
            return "c11";
        case 12:
            return "c12";
        case 13:
            return "c13";
        case 14:
            return "c14";
        case 15:
            return "c15";
        default:
            break;
    }

    return "INVALID";
}

string quad_reg_str(unsigned coproc) {
    switch (coproc) {
        case 0:
            return "q0";
        case 1:
            return "q1";
        case 2:
            return "q2";
        case 3:
            return "q3";
        case 4:
            return "q4";
        case 5:
            return "q5";
        case 6:
            return "q6";
        case 7:
            return "q7";
        case 8:
            return "q8";
        case 9:
            return "q9";
        case 10:
            return "q10";
        case 11:
            return "q11";
        case 12:
            return "q12";
        case 13:
            return "q13";
        case 14:
            return "q14";
        case 15:
            return "q15";
        default:
            break;
    }

    return "INVALID";
}

string double_reg_str(unsigned coproc) {
    switch (coproc) {
        case 0:
            return "d0";
        case 1:
            return "d1";
        case 2:
            return "d2";
        case 3:
            return "d3";
        case 4:
            return "d4";
        case 5:
            return "d5";
        case 6:
            return "d6";
        case 7:
            return "d7";
        case 8:
            return "d8";
        case 9:
            return "d9";
        case 10:
            return "d10";
        case 11:
            return "d11";
        case 12:
            return "d12";
        case 13:
            return "d13";
        case 14:
            return "d14";
        case 15:
            return "d15";
        case 16:
            return "d16";
        case 17:
            return "d17";
        case 18:
            return "d18";
        case 19:
            return "d19";
        case 20:
            return "d20";
        case 21:
            return "d21";
        case 22:
            return "d22";
        case 23:
            return "d23";
        case 24:
            return "d24";
        case 25:
            return "d25";
        case 26:
            return "d26";
        case 27:
            return "d27";
        case 28:
            return "d28";
        case 29:
            return "d29";
        case 30:
            return "d30";
        case 31:
            return "d31";
        default:
            break;
    }

    return "INVALID";
}

string simple_reg_str(unsigned coproc) {
    switch (coproc) {
        case 0:
            return "s0";
        case 1:
            return "s1";
        case 2:
            return "s2";
        case 3:
            return "s3";
        case 4:
            return "s4";
        case 5:
            return "s5";
        case 6:
            return "s6";
        case 7:
            return "s7";
        case 8:
            return "s8";
        case 9:
            return "s9";
        case 10:
            return "s10";
        case 11:
            return "s11";
        case 12:
            return "s12";
        case 13:
            return "s13";
        case 14:
            return "s14";
        case 15:
            return "s15";
        case 16:
            return "s16";
        case 17:
            return "s17";
        case 18:
            return "s18";
        case 19:
            return "s19";
        case 20:
            return "s20";
        case 21:
            return "s21";
        case 22:
            return "s22";
        case 23:
            return "s23";
        case 24:
            return "s24";
        case 25:
            return "s25";
        case 26:
            return "s26";
        case 27:
            return "s27";
        case 28:
            return "s28";
        case 29:
            return "s29";
        case 30:
            return "s30";
        case 31:
            return "s31";
        default:
            break;
    }

    return "INVALID";
}

string option_str(const ARMInstruction *ins) {
    switch (ins->id) {
        case dbg:
            return integer_to_string(ins->option, ins->option >= 10);
        case dmb:
        case dsb:
            if (ins->option == 15)
                return "SY";
            else if (ins->option == 14)
                return "ST";
            else if (ins->option == 11)
                return "ISH";
            else if (ins->option == 10)
                return "ISHST";
            else if (ins->option == 7)
                return "NSH";
            else if (ins->option == 6)
                return "NSHST";
            else if (ins->option == 3)
                return "OSH";
            else if (ins->option == 2)
                return "OSHST";
            else
                return "#" + integer_to_string(ins->option, ins->option >= 10);
            break;
        case isb:
            if (ins->option == 15)
                return "SY";
            else
                return "#" + integer_to_string(ins->option, true);
            break;
        case stc_stc2:
        case ldc_ldc2_immediate:
        case ldc_ldc2_literal:
            // HACK: In this case ins->imm32 >> 2 == ins->imm8
            return "{" + integer_to_string(ins->imm32 >> 2, (ins->imm32 >> 2) >= 10) + "}";
        default:
            break;
    }

    return "INVALID";
}

string endian_specifier_str(unsigned endian) {
    return endian ? "BE" : "LE";
}

string spec_reg_str(const ARMInstruction *ins) {
    string t;

    switch(ins->id) {
        case vmrs:
            switch(ins->reg) {
                case 0: return "FPSID";
                case 1: return "FPSCR";
                case 6: return "MVFR1";
                case 7: return "MVFR0";
                case 8: return "FPEXC";
                default: return "VFP_CUSTOM_REG_" + to_string(ins->reg);
            }
            break;
        case vmsr:
            switch(ins->reg) {
                case 0: return "FPSID";
                case 1: return "FPSCR";
                case 8: return "FPEXC";
                default: return "VFP_CUSTOM_REG_" + to_string(ins->reg);
            }
            break;
        case mrs:
            return ins->read_spsr ? "SPSR" : "APSR";

        case mrs_banked_register:
            return "BANKED_REG";

        case msr_immediate:
        case msr_register:
            t = ins->write_spsr ? "SPSR_" : "CPSR_";

            if (!ins->write_spsr && ins->mask == 8) return "APSR_nzcvq";
            if (!ins->write_spsr && ins->mask == 4) return "APSR_g";
            if (!ins->write_spsr && ins->mask == 12) return "APSR_nzcvqg";

            if (ins->mask & (1 << 3)) t += "f";
            if (ins->mask & (1 << 2)) t += "s";
            if (ins->mask & (1 << 1)) t += "x";
            if (ins->mask & (1 << 0)) t += "c";
            return t;

        default:
            break;
    }

    return "INVALID";
}

string registers_str(unsigned registers) {
    string regs;
    bool f = false;
    for (unsigned i = 0; i < 32; i++) {
        if (get_bit(registers, i)) {
            regs += i && f ? ", " : "";
            f = true;
            regs += string(regular_reg_str(i));
        }
    }

    return "{" + regs + "}";
}

string shift_str(unsigned shift_t, unsigned shift_n) {
    if (shift_t == SRType_RRX && shift_n == 1)
        return string(shift_type_str(shift_t));

    string shift = string(shift_type_str(shift_t)) + " #" + integer_to_string(shift_n, false);
    return shift;
}

string rotation_str(unsigned rotation) {
    switch(rotation) {
        case 0:
            return "";
        case 8:
            return "ROR #8";
        case 16:
            return "ROR #16";
        case 24:
            return "ROR #24";
    }

    return "INVALID";
}

string R0_R14_APSR_nzcv(const ARMInstruction *ins) {
    return ins->t == 15 ? string("apsr_nzcv") : regular_reg_str(ins->t);
}

string decode_adc_immediate_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: ADC{S}<c> <Rd>, <Rn>, #<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "ADC%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, #%s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_adc_immediate_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: ADC{S}<c> <Rd>, <Rn>, #<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "ADC%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, #%s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_adc_register_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: ADCS <Rdn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "ADCS"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_adc_register_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: ADC{S}<c>.W <Rd>, <Rn>, <Rm>{, <shift>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "ADC%s%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str(),
            ".W"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            shift_str(ins->shift_t, ins->shift_n).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_adc_register_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: ADC{S}<c> <Rd>, <Rn>, <Rm>{, <shift>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "ADC%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            shift_str(ins->shift_t, ins->shift_n).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_adc_register_shifted_register_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: ADC{S}<c> <Rd>, <Rn>, <Rm>, <type> <Rs>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "ADC%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, %s %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            shift_type_str(ins->shift_t).c_str(),
            regular_reg_str(ins->s).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_add_immediate_thumb_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: ADDS <Rd>, <Rn>, #<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "ADDS"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, #%s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_add_immediate_thumb_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: ADDS <Rdn>, #<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "ADDS"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, #%s",
            regular_reg_str(ins->d).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_add_immediate_thumb_t3_to_string(const ARMInstruction *ins) {
    // DEBUG: ADD{S}<c>.W <Rd>, <Rn>, #<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "ADD%s%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str(),
            ".W"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, #%s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_add_immediate_thumb_t4_to_string(const ARMInstruction *ins) {
    // DEBUG: ADDW<c> <Rd>, <Rn>, #<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "ADDW%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, #%s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_add_immediate_arm_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: ADD{S}<c> <Rd>, <Rn>, #<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "ADD%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, #%s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_add_register_thumb_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: ADDS <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "ADDS"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_add_register_thumb_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: ADD<c> <Rdn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "ADD%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_add_register_thumb_t3_to_string(const ARMInstruction *ins) {
    // DEBUG: ADD{S}<c>.W <Rd>, <Rn>, <Rm>{, <shift>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "ADD%s%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str(),
            ".W"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            shift_str(ins->shift_t, ins->shift_n).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_add_register_arm_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: ADD{S}<c> <Rd>, <Rn>, <Rm>{, <shift>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "ADD%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            shift_str(ins->shift_t, ins->shift_n).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_add_register_shifted_register_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: ADD{S}<c> <Rd>, <Rn>, <Rm>, <type> <Rs>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "ADD%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, %s %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            shift_type_str(ins->shift_t).c_str(),
            regular_reg_str(ins->s).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_add_sp_plus_immediate_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: ADD<c> <Rd>, SP, #<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "ADD%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, SP, #%s",
            regular_reg_str(ins->d).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_add_sp_plus_immediate_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: ADD<c> SP, #<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "ADD%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " SP, #%s",
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_add_sp_plus_immediate_t3_to_string(const ARMInstruction *ins) {
    // DEBUG: ADD{S}<c>.W <Rd>, SP, #<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "ADD%s%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str(),
            ".W"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, SP, #%s",
            regular_reg_str(ins->d).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_add_sp_plus_immediate_t4_to_string(const ARMInstruction *ins) {
    // DEBUG: ADDW<c> <Rd>, SP, #<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "ADDW%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, SP, #%s",
            regular_reg_str(ins->d).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_add_sp_plus_immediate_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: ADD{S}<c> <Rd>, SP, #<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "ADD%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, SP, #%s",
            regular_reg_str(ins->d).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_add_sp_plus_register_thumb_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: ADD<c> <Rdm>, SP, <Rdm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "ADD%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, SP, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->d).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_add_sp_plus_register_thumb_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: ADD<c> SP, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "ADD%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " SP, %s",
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_add_sp_plus_register_thumb_t3_to_string(const ARMInstruction *ins) {
    // DEBUG: ADD{S}<c>.W <Rd>, SP, <Rm>{, <shift>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "ADD%s%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str(),
            ".W"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, SP, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->m).c_str(),
            shift_str(ins->shift_t, ins->shift_n).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_add_sp_plus_register_arm_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: ADD{S}<c> <Rd>, SP, <Rm>{, <shift>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "ADD%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, SP, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->m).c_str(),
            shift_str(ins->shift_t, ins->shift_n).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_adr_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: ADR<c> <Rd>, #<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "ADR%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, #%s",
            regular_reg_str(ins->d).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_adr_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: SUB<c>.W <Rd>, pc, #<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SUB%s%s",
            c_str(ins).c_str(),
            ".W"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, pc, #%s",
            regular_reg_str(ins->d).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_adr_t3_to_string(const ARMInstruction *ins) {
    // DEBUG: ADD<c>.W <Rd>, pc, #<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "ADD%s%s",
            c_str(ins).c_str(),
            ".W"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, pc, #%s",
            regular_reg_str(ins->d).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_adr_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: ADR<c> <Rd>, pc, #<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "ADR%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, pc, #%s",
            regular_reg_str(ins->d).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_adr_a2_to_string(const ARMInstruction *ins) {
    // DEBUG: SUB<c> <Rd>, pc, #<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SUB%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, pc, #%s",
            regular_reg_str(ins->d).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_and_immediate_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: AND{S}<c> <Rd>, <Rn>, #<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "AND%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, #%s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_and_immediate_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: AND{S}<c> <Rd>, <Rn>, #<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "AND%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, #%s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_and_register_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: ANDS <Rdn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "ANDS"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_and_register_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: AND{S}<c>.W <Rd>, <Rn>, <Rm>{, <shift>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "AND%s%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str(),
            ".W"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            shift_str(ins->shift_t, ins->shift_n).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_and_register_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: AND{S}<c> <Rd>, <Rn>, <Rm>{, <shift>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "AND%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            shift_str(ins->shift_t, ins->shift_n).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_and_register_shifted_register_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: AND{S}<c> <Rd>, <Rn>, <Rm>, <type> <Rs>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "AND%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, %s %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            shift_type_str(ins->shift_t).c_str(),
            regular_reg_str(ins->s).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_asr_immediate_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: ASRS <Rd>, <Rm>, #<shift_n>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "ASRS"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, #%s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->m).c_str(),
            integer_to_string(ins->shift_n, ins->shift_n >= 10).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_asr_immediate_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: ASR{S}<c>.W <Rd>, <Rm>, #<shift_n>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "ASR%s%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str(),
            ".W"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, #%s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->m).c_str(),
            integer_to_string(ins->shift_n, ins->shift_n >= 10).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_asr_immediate_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: ASR{S}<c> <Rd>, <Rm>, #<shift_n>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "ASR%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, #%s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->m).c_str(),
            integer_to_string(ins->shift_n, ins->shift_n >= 10).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_asr_register_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: ASRS <Rdn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "ASRS"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_asr_register_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: ASR{S}<c>.W <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "ASR%s%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str(),
            ".W"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_asr_register_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: ASR{S}<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "ASR%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_b_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: B<c> #<label>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "B%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " #%s",
            integer_to_string(ins->imm32 + (EncodingIsThumb(ins->encoding) ? 4 : 8)).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_b_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: B #<label>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "B"
    );

    snprintf(op_args, sizeof(op_args),
            " #%s",
            integer_to_string(ins->imm32 + (EncodingIsThumb(ins->encoding) ? 4 : 8)).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_b_t3_to_string(const ARMInstruction *ins) {
    // DEBUG: B<c>.W #<label>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "B%s%s",
            c_str(ins).c_str(),
            ".W"
    );

    snprintf(op_args, sizeof(op_args),
            " #%s",
            integer_to_string(ins->imm32 + (EncodingIsThumb(ins->encoding) ? 4 : 8)).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_b_t4_to_string(const ARMInstruction *ins) {
    // DEBUG: B.W #<label>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "B.W"
    );

    snprintf(op_args, sizeof(op_args),
            " #%s",
            integer_to_string(ins->imm32 + (EncodingIsThumb(ins->encoding) ? 4 : 8)).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_bfc_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: BFC<c> <Rd>, #<lsb>, #<width>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "BFC%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, #%s, #%s",
            regular_reg_str(ins->d).c_str(),
            integer_to_string(ins->lsbit, ins->lsbit >= 10).c_str(),
            integer_to_string(ins->msbit - ins->lsbit + 1, ins->msbit - ins->lsbit + 1 >= 10).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_bfc_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: BFC<c> <Rd>, #<lsb>, #<width>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "BFC%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, #%s, #%s",
            regular_reg_str(ins->d).c_str(),
            integer_to_string(ins->lsbit, ins->lsbit >= 10).c_str(),
            integer_to_string(ins->msbit - ins->lsbit + 1, ins->msbit - ins->lsbit + 1 >= 10).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_bfi_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: BFI<c> <Rd>, <Rn>, #<lsb>, #<width>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "BFI%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, #%s, #%s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            integer_to_string(ins->lsbit, ins->lsbit >= 10).c_str(),
            integer_to_string(ins->msbit - ins->lsbit + 1, ins->msbit - ins->lsbit + 1 >= 10).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_bfi_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: BFI<c> <Rd>, <Rn>, #<lsb>, #<width>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "BFI%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, #%s, #%s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            integer_to_string(ins->lsbit, ins->lsbit >= 10).c_str(),
            integer_to_string(ins->msbit - ins->lsbit + 1, ins->msbit - ins->lsbit + 1 >= 10).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_bic_immediate_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: BIC{S}<c> <Rd>, <Rn>, #<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "BIC%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, #%s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_bic_immediate_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: BIC{S}<c> <Rd>, <Rn>, #<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "BIC%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, #%s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_bic_register_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: BICS <Rdn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "BICS"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_bic_register_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: BIC{S}<c>.W <Rd>, <Rn>, <Rm>{, <shift>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "BIC%s%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str(),
            ".W"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            shift_str(ins->shift_t, ins->shift_n).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_bic_register_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: BIC{S}<c> <Rd>, <Rn>, <Rm>{, <shift>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "BIC%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            shift_str(ins->shift_t, ins->shift_n).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_bic_register_shifted_register_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: BIC{S}<c> <Rd>, <Rn>, <Rm>, <type> <Rs>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "BIC%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, %s %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            shift_type_str(ins->shift_t).c_str(),
            regular_reg_str(ins->s).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_bkpt_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: BKPT #<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "BKPT"
    );

    snprintf(op_args, sizeof(op_args),
            " #%s",
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_bkpt_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: BKPT #<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "BKPT"
    );

    snprintf(op_args, sizeof(op_args),
            " #%s",
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_bl_blx_immediate_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: BL<c> #<label>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "BL%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " #%s",
            integer_to_string(ins->imm32 + (EncodingIsThumb(ins->encoding) ? 4 : 8)).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_bl_blx_immediate_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: BLX<c> #<label>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "BLX%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " #%s",
            integer_to_string(ins->imm32 + (EncodingIsThumb(ins->encoding) ? 4 : 8)).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_bl_blx_immediate_a2_to_string(const ARMInstruction *ins) {
    // DEBUG: BLX #<label>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "BLX"
    );

    snprintf(op_args, sizeof(op_args),
            " #%s",
            integer_to_string(ins->imm32 + (EncodingIsThumb(ins->encoding) ? 4 : 8)).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_bl_blx_immediate_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: BL<c> #<label>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "BL%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " #%s",
            integer_to_string(ins->imm32 + (EncodingIsThumb(ins->encoding) ? 4 : 8)).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_b_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: B<c> #<label>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "B%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " #%s",
            integer_to_string(ins->imm32 + (EncodingIsThumb(ins->encoding) ? 4 : 8)).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_blx_register_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: BLX<c> <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "BLX%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s",
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_blx_register_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: BLX<c> <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "BLX%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s",
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_bx_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: BX<c> <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "BX%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s",
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_bx_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: BX<c> <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "BX%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s",
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_bxj_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: BXJ<c> <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "BXJ%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s",
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_bxj_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: BXJ<c> <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "BXJ%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s",
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_cbnz_cbz_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: CB{N}Z <Rn>, #<label>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "CB%s%s",
            N_str(ins).c_str(),
            "Z"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, #%s",
            regular_reg_str(ins->n).c_str(),
            integer_to_string(ins->imm32 + (EncodingIsThumb(ins->encoding) ? 4 : 8)).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_cdp_cdp2_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: CDP<c> <coproc>, #<opc1>, <CRd>, <CRn>, <CRm>, #<opc2>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "CDP%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, #%s, %s, %s, %s, #%s",
            coproc_str(ins->coproc).c_str(),
            integer_to_string(ins->opc1, ins->opc1 >= 10).c_str(),
            coproc_reg_str(ins->CRd).c_str(),
            coproc_reg_str(ins->CRn).c_str(),
            coproc_reg_str(ins->CRm).c_str(),
            integer_to_string(ins->opc2, ins->opc2 >= 10).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_cdp_cdp2_a2_to_string(const ARMInstruction *ins) {
    // DEBUG: CDP2 <coproc>, #<opc1>, <CRd>, <CRn>, <CRm>, #<opc2>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "CDP2"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, #%s, %s, %s, %s, #%s",
            coproc_str(ins->coproc).c_str(),
            integer_to_string(ins->opc1, ins->opc1 >= 10).c_str(),
            coproc_reg_str(ins->CRd).c_str(),
            coproc_reg_str(ins->CRn).c_str(),
            coproc_reg_str(ins->CRm).c_str(),
            integer_to_string(ins->opc2, ins->opc2 >= 10).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_cdp_cdp2_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: CDP<c> <coproc>, #<opc1>, <CRd>, <CRn>, <CRm>, #<opc2>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "CDP%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, #%s, %s, %s, %s, #%s",
            coproc_str(ins->coproc).c_str(),
            integer_to_string(ins->opc1, ins->opc1 >= 10).c_str(),
            coproc_reg_str(ins->CRd).c_str(),
            coproc_reg_str(ins->CRn).c_str(),
            coproc_reg_str(ins->CRm).c_str(),
            integer_to_string(ins->opc2, ins->opc2 >= 10).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_cdp_cdp2_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: CDP2<c> <coproc>, #<opc1>, <CRd>, <CRn>, <CRm>, #<opc2>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "CDP2%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, #%s, %s, %s, %s, #%s",
            coproc_str(ins->coproc).c_str(),
            integer_to_string(ins->opc1, ins->opc1 >= 10).c_str(),
            coproc_reg_str(ins->CRd).c_str(),
            coproc_reg_str(ins->CRn).c_str(),
            coproc_reg_str(ins->CRm).c_str(),
            integer_to_string(ins->opc2, ins->opc2 >= 10).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_clrex_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: CLREX<c>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "CLREX%s",
            c_str(ins).c_str()
    );

    return string(op_name);
}

string decode_clrex_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: CLREX
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "CLREX"
    );

    return string(op_name);
}

string decode_clz_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: CLZ<c> <Rd>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "CLZ%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_clz_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: CLZ<c> <Rd>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "CLZ%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_cmn_immediate_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: CMN<c> <Rn>, #<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "CMN%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, #%s",
            regular_reg_str(ins->n).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_cmn_immediate_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: CMN<c> <Rn>, #<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "CMN%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, #%s",
            regular_reg_str(ins->n).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_cmn_register_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: CMN<c> <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "CMN%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s",
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_cmn_register_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: CMN<c>.W <Rn>, <Rm>{, <shift>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "CMN%s%s",
            c_str(ins).c_str(),
            ".W"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            shift_str(ins->shift_t, ins->shift_n).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_cmn_register_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: CMN<c> <Rn>, <Rm>{, <shift>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "CMN%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            shift_str(ins->shift_t, ins->shift_n).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_cmn_register_shifted_register_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: CMN<c> <Rn>, <Rm>, <type> <Rs>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "CMN%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s %s",
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            shift_type_str(ins->shift_t).c_str(),
            regular_reg_str(ins->s).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_cmp_immediate_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: CMP<c> <Rn>, #<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "CMP%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, #%s",
            regular_reg_str(ins->n).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_cmp_immediate_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: CMP<c>.W <Rn>, #<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "CMP%s%s",
            c_str(ins).c_str(),
            ".W"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, #%s",
            regular_reg_str(ins->n).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_cmp_immediate_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: CMP<c> <Rn>, #<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "CMP%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, #%s",
            regular_reg_str(ins->n).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_cmp_register_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: CMP<c> <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "CMP%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s",
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_cmp_register_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: CMP<c> <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "CMP%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s",
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_cmp_register_t3_to_string(const ARMInstruction *ins) {
    // DEBUG: CMP<c>.W <Rn>, <Rm>{, <shift>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "CMP%s%s",
            c_str(ins).c_str(),
            ".W"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            shift_str(ins->shift_t, ins->shift_n).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_cmp_register_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: CMP<c> <Rn>, <Rm>{, <shift>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "CMP%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            shift_str(ins->shift_t, ins->shift_n).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_cmp_register_shifted_register_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: CMP<c> <Rn>, <Rm>, <type> <Rs>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "CMP%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s %s",
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            shift_type_str(ins->shift_t).c_str(),
            regular_reg_str(ins->s).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_dbg_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: DBG<c> #<option>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "DBG%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " #%s",
            option_str(ins).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_dbg_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: DBG<c> #<option>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "DBG%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " #%s",
            option_str(ins).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_dmb_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: DMB<c> <option>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "DMB%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s",
            option_str(ins).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_dmb_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: DMB <option>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "DMB"
    );

    snprintf(op_args, sizeof(op_args),
            " %s",
            option_str(ins).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_dsb_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: DSB<c> <option>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "DSB%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s",
            option_str(ins).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_dsb_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: DSB <option>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "DSB"
    );

    snprintf(op_args, sizeof(op_args),
            " %s",
            option_str(ins).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_eor_immediate_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: EOR{S}<c> <Rd>, <Rn>, #<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "EOR%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, #%s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_eor_immediate_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: EOR{S}<c> <Rd>, <Rn>, #<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "EOR%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, #%s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_eor_register_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: EORS <Rdn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "EORS"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_eor_register_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: EOR{S}<c>.W <Rd>, <Rn>, <Rm>{, <shift>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "EOR%s%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str(),
            ".W"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            shift_str(ins->shift_t, ins->shift_n).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_eor_register_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: EOR{S}<c> <Rd>, <Rn>, <Rm>{, <shift>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "EOR%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            shift_str(ins->shift_t, ins->shift_n).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_eor_register_shifted_register_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: EOR{S}<c> <Rd>, <Rn>, <Rm>, <type> <Rs>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "EOR%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, %s %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            shift_type_str(ins->shift_t).c_str(),
            regular_reg_str(ins->s).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_isb_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: ISB<c> <option>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "ISB%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s",
            option_str(ins).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_isb_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: ISB <option>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "ISB"
    );

    snprintf(op_args, sizeof(op_args),
            " %s",
            option_str(ins).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_rfe_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: RFEDB<c> <Rn>{!}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "RFEDB%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s%s",
            regular_reg_str(ins->n).c_str(),
            ins->wback ? "!" : ""
    );

    return string(op_name) + string(op_args);
}

string decode_rfe_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: RFE{IA}<c> <Rn>{!}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "RFE%s%s",
            IA_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s%s",
            regular_reg_str(ins->n).c_str(),
            ins->wback ? "!" : ""
    );

    return string(op_name) + string(op_args);
}

string decode_rfe_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: RFE<amode> <Rn>{!}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "RFE%s",
            amode_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s%s",
            regular_reg_str(ins->n).c_str(),
            ins->wback ? "!" : ""
    );

    return string(op_name) + string(op_args);
}

string decode_ldm_ldmia_ldmfd_thumb_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: LDM<c>.W <Rn>{!}, <registers>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "LDM%s%s",
            c_str(ins).c_str(),
            ".W"
    );

    snprintf(op_args, sizeof(op_args),
            " %s%s, %s",
            regular_reg_str(ins->n).c_str(),
            ins->wback ? "!" : "",
            registers_str(ins->registers).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ldm_ldmia_ldmfd_arm_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: LDM<c> <Rn>{!}, <registers>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "LDM%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s%s, %s",
            regular_reg_str(ins->n).c_str(),
            ins->wback ? "!" : "",
            registers_str(ins->registers).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ldmda_ldmfa_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: LDMDA<c> <Rn>{!}, <registers>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "LDMDA%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s%s, %s",
            regular_reg_str(ins->n).c_str(),
            ins->wback ? "!" : "",
            registers_str(ins->registers).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ldmdb_ldmea_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: LDMDB<c> <Rn>{!}, <registers>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "LDMDB%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s%s, %s",
            regular_reg_str(ins->n).c_str(),
            ins->wback ? "!" : "",
            registers_str(ins->registers).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ldmdb_ldmea_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: LDMDB<c> <Rn>{!}, <registers>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "LDMDB%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s%s, %s",
            regular_reg_str(ins->n).c_str(),
            ins->wback ? "!" : "",
            registers_str(ins->registers).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ldmib_ldmed_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: LDMIB<c> <Rn>{!}, <registers>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "LDMIB%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s%s, %s",
            regular_reg_str(ins->n).c_str(),
            ins->wback ? "!" : "",
            registers_str(ins->registers).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ldr_immediate_thumb_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: LDR<c> <Rt>, [<Rn>{, #<imm32>}]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "LDR%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [%s, #%s]",
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->n).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ldr_immediate_thumb_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: LDR<c> <Rt>, [SP{, #<imm32>}]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "LDR%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [SP, #%s]",
            regular_reg_str(ins->t).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ldr_immediate_thumb_t3_to_string(const ARMInstruction *ins) {
    // DEBUG: LDR<c>.W <Rt>, [<Rn>{, #<imm32>}]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "LDR%s%s",
            c_str(ins).c_str(),
            ".W"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [%s, #%s]",
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->n).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_pld_pldw_immediate_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: PLD{W} [<Rn>, #+/-<imm32>]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "PLD%s",
            W_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " [%s, #%s%s]",
            regular_reg_str(ins->n).c_str(),
            ins->add ? "" : "-",
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_pld_literal_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: PLD [pc, #+/-<imm32>]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "PLD"
    );

    snprintf(op_args, sizeof(op_args),
            " [pc, #%s%s]",
            ins->add ? "" : "-",
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_pld_pldw_register_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: PLD{W} [<Rn>, +/-<Rm>{, <shift>}]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "PLD%s",
            W_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " [%s, %s%s, %s]",
            regular_reg_str(ins->n).c_str(),
            ins->add ? "" : "-",
            regular_reg_str(ins->m).c_str(),
            shift_str(ins->shift_t, ins->shift_n).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_pli_register_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: PLI<c> [<Rn>, <Rm>{, LSL #<shift_n>}]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "PLI%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " [%s, %s, LSL #%s]",
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            integer_to_string(ins->shift_n, ins->shift_n >= 10).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_pli_register_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: PLI [<Rn>, +/-<Rm>{, <shift>}]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "PLI"
    );

    snprintf(op_args, sizeof(op_args),
            " [%s, %s%s, %s]",
            regular_reg_str(ins->n).c_str(),
            ins->add ? "" : "-",
            regular_reg_str(ins->m).c_str(),
            shift_str(ins->shift_t, ins->shift_n).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_pli_immediate_literal_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: PLI [<Rn>, #+/-<imm32>]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "PLI"
    );

    snprintf(op_args, sizeof(op_args),
            " [%s, #%s%s]",
            regular_reg_str(ins->n).c_str(),
            ins->add ? "" : "-",
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ldr_literal_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: LDR<c> <Rt>, [pc, #+/-<imm32>]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "LDR%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [pc, #%s%s]",
            regular_reg_str(ins->t).c_str(),
            ins->add ? "" : "-",
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ldr_literal_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: LDR<c>.W <Rt>, [pc, #+/-<imm32>]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "LDR%s%s",
            c_str(ins).c_str(),
            ".W"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [pc, #%s%s]",
            regular_reg_str(ins->t).c_str(),
            ins->add ? "" : "-",
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ldr_literal_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: LDR<c> <Rt>, [pc, #+/-<imm32>]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "LDR%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [pc, #%s%s]",
            regular_reg_str(ins->t).c_str(),
            ins->add ? "" : "-",
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ldr_register_thumb_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: LDR<c> <Rt>, [<Rn>, <Rm>]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "LDR%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [%s, %s]",
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ldr_register_thumb_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: LDR<c>.W <Rt>, [<Rn>, <Rm>{, LSL #<shift_n>}]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "LDR%s%s",
            c_str(ins).c_str(),
            ".W"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [%s, %s, LSL #%s]",
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            integer_to_string(ins->shift_n, ins->shift_n >= 10).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ldrb_immediate_thumb_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: LDRB<c> <Rt>, [<Rn>{, #<imm32>}]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "LDRB%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [%s, #%s]",
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->n).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ldrb_immediate_thumb_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: LDRB<c>.W <Rt>, [<Rn>{, #<imm32>}]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "LDRB%s%s",
            c_str(ins).c_str(),
            ".W"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [%s, #%s]",
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->n).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ldrb_literal_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: LDRB<c> <Rt>, [pc, #+/-<imm32>]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "LDRB%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [pc, #%s%s]",
            regular_reg_str(ins->t).c_str(),
            ins->add ? "" : "-",
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ldrb_literal_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: LDRB<c> <Rt>, [pc, #+/-<imm32>]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "LDRB%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [pc, #%s%s]",
            regular_reg_str(ins->t).c_str(),
            ins->add ? "" : "-",
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ldrb_register_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: LDRB<c> <Rt>, [<Rn>, <Rm>]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "LDRB%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [%s, %s]",
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ldrb_register_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: LDRB<c>.W <Rt>, [<Rn>, <Rm>{, LSL #<shift_n>}]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "LDRB%s%s",
            c_str(ins).c_str(),
            ".W"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [%s, %s, LSL #%s]",
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            integer_to_string(ins->shift_n, ins->shift_n >= 10).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ldrbt_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: LDRBT<c> <Rt>, [<Rn>, #<imm32>]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "LDRBT%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [%s, #%s]",
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->n).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ldrbt_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: LDRBT<c> <Rt>, [<Rn>], #+/-<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "LDRBT%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [%s], #%s%s",
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->n).c_str(),
            ins->add ? "" : "-",
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ldrbt_a2_to_string(const ARMInstruction *ins) {
    // DEBUG: LDRBT<c> <Rt>, [<Rn>], +/-<Rm>{, <shift>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "LDRBT%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [%s], %s%s, %s",
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->n).c_str(),
            ins->add ? "" : "-",
            regular_reg_str(ins->m).c_str(),
            shift_str(ins->shift_t, ins->shift_n).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ldrd_literal_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: LDRD<c> <Rt>, <Rt2>, [pc, #+/-<imm32>]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "LDRD%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, [pc, #%s%s]",
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->t2).c_str(),
            ins->add ? "" : "-",
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ldrd_literal_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: LDRD<c> <Rt>, <Rt2>, [pc, #+/-<imm32>]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "LDRD%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, [pc, #%s%s]",
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->t2).c_str(),
            ins->add ? "" : "-",
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ldrex_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: LDREX<c> <Rt>, [<Rn>{, #<imm32>}]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "LDREX%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [%s, #%s]",
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->n).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ldrex_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: LDREX<c> <Rt>, [<Rn>]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "LDREX%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [%s]",
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->n).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ldrexb_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: LDREXB<c> <Rt>, [<Rn>]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "LDREXB%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [%s]",
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->n).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ldrexb_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: LDREXB<c> <Rt>, [<Rn>]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "LDREXB%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [%s]",
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->n).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ldrexd_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: LDREXD<c> <Rt>, <Rt2>, [<Rn>]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "LDREXD%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, [%s]",
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->t2).c_str(),
            regular_reg_str(ins->n).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ldrexd_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: LDREXD<c> <Rt>, <Rt2>, [<Rn>]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "LDREXD%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, [%s]",
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->t2).c_str(),
            regular_reg_str(ins->n).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ldrexh_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: LDREXH<c> <Rt>, [<Rn>]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "LDREXH%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [%s]",
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->n).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ldrexh_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: LDREXH<c> <Rt>, [<Rn>]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "LDREXH%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [%s]",
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->n).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ldrh_immediate_thumb_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: LDRH<c> <Rt>, [<Rn>{, #<imm32>}]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "LDRH%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [%s, #%s]",
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->n).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ldrh_immediate_thumb_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: LDRH<c>.W <Rt>, [<Rn>{, #<imm32>}]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "LDRH%s%s",
            c_str(ins).c_str(),
            ".W"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [%s, #%s]",
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->n).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ldrh_literal_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: LDRH<c> <Rt>, [pc, #+/-<imm32>]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "LDRH%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [pc, #%s%s]",
            regular_reg_str(ins->t).c_str(),
            ins->add ? "" : "-",
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ldrh_literal_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: LDRH<c> <Rt>, [pc, #+/-<imm32>]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "LDRH%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [pc, #%s%s]",
            regular_reg_str(ins->t).c_str(),
            ins->add ? "" : "-",
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ldrh_register_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: LDRH<c> <Rt>, [<Rn>, <Rm>]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "LDRH%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [%s, %s]",
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ldrh_register_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: LDRH<c>.W <Rt>, [<Rn>, <Rm>{, LSL #<shift_n>}]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "LDRH%s%s",
            c_str(ins).c_str(),
            ".W"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [%s, %s, LSL #%s]",
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            integer_to_string(ins->shift_n, ins->shift_n >= 10).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ldrht_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: LDRHT<c> <Rt>, [<Rn>, #<imm32>]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "LDRHT%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [%s, #%s]",
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->n).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ldrht_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: LDRHT<c> <Rt>, [<Rn>]{, #+/-<imm32>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "LDRHT%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [%s], #%s%s",
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->n).c_str(),
            ins->add ? "" : "-",
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ldrht_a2_to_string(const ARMInstruction *ins) {
    // DEBUG: LDRHT<c> <Rt>, [<Rn>], +/-<Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "LDRHT%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [%s], %s%s",
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->n).c_str(),
            ins->add ? "" : "-",
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ldrsb_immediate_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: LDRSB<c> <Rt>, [<Rn>, #<imm32>]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "LDRSB%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [%s, #%s]",
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->n).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ldrsb_literal_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: LDRSB<c> <Rt>, [pc, #+/-<imm32>]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "LDRSB%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [pc, #%s%s]",
            regular_reg_str(ins->t).c_str(),
            ins->add ? "" : "-",
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ldrsb_literal_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: LDRSB<c> <Rt>, [pc, #+/-<imm32>]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "LDRSB%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [pc, #%s%s]",
            regular_reg_str(ins->t).c_str(),
            ins->add ? "" : "-",
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ldrsb_register_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: LDRSB<c> <Rt>, [<Rn>, <Rm>]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "LDRSB%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [%s, %s]",
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ldrsb_register_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: LDRSB<c>.W <Rt>, [<Rn>, <Rm>{, LSL #<shift_n>}]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "LDRSB%s%s",
            c_str(ins).c_str(),
            ".W"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [%s, %s, LSL #%s]",
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            integer_to_string(ins->shift_n, ins->shift_n >= 10).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ldrsbt_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: LDRSBT<c> <Rt>, [<Rn>, #<imm32>]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "LDRSBT%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [%s, #%s]",
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->n).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ldrsbt_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: LDRSBT<c> <Rt>, [<Rn>]{, #+/-<imm32>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "LDRSBT%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [%s], #%s%s",
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->n).c_str(),
            ins->add ? "" : "-",
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ldrsbt_a2_to_string(const ARMInstruction *ins) {
    // DEBUG: LDRSBT<c> <Rt>, [<Rn>], +/-<Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "LDRSBT%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [%s], %s%s",
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->n).c_str(),
            ins->add ? "" : "-",
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ldrsh_immediate_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: LDRSH<c> <Rt>, [<Rn>, #<imm32>]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "LDRSH%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [%s, #%s]",
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->n).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ldrsh_literal_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: LDRSH<c> <Rt>, [pc, #+/-<imm32>]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "LDRSH%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [pc, #%s%s]",
            regular_reg_str(ins->t).c_str(),
            ins->add ? "" : "-",
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ldrsh_literal_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: LDRSH<c> <Rt>, [pc, #+/-<imm32>]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "LDRSH%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [pc, #%s%s]",
            regular_reg_str(ins->t).c_str(),
            ins->add ? "" : "-",
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ldrsh_register_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: LDRSH<c> <Rt>, [<Rn>, <Rm>]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "LDRSH%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [%s, %s]",
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ldrsh_register_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: LDRSH<c>.W <Rt>, [<Rn>, <Rm>{, LSL #<shift_n>}]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "LDRSH%s%s",
            c_str(ins).c_str(),
            ".W"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [%s, %s, LSL #%s]",
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            integer_to_string(ins->shift_n, ins->shift_n >= 10).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ldrsht_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: LDRSHT<c> <Rt>, [<Rn>, #<imm32>]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "LDRSHT%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [%s, #%s]",
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->n).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ldrsht_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: LDRSHT<c> <Rt>, [<Rn>]{, #+/-<imm32>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "LDRSHT%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [%s], #%s%s",
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->n).c_str(),
            ins->add ? "" : "-",
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ldrsht_a2_to_string(const ARMInstruction *ins) {
    // DEBUG: LDRSHT<c> <Rt>, [<Rn>], +/-<Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "LDRSHT%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [%s], %s%s",
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->n).c_str(),
            ins->add ? "" : "-",
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ldrt_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: LDRT<c> <Rt>, [<Rn>, #<imm32>]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "LDRT%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [%s, #%s]",
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->n).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ldrt_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: LDRT<c> <Rt>, [<Rn>]{, #+/-<imm32>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "LDRT%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [%s], #%s%s",
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->n).c_str(),
            ins->add ? "" : "-",
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ldrt_a2_to_string(const ARMInstruction *ins) {
    // DEBUG: LDRT<c> <Rt>, [<Rn>], +/-<Rm>{, <shift>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "LDRT%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [%s], %s%s, %s",
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->n).c_str(),
            ins->add ? "" : "-",
            regular_reg_str(ins->m).c_str(),
            shift_str(ins->shift_t, ins->shift_n).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_lsl_immediate_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: LSLS <Rd>, <Rm>, #<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "LSLS"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, #%s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->m).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_lsl_immediate_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: LSL{S}<c>.W <Rd>, <Rm>, #<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "LSL%s%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str(),
            ".W"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, #%s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->m).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_lsl_immediate_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: LSL{S}<c> <Rd>, <Rm>, #<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "LSL%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, #%s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->m).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_lsl_register_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: LSLS <Rdn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "LSLS"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_lsl_register_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: LSL{S}<c>.W <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "LSL%s%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str(),
            ".W"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_lsl_register_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: LSL{S}<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "LSL%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_lsr_immediate_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: LSRS <Rd>, <Rm>, #<shift_n>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "LSRS"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, #%s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->m).c_str(),
            integer_to_string(ins->shift_n, ins->shift_n >= 10).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_lsr_immediate_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: LSR{S}<c>.W <Rd>, <Rm>, #<shift_n>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "LSR%s%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str(),
            ".W"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, #%s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->m).c_str(),
            integer_to_string(ins->shift_n, ins->shift_n >= 10).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_lsr_immediate_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: LSR{S}<c> <Rd>, <Rm>, #<shift_n>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "LSR%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, #%s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->m).c_str(),
            integer_to_string(ins->shift_n, ins->shift_n >= 10).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_lsr_register_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: LSRS <Rdn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "LSRS"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_lsr_register_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: LSR{S}<c>.W <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "LSR%s%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str(),
            ".W"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_lsr_register_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: LSR{S}<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "LSR%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_mcr_mcr2_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: MCR<c> <coproc>, #<opc1>, <Rt>, <CRn>, <CRm>{, #<opc2>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "MCR%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, #%s, %s, %s, %s, #%s",
            coproc_str(ins->coproc).c_str(),
            integer_to_string(ins->opc1, ins->opc1 >= 10).c_str(),
            regular_reg_str(ins->t).c_str(),
            coproc_reg_str(ins->CRn).c_str(),
            coproc_reg_str(ins->CRm).c_str(),
            integer_to_string(ins->opc2, ins->opc2 >= 10).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_mcr_mcr2_a2_to_string(const ARMInstruction *ins) {
    // DEBUG: MCR2 <coproc>, #<opc1>, <Rt>, <CRn>, <CRm>{, #<opc2>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "MCR2"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, #%s, %s, %s, %s, #%s",
            coproc_str(ins->coproc).c_str(),
            integer_to_string(ins->opc1, ins->opc1 >= 10).c_str(),
            regular_reg_str(ins->t).c_str(),
            coproc_reg_str(ins->CRn).c_str(),
            coproc_reg_str(ins->CRm).c_str(),
            integer_to_string(ins->opc2, ins->opc2 >= 10).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_mcr_mcr2_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: MCR<c> <coproc>, #<opc1>, <Rt>, <CRn>, <CRm>{, #<opc2>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "MCR%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, #%s, %s, %s, %s, #%s",
            coproc_str(ins->coproc).c_str(),
            integer_to_string(ins->opc1, ins->opc1 >= 10).c_str(),
            regular_reg_str(ins->t).c_str(),
            coproc_reg_str(ins->CRn).c_str(),
            coproc_reg_str(ins->CRm).c_str(),
            integer_to_string(ins->opc2, ins->opc2 >= 10).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_mcr_mcr2_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: MCR2<c> <coproc>, #<opc1>, <Rt>, <CRn>, <CRm>{, #<opc2>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "MCR2%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, #%s, %s, %s, %s, #%s",
            coproc_str(ins->coproc).c_str(),
            integer_to_string(ins->opc1, ins->opc1 >= 10).c_str(),
            regular_reg_str(ins->t).c_str(),
            coproc_reg_str(ins->CRn).c_str(),
            coproc_reg_str(ins->CRm).c_str(),
            integer_to_string(ins->opc2, ins->opc2 >= 10).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_mcrr_mcrr2_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: MCRR<c> <coproc>, #<opc1>, <Rt>, <Rt2>, <CRm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "MCRR%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, #%s, %s, %s, %s",
            coproc_str(ins->coproc).c_str(),
            integer_to_string(ins->opc1, ins->opc1 >= 10).c_str(),
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->t2).c_str(),
            coproc_reg_str(ins->CRm).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_mcrr_mcrr2_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: MCRR2<c> <coproc>, #<opc1>, <Rt>, <Rt2>, <CRm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "MCRR2%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, #%s, %s, %s, %s",
            coproc_str(ins->coproc).c_str(),
            integer_to_string(ins->opc1, ins->opc1 >= 10).c_str(),
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->t2).c_str(),
            coproc_reg_str(ins->CRm).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_mcrr_mcrr2_a2_to_string(const ARMInstruction *ins) {
    // DEBUG: MCRR2 <coproc>, #<opc1>, <Rt>, <Rt2>, <CRm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "MCRR2"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, #%s, %s, %s, %s",
            coproc_str(ins->coproc).c_str(),
            integer_to_string(ins->opc1, ins->opc1 >= 10).c_str(),
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->t2).c_str(),
            coproc_reg_str(ins->CRm).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_mcrr_mcrr2_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: MCRR<c> <coproc>, #<opc1>, <Rt>, <Rt2>, <CRm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "MCRR%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, #%s, %s, %s, %s",
            coproc_str(ins->coproc).c_str(),
            integer_to_string(ins->opc1, ins->opc1 >= 10).c_str(),
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->t2).c_str(),
            coproc_reg_str(ins->CRm).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_mla_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: MLA<c> <Rd>, <Rn>, <Rm>, <Ra>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "MLA%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            regular_reg_str(ins->a).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_mla_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: MLA{S}<c> <Rd>, <Rn>, <Rm>, <Ra>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "MLA%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            regular_reg_str(ins->a).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_mls_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: MLS<c> <Rd>, <Rn>, <Rm>, <Ra>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "MLS%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            regular_reg_str(ins->a).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_mls_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: MLS<c> <Rd>, <Rn>, <Rm>, <Ra>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "MLS%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            regular_reg_str(ins->a).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_mov_immediate_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: MOVS <Rd>, #<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "MOVS"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, #%s",
            regular_reg_str(ins->d).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_mov_immediate_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: MOV{S}<c>.W <Rd>, #<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "MOV%s%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str(),
            ".W"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, #%s",
            regular_reg_str(ins->d).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_mov_immediate_t3_to_string(const ARMInstruction *ins) {
    // DEBUG: MOVW<c> <Rd>, #<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "MOVW%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, #%s",
            regular_reg_str(ins->d).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_mov_immediate_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: MOV{S}<c> <Rd>, #<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "MOV%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, #%s",
            regular_reg_str(ins->d).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_mov_immediate_a2_to_string(const ARMInstruction *ins) {
    // DEBUG: MOVW<c> <Rd>, #<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "MOVW%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, #%s",
            regular_reg_str(ins->d).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_mov_register_thumb_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: MOV<c> <Rd>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "MOV%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_mov_register_thumb_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: MOVS <Rd>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "MOVS"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_mov_register_thumb_t3_to_string(const ARMInstruction *ins) {
    // DEBUG: MOV{S}<c>.W <Rd>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "MOV%s%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str(),
            ".W"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_mov_register_arm_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: MOV{S}<c> <Rd>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "MOV%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_movt_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: MOVT<c> <Rd>, #<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "MOVT%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, #%s",
            regular_reg_str(ins->d).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_movt_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: MOVT<c> <Rd>, #<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "MOVT%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, #%s",
            regular_reg_str(ins->d).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_mrc_mrc2_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: MRC<c> <coproc>, #<opc1>, <R0_R14_APSR_nzcv>, <CRn>, <CRm>{, #<opc2>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "MRC%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, #%s, %s, %s, %s, #%s",
            coproc_str(ins->coproc).c_str(),
            integer_to_string(ins->opc1, ins->opc1 >= 10).c_str(),
            R0_R14_APSR_nzcv(ins).c_str(),
            coproc_reg_str(ins->CRn).c_str(),
            coproc_reg_str(ins->CRm).c_str(),
            integer_to_string(ins->opc2, ins->opc2 >= 10).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_mrc_mrc2_a2_to_string(const ARMInstruction *ins) {
    // DEBUG: MRC2 <coproc>, #<opc1>, <R0_R14_APSR_nzcv>, <CRn>, <CRm>{, #<opc2>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "MRC2"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, #%s, %s, %s, %s, #%s",
            coproc_str(ins->coproc).c_str(),
            integer_to_string(ins->opc1, ins->opc1 >= 10).c_str(),
            R0_R14_APSR_nzcv(ins).c_str(),
            coproc_reg_str(ins->CRn).c_str(),
            coproc_reg_str(ins->CRm).c_str(),
            integer_to_string(ins->opc2, ins->opc2 >= 10).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_mrc_mrc2_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: MRC<c> <coproc>, #<opc1>, <R0_R14_APSR_nzcv>, <CRn>, <CRm>{, #<opc2>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "MRC%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, #%s, %s, %s, %s, #%s",
            coproc_str(ins->coproc).c_str(),
            integer_to_string(ins->opc1, ins->opc1 >= 10).c_str(),
            R0_R14_APSR_nzcv(ins).c_str(),
            coproc_reg_str(ins->CRn).c_str(),
            coproc_reg_str(ins->CRm).c_str(),
            integer_to_string(ins->opc2, ins->opc2 >= 10).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_mrc_mrc2_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: MRC2<c> <coproc>, #<opc1>, <R0_R14_APSR_nzcv>, <CRn>, <CRm>{, #<opc2>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "MRC2%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, #%s, %s, %s, %s, #%s",
            coproc_str(ins->coproc).c_str(),
            integer_to_string(ins->opc1, ins->opc1 >= 10).c_str(),
            R0_R14_APSR_nzcv(ins).c_str(),
            coproc_reg_str(ins->CRn).c_str(),
            coproc_reg_str(ins->CRm).c_str(),
            integer_to_string(ins->opc2, ins->opc2 >= 10).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_mrrc_mrrc2_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: MRRC<c> <coproc>, #<opc1>, <Rt>, <Rt2>, <CRm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "MRRC%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, #%s, %s, %s, %s",
            coproc_str(ins->coproc).c_str(),
            integer_to_string(ins->opc1, ins->opc1 >= 10).c_str(),
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->t2).c_str(),
            coproc_reg_str(ins->CRm).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_mrrc_mrrc2_a2_to_string(const ARMInstruction *ins) {
    // DEBUG: MRRC2 <coproc>, #<opc1>, <Rt>, <Rt2>, <CRm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "MRRC2"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, #%s, %s, %s, %s",
            coproc_str(ins->coproc).c_str(),
            integer_to_string(ins->opc1, ins->opc1 >= 10).c_str(),
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->t2).c_str(),
            coproc_reg_str(ins->CRm).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_mrrc_mrrc2_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: MRRC<c> <coproc>, #<opc1>, <Rt>, <Rt2>, <CRm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "MRRC%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, #%s, %s, %s, %s",
            coproc_str(ins->coproc).c_str(),
            integer_to_string(ins->opc1, ins->opc1 >= 10).c_str(),
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->t2).c_str(),
            coproc_reg_str(ins->CRm).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_mrrc_mrrc2_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: MRRC2<c> <coproc>, #<opc1>, <Rt>, <Rt2>, <CRm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "MRRC2%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, #%s, %s, %s, %s",
            coproc_str(ins->coproc).c_str(),
            integer_to_string(ins->opc1, ins->opc1 >= 10).c_str(),
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->t2).c_str(),
            coproc_reg_str(ins->CRm).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_mrs_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: MRS<c> <Rd>, <spec_reg>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "MRS%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s",
            regular_reg_str(ins->d).c_str(),
            spec_reg_str(ins).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_mrs_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: MRS<c> <Rd>, <spec_reg>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "MRS%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s",
            regular_reg_str(ins->d).c_str(),
            spec_reg_str(ins).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_msr_immediate_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: MSR<c> <spec_reg>, #<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "MSR%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, #%s",
            spec_reg_str(ins).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_msr_register_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: MSR<c> <spec_reg>, <Rn>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "MSR%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s",
            spec_reg_str(ins).c_str(),
            regular_reg_str(ins->n).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_msr_register_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: MSR<c> <spec_reg>, <Rn>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "MSR%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s",
            spec_reg_str(ins).c_str(),
            regular_reg_str(ins->n).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_mul_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: MULS <Rdm>, <Rn>, <Rdm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "MULS"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->d).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_mul_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: MUL<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "MUL%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_mul_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: MUL{S}<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "MUL%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_mvn_immediate_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: MVN{S}<c> <Rd>, #<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "MVN%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, #%s",
            regular_reg_str(ins->d).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_mvn_immediate_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: MVN{S}<c> <Rd>, #<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "MVN%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, #%s",
            regular_reg_str(ins->d).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_mvn_register_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: MVNS <Rd>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "MVNS"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_mvn_register_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: MVN{S}<c>.W <Rd>, <Rm>{, <shift>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "MVN%s%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str(),
            ".W"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->m).c_str(),
            shift_str(ins->shift_t, ins->shift_n).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_mvn_register_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: MVN{S}<c> <Rd>, <Rm>{, <shift>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "MVN%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->m).c_str(),
            shift_str(ins->shift_t, ins->shift_n).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_mvn_register_shifted_register_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: MVN{S}<c> <Rd>, <Rm>, <type> <Rs>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "MVN%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->m).c_str(),
            shift_type_str(ins->shift_t).c_str(),
            regular_reg_str(ins->s).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_nop_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: NOP<c>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "NOP%s",
            c_str(ins).c_str()
    );

    return string(op_name);
}

string decode_nop_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: NOP<c>.W
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "NOP%s%s",
            c_str(ins).c_str(),
            ".W"
    );

    return string(op_name);
}

string decode_nop_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: NOP<c>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "NOP%s",
            c_str(ins).c_str()
    );

    return string(op_name);
}

string decode_orn_immediate_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: ORN{S}<c> <Rd>, <Rn>, #<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "ORN%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, #%s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_orn_register_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: ORN{S}<c> <Rd>, <Rn>, <Rm>{, <shift>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "ORN%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            shift_str(ins->shift_t, ins->shift_n).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_orr_immediate_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: ORR{S}<c> <Rd>, <Rn>, #<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "ORR%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, #%s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_orr_immediate_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: ORR{S}<c> <Rd>, <Rn>, #<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "ORR%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, #%s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_orr_register_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: ORRS <Rdn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "ORRS"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_orr_register_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: ORR{S}<c>.W <Rd>, <Rn>, <Rm>{, <shift>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "ORR%s%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str(),
            ".W"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            shift_str(ins->shift_t, ins->shift_n).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_orr_register_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: ORR{S}<c> <Rd>, <Rn>, <Rm>{, <shift>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "ORR%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            shift_str(ins->shift_t, ins->shift_n).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_orr_register_shifted_register_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: ORR{S}<c> <Rd>, <Rn>, <Rm>, <type> <Rs>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "ORR%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, %s %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            shift_type_str(ins->shift_t).c_str(),
            regular_reg_str(ins->s).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_pld_pldw_immediate_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: PLD{W}<c> [<Rn>, #<imm32>]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "PLD%s%s",
            W_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " [%s, #%s]",
            regular_reg_str(ins->n).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_pld_pldw_immediate_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: PLD{W}<c> [<Rn>, #-<imm32>]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "PLD%s%s",
            W_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " [%s, #-%s]",
            regular_reg_str(ins->n).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_pld_literal_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: PLD<c> [pc, #+/-<imm32>]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "PLD%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " [pc, #%s%s]",
            ins->add ? "" : "-",
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_pld_pldw_register_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: PLD{W}<c> [<Rn>, <Rm>{, LSL #<shift_n>}]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "PLD%s%s",
            W_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " [%s, %s, LSL #%s]",
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            integer_to_string(ins->shift_n, ins->shift_n >= 10).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_pli_immediate_literal_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: PLI<c> [<Rn>, #<imm32>]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "PLI%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " [%s, #%s]",
            regular_reg_str(ins->n).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_pli_immediate_literal_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: PLI<c> [<Rn>, #-<imm32>]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "PLI%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " [%s, #-%s]",
            regular_reg_str(ins->n).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_pli_immediate_literal_t3_to_string(const ARMInstruction *ins) {
    // DEBUG: PLI<c> [pc, #+/-<imm32>]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "PLI%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " [pc, #%s%s]",
            ins->add ? "" : "-",
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_pop_thumb_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: POP<c> <registers>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "POP%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s",
            registers_str(ins->registers).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_pop_thumb_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: POP<c>.W <registers>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "POP%s%s",
            c_str(ins).c_str(),
            ".W"
    );

    snprintf(op_args, sizeof(op_args),
            " %s",
            registers_str(ins->registers).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_pop_thumb_t3_to_string(const ARMInstruction *ins) {
    // DEBUG: POP<c>.W <registers>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "POP%s%s",
            c_str(ins).c_str(),
            ".W"
    );

    snprintf(op_args, sizeof(op_args),
            " %s",
            registers_str(ins->registers).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_pop_arm_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: POP<c> <registers>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "POP%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s",
            registers_str(ins->registers).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_pop_arm_a2_to_string(const ARMInstruction *ins) {
    // DEBUG: POP<c> <registers>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "POP%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s",
            registers_str(ins->registers).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_push_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: PUSH<c> <registers>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "PUSH%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s",
            registers_str(ins->registers).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_push_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: PUSH<c>.W <registers>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "PUSH%s%s",
            c_str(ins).c_str(),
            ".W"
    );

    snprintf(op_args, sizeof(op_args),
            " %s",
            registers_str(ins->registers).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_push_t3_to_string(const ARMInstruction *ins) {
    // DEBUG: PUSH<c>.W <registers>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "PUSH%s%s",
            c_str(ins).c_str(),
            ".W"
    );

    snprintf(op_args, sizeof(op_args),
            " %s",
            registers_str(ins->registers).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_push_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: PUSH<c> <registers>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "PUSH%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s",
            registers_str(ins->registers).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_push_a2_to_string(const ARMInstruction *ins) {
    // DEBUG: PUSH<c> <registers>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "PUSH%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s",
            registers_str(ins->registers).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_qadd_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: QADD<c> <Rd>, <Rm>, <Rn>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "QADD%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->m).c_str(),
            regular_reg_str(ins->n).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_qadd_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: QADD<c> <Rd>, <Rm>, <Rn>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "QADD%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->m).c_str(),
            regular_reg_str(ins->n).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_qadd16_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: QADD16<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "QADD16%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_qadd16_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: QADD16<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "QADD16%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_qadd8_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: QADD8<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "QADD8%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_qadd8_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: QADD8<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "QADD8%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_qasx_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: QASX<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "QASX%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_qasx_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: QASX<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "QASX%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_qdadd_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: QDADD<c> <Rd>, <Rm>, <Rn>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "QDADD%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->m).c_str(),
            regular_reg_str(ins->n).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_qdadd_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: QDADD<c> <Rd>, <Rm>, <Rn>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "QDADD%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->m).c_str(),
            regular_reg_str(ins->n).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_qdsub_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: QDSUB<c> <Rd>, <Rm>, <Rn>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "QDSUB%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->m).c_str(),
            regular_reg_str(ins->n).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_qdsub_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: QDSUB<c> <Rd>, <Rm>, <Rn>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "QDSUB%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->m).c_str(),
            regular_reg_str(ins->n).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_qsax_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: QSAX<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "QSAX%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_qsax_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: QSAX<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "QSAX%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_qsub_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: QSUB<c> <Rd>, <Rm>, <Rn>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "QSUB%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->m).c_str(),
            regular_reg_str(ins->n).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_qsub_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: QSUB<c> <Rd>, <Rm>, <Rn>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "QSUB%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->m).c_str(),
            regular_reg_str(ins->n).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_qsub16_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: QSUB16<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "QSUB16%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_qsub16_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: QSUB16<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "QSUB16%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_qsub8_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: QSUB8<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "QSUB8%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_qsub8_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: QSUB8<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "QSUB8%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_rbit_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: RBIT<c> <Rd>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "RBIT%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_rbit_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: RBIT<c> <Rd>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "RBIT%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_rev_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: REV<c> <Rd>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "REV%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_rev_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: REV<c>.W <Rd>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "REV%s%s",
            c_str(ins).c_str(),
            ".W"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_rev_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: REV<c> <Rd>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "REV%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_rev16_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: REV16<c> <Rd>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "REV16%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_rev16_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: REV16<c>.W <Rd>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "REV16%s%s",
            c_str(ins).c_str(),
            ".W"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_rev16_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: REV16<c> <Rd>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "REV16%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_revsh_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: REVSH<c> <Rd>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "REVSH%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_revsh_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: REVSH<c>.W <Rd>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "REVSH%s%s",
            c_str(ins).c_str(),
            ".W"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_revsh_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: REVSH<c> <Rd>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "REVSH%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ror_immediate_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: ROR{S}<c> <Rd>, <Rm>, #<shift_n>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "ROR%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, #%s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->m).c_str(),
            integer_to_string(ins->shift_n, ins->shift_n >= 10).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ror_immediate_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: ROR{S}<c> <Rd>, <Rm>, #<shift_n>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "ROR%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, #%s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->m).c_str(),
            integer_to_string(ins->shift_n, ins->shift_n >= 10).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ror_register_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: RORS <Rdn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "RORS"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ror_register_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: ROR{S}<c>.W <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "ROR%s%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str(),
            ".W"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ror_register_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: ROR{S}<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "ROR%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_rrx_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: RRX{S}<c> <Rd>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "RRX%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_rrx_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: RRX{S}<c> <Rd>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "RRX%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_rsb_immediate_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: RSB{S} <Rd>, <Rn>, #<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "RSB%s",
            S_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, #%s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_rsb_immediate_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: RSB{S}<c>.W <Rd>, <Rn>, #<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "RSB%s%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str(),
            ".W"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, #%s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_rsb_immediate_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: RSB{S}<c> <Rd>, <Rn>, #<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "RSB%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, #%s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_rsb_register_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: RSB{S}<c> <Rd>, <Rn>, <Rm>{, <shift>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "RSB%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            shift_str(ins->shift_t, ins->shift_n).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_rsb_register_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: RSB{S}<c> <Rd>, <Rn>, <Rm>{, <shift>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "RSB%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            shift_str(ins->shift_t, ins->shift_n).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_rsb_register_shifted_register_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: RSB{S}<c> <Rd>, <Rn>, <Rm>, <type> <Rs>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "RSB%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, %s %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            shift_type_str(ins->shift_t).c_str(),
            regular_reg_str(ins->s).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_rsc_immediate_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: RSC{S}<c> <Rd>, <Rn>, #<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "RSC%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, #%s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_rsc_register_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: RSC{S}<c> <Rd>, <Rn>, <Rm>{, <shift>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "RSC%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            shift_str(ins->shift_t, ins->shift_n).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_rsc_register_shifted_register_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: RSC{S}<c> <Rd>, <Rn>, <Rm>, <type> <Rs>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "RSC%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, %s %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            shift_type_str(ins->shift_t).c_str(),
            regular_reg_str(ins->s).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_sadd16_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: SADD16<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SADD16%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_sadd16_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: SADD16<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SADD16%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_sadd8_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: SADD8<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SADD8%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_sadd8_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: SADD8<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SADD8%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_sasx_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: SASX<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SASX%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_sasx_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: SASX<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SASX%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_sbc_immediate_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: SBC{S}<c> <Rd>, <Rn>, #<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SBC%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, #%s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_sbc_immediate_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: SBC{S}<c> <Rd>, <Rn>, #<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SBC%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, #%s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_sbc_register_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: SBCS <Rdn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SBCS"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_sbc_register_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: SBC{S}<c>.W <Rd>, <Rn>, <Rm>{, <shift>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SBC%s%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str(),
            ".W"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            shift_str(ins->shift_t, ins->shift_n).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_sbc_register_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: SBC{S}<c> <Rd>, <Rn>, <Rm>{, <shift>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SBC%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            shift_str(ins->shift_t, ins->shift_n).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_sbc_register_shifted_register_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: SBC{S}<c> <Rd>, <Rn>, <Rm>, <type> <Rs>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SBC%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, %s %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            shift_type_str(ins->shift_t).c_str(),
            regular_reg_str(ins->s).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_sbfx_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: SBFX<c> <Rd>, <Rn>, #<lsb>, #<widthminus1>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SBFX%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, #%s, #%s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            integer_to_string(ins->lsbit, ins->lsbit >= 10).c_str(),
            integer_to_string(ins->widthminus1 + 1, ins->widthminus1 + 1 >= 10).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_sbfx_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: SBFX<c> <Rd>, <Rn>, #<lsb>, #<widthminus1>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SBFX%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, #%s, #%s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            integer_to_string(ins->lsbit, ins->lsbit >= 10).c_str(),
            integer_to_string(ins->widthminus1 + 1, ins->widthminus1 + 1 >= 10).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_sdiv_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: SDIV<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SDIV%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_sdiv_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: SDIV<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SDIV%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_sel_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: SEL<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SEL%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_sel_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: SEL<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SEL%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_setend_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: SETEND <endian_specifier>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SETEND"
    );

    snprintf(op_args, sizeof(op_args),
            " %s",
            endian_specifier_str(ins->set_bigend).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_setend_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: SETEND <endian_specifier>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SETEND"
    );

    snprintf(op_args, sizeof(op_args),
            " %s",
            endian_specifier_str(ins->set_bigend).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_sev_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: SEV<c>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SEV%s",
            c_str(ins).c_str()
    );

    return string(op_name);
}

string decode_sev_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: SEV<c>.W
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SEV%s%s",
            c_str(ins).c_str(),
            ".W"
    );

    return string(op_name);
}

string decode_sev_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: SEV<c>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SEV%s",
            c_str(ins).c_str()
    );

    return string(op_name);
}

string decode_shadd16_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: SHADD16<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SHADD16%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_shadd16_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: SHADD16<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SHADD16%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_shadd8_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: SHADD8<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SHADD8%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_shadd8_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: SHADD8<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SHADD8%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_shasx_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: SHASX<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SHASX%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_shasx_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: SHASX<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SHASX%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_shsax_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: SHSAX<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SHSAX%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_shsax_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: SHSAX<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SHSAX%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_shsub16_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: SHSUB16<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SHSUB16%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_shsub16_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: SHSUB16<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SHSUB16%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_shsub8_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: SHSUB8<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SHSUB8%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_shsub8_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: SHSUB8<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SHSUB8%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_smlabb_smlabt_smlatb_smlatt_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: SMLA<x><y><c> <Rd>, <Rn>, <Rm>, <Ra>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SMLA%s%s%s",
            x_str(ins).c_str(),
            y_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            regular_reg_str(ins->a).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_smlabb_smlabt_smlatb_smlatt_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: SMLA<x><y><c> <Rd>, <Rn>, <Rm>, <Ra>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SMLA%s%s%s",
            x_str(ins).c_str(),
            y_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            regular_reg_str(ins->a).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_smlad_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: SMLAD{X}<c> <Rd>, <Rn>, <Rm>, <Ra>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SMLAD%s%s",
            X_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            regular_reg_str(ins->a).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_smlad_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: SMLAD{X}<c> <Rd>, <Rn>, <Rm>, <Ra>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SMLAD%s%s",
            X_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            regular_reg_str(ins->a).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_smlal_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: SMLAL<c> <RdLo>, <RdHi>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SMLAL%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, %s",
            regular_reg_str(ins->dLo).c_str(),
            regular_reg_str(ins->dHi).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_smlal_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: SMLAL{S}<c> <RdLo>, <RdHi>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SMLAL%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, %s",
            regular_reg_str(ins->dLo).c_str(),
            regular_reg_str(ins->dHi).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_smlalbb_smlalbt_smlaltb_smlaltt_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: SMLAL<x><y><c> <RdLo>, <RdHi>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SMLAL%s%s%s",
            x_str(ins).c_str(),
            y_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, %s",
            regular_reg_str(ins->dLo).c_str(),
            regular_reg_str(ins->dHi).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_smlalbb_smlalbt_smlaltb_smlaltt_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: SMLAL<x><y><c> <RdLo>, <RdHi>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SMLAL%s%s%s",
            x_str(ins).c_str(),
            y_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, %s",
            regular_reg_str(ins->dLo).c_str(),
            regular_reg_str(ins->dHi).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_smlald_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: SMLALD{X}<c> <RdLo>, <RdHi>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SMLALD%s%s",
            X_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, %s",
            regular_reg_str(ins->dLo).c_str(),
            regular_reg_str(ins->dHi).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_smlald_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: SMLALD{X}<c> <RdLo>, <RdHi>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SMLALD%s%s",
            X_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, %s",
            regular_reg_str(ins->dLo).c_str(),
            regular_reg_str(ins->dHi).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_smlawb_smlawt_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: SMLAW<y><c> <Rd>, <Rn>, <Rm>, <Ra>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SMLAW%s%s",
            y_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            regular_reg_str(ins->a).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_smlawb_smlawt_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: SMLAW<y><c> <Rd>, <Rn>, <Rm>, <Ra>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SMLAW%s%s",
            y_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            regular_reg_str(ins->a).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_smlsd_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: SMLSD{X}<c> <Rd>, <Rn>, <Rm>, <Ra>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SMLSD%s%s",
            X_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            regular_reg_str(ins->a).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_smlsd_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: SMLSD{X}<c> <Rd>, <Rn>, <Rm>, <Ra>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SMLSD%s%s",
            X_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            regular_reg_str(ins->a).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_smlsld_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: SMLSLD{X}<c> <RdLo>, <RdHi>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SMLSLD%s%s",
            X_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, %s",
            regular_reg_str(ins->dLo).c_str(),
            regular_reg_str(ins->dHi).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_smlsld_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: SMLSLD{X}<c> <RdLo>, <RdHi>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SMLSLD%s%s",
            X_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, %s",
            regular_reg_str(ins->dLo).c_str(),
            regular_reg_str(ins->dHi).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_smmla_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: SMMLA{R}<c> <Rd>, <Rn>, <Rm>, <Ra>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SMMLA%s%s",
            R_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            regular_reg_str(ins->a).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_smmla_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: SMMLA{R}<c> <Rd>, <Rn>, <Rm>, <Ra>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SMMLA%s%s",
            R_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            regular_reg_str(ins->a).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_smmls_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: SMMLS{R}<c> <Rd>, <Rn>, <Rm>, <Ra>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SMMLS%s%s",
            R_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            regular_reg_str(ins->a).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_smmls_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: SMMLS{R}<c> <Rd>, <Rn>, <Rm>, <Ra>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SMMLS%s%s",
            R_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            regular_reg_str(ins->a).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_smmul_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: SMMUL{R}<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SMMUL%s%s",
            R_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_smmul_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: SMMUL{R}<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SMMUL%s%s",
            R_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_smuad_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: SMUAD{X}<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SMUAD%s%s",
            X_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_smuad_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: SMUAD{X}<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SMUAD%s%s",
            X_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_smulbb_smulbt_smultb_smultt_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: SMUL<x><y><c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SMUL%s%s%s",
            x_str(ins).c_str(),
            y_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_smulbb_smulbt_smultb_smultt_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: SMUL<x><y><c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SMUL%s%s%s",
            x_str(ins).c_str(),
            y_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_smull_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: SMULL<c> <RdLo>, <RdHi>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SMULL%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, %s",
            regular_reg_str(ins->dLo).c_str(),
            regular_reg_str(ins->dHi).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_smull_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: SMULL{S}<c> <RdLo>, <RdHi>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SMULL%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, %s",
            regular_reg_str(ins->dLo).c_str(),
            regular_reg_str(ins->dHi).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_smulwb_smulwt_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: SMULW<y><c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SMULW%s%s",
            y_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_smulwb_smulwt_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: SMULW<y><c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SMULW%s%s",
            y_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_smusd_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: SMUSD{X}<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SMUSD%s%s",
            X_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_smusd_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: SMUSD{X}<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SMUSD%s%s",
            X_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ssat_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: SSAT<c> <Rd>, #<saturate_to>, <Rn>{, <shift>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SSAT%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, #%s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            integer_to_string(ins->saturate_to, false).c_str(),
            regular_reg_str(ins->n).c_str(),
            shift_str(ins->shift_t, ins->shift_n).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ssat_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: SSAT<c> <Rd>, #<saturate_to>, <Rn>{, <shift>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SSAT%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, #%s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            integer_to_string(ins->saturate_to, false).c_str(),
            regular_reg_str(ins->n).c_str(),
            shift_str(ins->shift_t, ins->shift_n).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ssat16_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: SSAT16<c> <Rd>, #<saturate_to>, <Rn>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SSAT16%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, #%s, %s",
            regular_reg_str(ins->d).c_str(),
            integer_to_string(ins->saturate_to, false).c_str(),
            regular_reg_str(ins->n).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ssat16_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: SSAT16<c> <Rd>, #<saturate_to>, <Rn>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SSAT16%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, #%s, %s",
            regular_reg_str(ins->d).c_str(),
            integer_to_string(ins->saturate_to, false).c_str(),
            regular_reg_str(ins->n).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ssax_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: SSAX<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SSAX%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ssax_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: SSAX<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SSAX%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ssub16_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: SSUB16<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SSUB16%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ssub16_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: SSUB16<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SSUB16%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ssub8_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: SSUB8<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SSUB8%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ssub8_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: SSUB8<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SSUB8%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_stm_stmia_stmea_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: STM<c> <Rn>!, <registers>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "STM%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s!, %s",
            regular_reg_str(ins->n).c_str(),
            registers_str(ins->registers).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_stm_stmia_stmea_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: STM<c>.W <Rn>{!}, <registers>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "STM%s%s",
            c_str(ins).c_str(),
            ".W"
    );

    snprintf(op_args, sizeof(op_args),
            " %s%s, %s",
            regular_reg_str(ins->n).c_str(),
            ins->wback ? "!" : "",
            registers_str(ins->registers).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_stm_stmia_stmea_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: STM<c> <Rn>{!}, <registers>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "STM%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s%s, %s",
            regular_reg_str(ins->n).c_str(),
            ins->wback ? "!" : "",
            registers_str(ins->registers).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_stmda_stmed_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: STMDA<c> <Rn>{!}, <registers>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "STMDA%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s%s, %s",
            regular_reg_str(ins->n).c_str(),
            ins->wback ? "!" : "",
            registers_str(ins->registers).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_stmdb_stmfd_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: STMDB<c> <Rn>{!}, <registers>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "STMDB%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s%s, %s",
            regular_reg_str(ins->n).c_str(),
            ins->wback ? "!" : "",
            registers_str(ins->registers).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_stmdb_stmfd_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: STMDB<c> <Rn>{!}, <registers>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "STMDB%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s%s, %s",
            regular_reg_str(ins->n).c_str(),
            ins->wback ? "!" : "",
            registers_str(ins->registers).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_stmib_stmfa_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: STMIB<c> <Rn>{!}, <registers>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "STMIB%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s%s, %s",
            regular_reg_str(ins->n).c_str(),
            ins->wback ? "!" : "",
            registers_str(ins->registers).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_str_immediate_thumb_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: STR<c> <Rt>, [<Rn>{, #<imm32>}]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "STR%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [%s, #%s]",
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->n).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_str_immediate_thumb_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: STR<c> <Rt>, [SP, #<imm32>]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "STR%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [SP, #%s]",
            regular_reg_str(ins->t).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_str_immediate_thumb_t3_to_string(const ARMInstruction *ins) {
    // DEBUG: STR<c>.W <Rt>, [<Rn>, #<imm32>]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "STR%s%s",
            c_str(ins).c_str(),
            ".W"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [%s, #%s]",
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->n).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_str_register_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: STR<c> <Rt>, [<Rn>, <Rm>]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "STR%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [%s, %s]",
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_str_register_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: STR<c>.W <Rt>, [<Rn>, <Rm>{, LSL #<shift_n>}]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "STR%s%s",
            c_str(ins).c_str(),
            ".W"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [%s, %s, LSL #%s]",
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            integer_to_string(ins->shift_n, ins->shift_n >= 10).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_strb_immediate_thumb_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: STRB<c> <Rt>, [<Rn>, #<imm32>]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "STRB%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [%s, #%s]",
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->n).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_strb_immediate_thumb_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: STRB<c>.W <Rt>, [<Rn>, #<imm32>]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "STRB%s%s",
            c_str(ins).c_str(),
            ".W"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [%s, #%s]",
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->n).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_strb_register_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: STRB<c> <Rt>, [<Rn>, <Rm>]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "STRB%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [%s, %s]",
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_strb_register_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: STRB<c>.W <Rt>, [<Rn>, <Rm>{, LSL #<shift_n>}]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "STRB%s%s",
            c_str(ins).c_str(),
            ".W"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [%s, %s, LSL #%s]",
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            integer_to_string(ins->shift_n, ins->shift_n >= 10).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_strbt_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: STRBT<c> <Rt>, [<Rn>, #<imm32>]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "STRBT%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [%s, #%s]",
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->n).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_strbt_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: STRBT<c> <Rt>, [<Rn>], #+/-<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "STRBT%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [%s], #%s%s",
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->n).c_str(),
            ins->add ? "" : "-",
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_strbt_a2_to_string(const ARMInstruction *ins) {
    // DEBUG: STRBT<c> <Rt>, [<Rn>], +/-<Rm>{, <shift>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "STRBT%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [%s], %s%s, %s",
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->n).c_str(),
            ins->add ? "" : "-",
            regular_reg_str(ins->m).c_str(),
            shift_str(ins->shift_t, ins->shift_n).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_strex_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: STREX<c> <Rd>, <Rt>, [<Rn>{, #<imm32>}]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "STREX%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, [%s, #%s]",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->n).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_strex_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: STREX<c> <Rd>, <Rt>, [<Rn>]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "STREX%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, [%s]",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->n).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_strexb_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: STREXB<c> <Rd>, <Rt>, [<Rn>]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "STREXB%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, [%s]",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->n).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_strexb_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: STREXB<c> <Rd>, <Rt>, [<Rn>]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "STREXB%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, [%s]",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->n).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_strexd_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: STREXD<c> <Rd>, <Rt>, <Rt2>, [<Rn>]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "STREXD%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, [%s]",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->t2).c_str(),
            regular_reg_str(ins->n).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_strexd_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: STREXD<c> <Rd>, <Rt>, <Rt2>, [<Rn>]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "STREXD%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, [%s]",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->t2).c_str(),
            regular_reg_str(ins->n).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_strexh_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: STREXH<c> <Rd>, <Rt>, [<Rn>]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "STREXH%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, [%s]",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->n).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_strexh_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: STREXH<c> <Rd>, <Rt>, [<Rn>]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "STREXH%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, [%s]",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->n).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_strh_immediate_thumb_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: STRH<c> <Rt>, [<Rn>{, #<imm32>}]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "STRH%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [%s, #%s]",
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->n).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_strh_immediate_thumb_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: STRH<c>.W <Rt>, [<Rn>{, #<imm32>}]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "STRH%s%s",
            c_str(ins).c_str(),
            ".W"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [%s, #%s]",
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->n).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_strh_register_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: STRH<c> <Rt>, [<Rn>, <Rm>]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "STRH%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [%s, %s]",
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_strh_register_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: STRH<c>.W <Rt>, [<Rn>, <Rm>{, LSL #<shift_n>}]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "STRH%s%s",
            c_str(ins).c_str(),
            ".W"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [%s, %s, LSL #%s]",
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            integer_to_string(ins->shift_n, ins->shift_n >= 10).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_strht_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: STRHT<c> <Rt>, [<Rn>, #<imm32>]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "STRHT%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [%s, #%s]",
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->n).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_strht_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: STRHT<c> <Rt>, [<Rn>]{, #+/-<imm32>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "STRHT%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [%s], #%s%s",
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->n).c_str(),
            ins->add ? "" : "-",
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_strht_a2_to_string(const ARMInstruction *ins) {
    // DEBUG: STRHT<c> <Rt>, [<Rn>], +/-<Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "STRHT%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [%s], %s%s",
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->n).c_str(),
            ins->add ? "" : "-",
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_strt_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: STRT<c> <Rt>, [<Rn>, #<imm32>]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "STRT%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [%s, #%s]",
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->n).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_strt_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: STRT<c> <Rt>, [<Rn>]{, #+/-<imm32>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "STRT%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [%s], #%s%s",
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->n).c_str(),
            ins->add ? "" : "-",
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_strt_a2_to_string(const ARMInstruction *ins) {
    // DEBUG: STRT<c> <Rt>, [<Rn>], +/-<Rm>{, <shift>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "STRT%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [%s], %s%s, %s",
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->n).c_str(),
            ins->add ? "" : "-",
            regular_reg_str(ins->m).c_str(),
            shift_str(ins->shift_t, ins->shift_n).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_sub_immediate_thumb_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: SUBS <Rd>, <Rn>, #<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SUBS"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, #%s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_sub_immediate_thumb_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: SUBS <Rdn>, #<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SUBS"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, #%s",
            regular_reg_str(ins->d).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_sub_immediate_thumb_t3_to_string(const ARMInstruction *ins) {
    // DEBUG: SUB{S}<c>.W <Rd>, <Rn>, #<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SUB%s%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str(),
            ".W"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, #%s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_sub_immediate_thumb_t4_to_string(const ARMInstruction *ins) {
    // DEBUG: SUBW<c> <Rd>, <Rn>, #<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SUBW%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, #%s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_sub_immediate_arm_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: SUB{S}<c> <Rd>, <Rn>, #<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SUB%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, #%s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_sub_register_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: SUBS <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SUBS"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_sub_register_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: SUB{S}<c>.W <Rd>, <Rn>, <Rm>{, <shift>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SUB%s%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str(),
            ".W"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            shift_str(ins->shift_t, ins->shift_n).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_sub_register_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: SUB{S}<c> <Rd>, <Rn>, <Rm>{, <shift>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SUB%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            shift_str(ins->shift_t, ins->shift_n).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_sub_register_shifted_register_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: SUB{S}<c> <Rd>, <Rn>, <Rm>, <type> <Rs>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SUB%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, %s %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            shift_type_str(ins->shift_t).c_str(),
            regular_reg_str(ins->s).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_sub_sp_minus_immediate_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: SUB<c> SP, #<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SUB%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " SP, #%s",
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_sub_sp_minus_immediate_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: SUB{S}<c>.W <Rd>, SP, #<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SUB%s%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str(),
            ".W"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, SP, #%s",
            regular_reg_str(ins->d).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_sub_sp_minus_immediate_t3_to_string(const ARMInstruction *ins) {
    // DEBUG: SUBW<c> <Rd>, SP, #<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SUBW%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, SP, #%s",
            regular_reg_str(ins->d).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_sub_sp_minus_immediate_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: SUB{S}<c> <Rd>, SP, #<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SUB%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, SP, #%s",
            regular_reg_str(ins->d).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_sub_sp_minus_register_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: SUB{S}<c> <Rd>, SP, <Rm>{, <shift>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SUB%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, SP, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->m).c_str(),
            shift_str(ins->shift_t, ins->shift_n).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_sub_sp_minus_register_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: SUB{S}<c> <Rd>, SP, <Rm>{, <shift>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SUB%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, SP, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->m).c_str(),
            shift_str(ins->shift_t, ins->shift_n).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_svc_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: SVC<c> #<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SVC%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " #%s",
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_svc_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: SVC<c> #<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SVC%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " #%s",
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_swp_swpb_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: SWP{B}<c> <Rt>, <Rt2>, [<Rn>]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SWP%s%s",
            B_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, [%s]",
            regular_reg_str(ins->t).c_str(),
            regular_reg_str(ins->t2).c_str(),
            regular_reg_str(ins->n).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_sxtab_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: SXTAB<c> <Rd>, <Rn>, <Rm>{, <rotation>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SXTAB%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            rotation_str(ins->rotation).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_sxtab_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: SXTAB<c> <Rd>, <Rn>, <Rm>{, <rotation>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SXTAB%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            rotation_str(ins->rotation).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_sxtab16_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: SXTAB16<c> <Rd>, <Rn>, <Rm>{, <rotation>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SXTAB16%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            rotation_str(ins->rotation).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_sxtab16_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: SXTAB16<c> <Rd>, <Rn>, <Rm>{, <rotation>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SXTAB16%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            rotation_str(ins->rotation).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_sxtah_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: SXTAH<c> <Rd>, <Rn>, <Rm>{, <rotation>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SXTAH%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            rotation_str(ins->rotation).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_sxtah_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: SXTAH<c> <Rd>, <Rn>, <Rm>{, <rotation>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SXTAH%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            rotation_str(ins->rotation).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_sxtb_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: SXTB<c> <Rd>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SXTB%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_sxtb_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: SXTB<c>.W <Rd>, <Rm>{, <rotation>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SXTB%s%s",
            c_str(ins).c_str(),
            ".W"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->m).c_str(),
            rotation_str(ins->rotation).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_sxtb_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: SXTB<c> <Rd>, <Rm>{, <rotation>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SXTB%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->m).c_str(),
            rotation_str(ins->rotation).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_sxtb16_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: SXTB16<c> <Rd>, <Rm>{, <rotation>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SXTB16%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->m).c_str(),
            rotation_str(ins->rotation).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_sxtb16_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: SXTB16<c> <Rd>, <Rm>{, <rotation>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SXTB16%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->m).c_str(),
            rotation_str(ins->rotation).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_sxth_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: SXTH<c> <Rd>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SXTH%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_sxth_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: SXTH<c>.W <Rd>, <Rm>{, <rotation>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SXTH%s%s",
            c_str(ins).c_str(),
            ".W"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->m).c_str(),
            rotation_str(ins->rotation).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_sxth_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: SXTH<c> <Rd>, <Rm>{, <rotation>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SXTH%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->m).c_str(),
            rotation_str(ins->rotation).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_tbb_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: TBB<c> [<Rn>, <Rm>]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "TBB%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " [%s, %s]",
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_tbh_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: TBH<c> [<Rn>, <Rm>, LSL #1]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "TBH%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " [%s, %s, LSL #1]",
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_teq_immediate_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: TEQ<c> <Rn>, #<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "TEQ%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, #%s",
            regular_reg_str(ins->n).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_teq_immediate_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: TEQ<c> <Rn>, #<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "TEQ%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, #%s",
            regular_reg_str(ins->n).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_teq_register_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: TEQ<c> <Rn>, <Rm>{, <shift>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "TEQ%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            shift_str(ins->shift_t, ins->shift_n).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_teq_register_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: TEQ<c> <Rn>, <Rm>{, <shift>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "TEQ%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            shift_str(ins->shift_t, ins->shift_n).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_teq_register_shifted_register_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: TEQ<c> <Rn>, <Rm>, <type> <Rs>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "TEQ%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s %s",
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            shift_type_str(ins->shift_t).c_str(),
            regular_reg_str(ins->s).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_tst_immediate_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: TST<c> <Rn>, #<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "TST%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, #%s",
            regular_reg_str(ins->n).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_tst_immediate_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: TST<c> <Rn>, #<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "TST%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, #%s",
            regular_reg_str(ins->n).c_str(),
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_tst_register_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: TST<c> <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "TST%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s",
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_tst_register_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: TST<c>.W <Rn>, <Rm>{, <shift>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "TST%s%s",
            c_str(ins).c_str(),
            ".W"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            shift_str(ins->shift_t, ins->shift_n).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_tst_register_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: TST<c> <Rn>, <Rm>{, <shift>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "TST%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            shift_str(ins->shift_t, ins->shift_n).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_tst_register_shifted_register_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: TST<c> <Rn>, <Rm>, <type> <Rs>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "TST%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s %s",
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            shift_type_str(ins->shift_t).c_str(),
            regular_reg_str(ins->s).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_uadd16_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: UADD16<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "UADD16%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_uadd16_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: UADD16<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "UADD16%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_uadd8_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: UADD8<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "UADD8%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_uadd8_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: UADD8<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "UADD8%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_uasx_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: UASX<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "UASX%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_uasx_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: UASX<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "UASX%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ubfx_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: UBFX<c> <Rd>, <Rn>, #<lsb>, #<widthminus1>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "UBFX%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, #%s, #%s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            integer_to_string(ins->lsbit, ins->lsbit >= 10).c_str(),
            integer_to_string(ins->widthminus1 + 1, ins->widthminus1 + 1 >= 10).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ubfx_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: UBFX<c> <Rd>, <Rn>, #<lsb>, #<widthminus1>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "UBFX%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, #%s, #%s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            integer_to_string(ins->lsbit, ins->lsbit >= 10).c_str(),
            integer_to_string(ins->widthminus1 + 1, ins->widthminus1 + 1 >= 10).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_udf_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: UDF<c> #<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "UDF%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " #%s",
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_udf_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: UDF<c>.W #<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "UDF%s%s",
            c_str(ins).c_str(),
            ".W"
    );

    snprintf(op_args, sizeof(op_args),
            " #%s",
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_udf_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: UDF #<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "UDF"
    );

    snprintf(op_args, sizeof(op_args),
            " #%s",
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_udiv_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: UDIV<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "UDIV%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_udiv_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: UDIV<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "UDIV%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_uhadd16_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: UHADD16<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "UHADD16%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_uhadd16_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: UHADD16<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "UHADD16%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_uhadd8_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: UHADD8<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "UHADD8%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_uhadd8_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: UHADD8<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "UHADD8%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_uhasx_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: UHASX<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "UHASX%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_uhasx_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: UHASX<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "UHASX%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_uhsax_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: UHSAX<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "UHSAX%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_uhsax_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: UHSAX<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "UHSAX%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_uhsub16_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: UHSUB16<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "UHSUB16%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_uhsub16_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: UHSUB16<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "UHSUB16%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_uhsub8_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: UHSUB8<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "UHSUB8%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_uhsub8_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: UHSUB8<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "UHSUB8%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_umaal_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: UMAAL<c> <RdLo>, <RdHi>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "UMAAL%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, %s",
            regular_reg_str(ins->dLo).c_str(),
            regular_reg_str(ins->dHi).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_umaal_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: UMAAL<c> <RdLo>, <RdHi>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "UMAAL%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, %s",
            regular_reg_str(ins->dLo).c_str(),
            regular_reg_str(ins->dHi).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_umlal_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: UMLAL<c> <RdLo>, <RdHi>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "UMLAL%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, %s",
            regular_reg_str(ins->dLo).c_str(),
            regular_reg_str(ins->dHi).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_umlal_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: UMLAL{S}<c> <RdLo>, <RdHi>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "UMLAL%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, %s",
            regular_reg_str(ins->dLo).c_str(),
            regular_reg_str(ins->dHi).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_umull_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: UMULL<c> <RdLo>, <RdHi>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "UMULL%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, %s",
            regular_reg_str(ins->dLo).c_str(),
            regular_reg_str(ins->dHi).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_umull_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: UMULL{S}<c> <RdLo>, <RdHi>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "UMULL%s%s",
            S_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, %s",
            regular_reg_str(ins->dLo).c_str(),
            regular_reg_str(ins->dHi).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_uqadd16_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: UQADD16<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "UQADD16%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_uqadd16_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: UQADD16<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "UQADD16%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_uqadd8_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: UQADD8<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "UQADD8%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_uqadd8_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: UQADD8<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "UQADD8%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_uqasx_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: UQASX<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "UQASX%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_uqasx_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: UQASX<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "UQASX%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_uqsax_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: UQSAX<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "UQSAX%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_uqsax_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: UQSAX<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "UQSAX%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_uqsub16_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: UQSUB16<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "UQSUB16%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_uqsub16_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: UQSUB16<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "UQSUB16%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_uqsub8_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: UQSUB8<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "UQSUB8%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_uqsub8_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: UQSUB8<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "UQSUB8%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_usad8_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: USAD8<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "USAD8%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_usad8_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: USAD8<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "USAD8%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_usada8_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: USADA8<c> <Rd>, <Rn>, <Rm>, <Ra>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "USADA8%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            regular_reg_str(ins->a).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_usada8_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: USADA8<c> <Rd>, <Rn>, <Rm>, <Ra>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "USADA8%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            regular_reg_str(ins->a).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_usat_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: USAT<c> <Rd>, #<saturate_to>, <Rn>{, <shift>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "USAT%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, #%s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            integer_to_string(ins->saturate_to, false).c_str(),
            regular_reg_str(ins->n).c_str(),
            shift_str(ins->shift_t, ins->shift_n).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_usat_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: USAT<c> <Rd>, #<saturate_to>, <Rn>{, <shift>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "USAT%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, #%s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            integer_to_string(ins->saturate_to, false).c_str(),
            regular_reg_str(ins->n).c_str(),
            shift_str(ins->shift_t, ins->shift_n).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_usat16_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: USAT16<c> <Rd>, #<saturate_to>, <Rn>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "USAT16%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, #%s, %s",
            regular_reg_str(ins->d).c_str(),
            integer_to_string(ins->saturate_to, false).c_str(),
            regular_reg_str(ins->n).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_usat16_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: USAT16<c> <Rd>, #<saturate_to>, <Rn>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "USAT16%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, #%s, %s",
            regular_reg_str(ins->d).c_str(),
            integer_to_string(ins->saturate_to, false).c_str(),
            regular_reg_str(ins->n).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_usax_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: USAX<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "USAX%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_usax_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: USAX<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "USAX%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_usub16_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: USUB16<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "USUB16%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_usub16_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: USUB16<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "USUB16%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_usub8_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: USUB8<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "USUB8%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_usub8_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: USUB8<c> <Rd>, <Rn>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "USUB8%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_uxtab_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: UXTAB<c> <Rd>, <Rn>, <Rm>{, <rotation>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "UXTAB%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            rotation_str(ins->rotation).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_uxtab_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: UXTAB<c> <Rd>, <Rn>, <Rm>{, <rotation>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "UXTAB%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            rotation_str(ins->rotation).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_uxtab16_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: UXTAB16<c> <Rd>, <Rn>, <Rm>{, <rotation>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "UXTAB16%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            rotation_str(ins->rotation).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_uxtab16_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: UXTAB16<c> <Rd>, <Rn>, <Rm>{, <rotation>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "UXTAB16%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            rotation_str(ins->rotation).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_uxtah_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: UXTAH<c> <Rd>, <Rn>, <Rm>{, <rotation>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "UXTAH%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            rotation_str(ins->rotation).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_uxtah_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: UXTAH<c> <Rd>, <Rn>, <Rm>{, <rotation>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "UXTAH%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            regular_reg_str(ins->m).c_str(),
            rotation_str(ins->rotation).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_uxtb_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: UXTB<c> <Rd>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "UXTB%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_uxtb_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: UXTB<c>.W <Rd>, <Rm>{, <rotation>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "UXTB%s%s",
            c_str(ins).c_str(),
            ".W"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->m).c_str(),
            rotation_str(ins->rotation).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_uxtb_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: UXTB<c> <Rd>, <Rm>{, <rotation>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "UXTB%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->m).c_str(),
            rotation_str(ins->rotation).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_uxtb16_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: UXTB16<c> <Rd>, <Rm>{, <rotation>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "UXTB16%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->m).c_str(),
            rotation_str(ins->rotation).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_uxtb16_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: UXTB16<c> <Rd>, <Rm>{, <rotation>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "UXTB16%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->m).c_str(),
            rotation_str(ins->rotation).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_uxth_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: UXTH<c> <Rd>, <Rm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "UXTH%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_uxth_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: UXTH<c>.W <Rd>, <Rm>{, <rotation>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "UXTH%s%s",
            c_str(ins).c_str(),
            ".W"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->m).c_str(),
            rotation_str(ins->rotation).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_uxth_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: UXTH<c> <Rd>, <Rm>{, <rotation>}
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "UXTH%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            regular_reg_str(ins->d).c_str(),
            regular_reg_str(ins->m).c_str(),
            rotation_str(ins->rotation).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_wfe_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: WFE<c>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "WFE%s",
            c_str(ins).c_str()
    );

    return string(op_name);
}

string decode_wfe_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: WFE<c>.W
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "WFE%s%s",
            c_str(ins).c_str(),
            ".W"
    );

    return string(op_name);
}

string decode_wfe_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: WFE<c>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "WFE%s",
            c_str(ins).c_str()
    );

    return string(op_name);
}

string decode_wfi_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: WFI<c>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "WFI%s",
            c_str(ins).c_str()
    );

    return string(op_name);
}

string decode_wfi_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: WFI<c>.W
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "WFI%s%s",
            c_str(ins).c_str(),
            ".W"
    );

    return string(op_name);
}

string decode_wfi_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: WFI<c>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "WFI%s",
            c_str(ins).c_str()
    );

    return string(op_name);
}

string decode_yield_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: YIELD<c>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "YIELD%s",
            c_str(ins).c_str()
    );

    return string(op_name);
}

string decode_yield_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: YIELD<c>.W
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "YIELD%s%s",
            c_str(ins).c_str(),
            ".W"
    );

    return string(op_name);
}

string decode_yield_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: YIELD<c>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "YIELD%s",
            c_str(ins).c_str()
    );

    return string(op_name);
}

string decode_eret_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: ERET
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "ERET"
    );

    return string(op_name);
}

string decode_eret_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: ERET
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "ERET"
    );

    return string(op_name);
}

string decode_hvc_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: HVC #<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "HVC"
    );

    snprintf(op_args, sizeof(op_args),
            " #%s",
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_hvc_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: HVC #<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "HVC"
    );

    snprintf(op_args, sizeof(op_args),
            " #%s",
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ldm_exception_return_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: LDM<amode><c> <Rn>{!}, <registers_with_pc> ^
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "LDM%s%s",
            amode_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s%s, %s ^",
            regular_reg_str(ins->n).c_str(),
            ins->wback ? "!" : "",
            registers_str(ins->registers | (1 << 15)).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_ldm_user_registers_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: LDM<amode><c> <Rn>, <registers_without_pc> ^
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "LDM%s%s",
            amode_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s ^",
            regular_reg_str(ins->n).c_str(),
            registers_str(ins->registers & ((1 << 15) - 1)).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_mrs_banked_register_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: MRS<c> <Rd>, <banked_reg>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "MRS%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s",
            regular_reg_str(ins->d).c_str(),
            banked_reg(ins).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_mrs_banked_register_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: MRS<c> <Rd>, <banked_reg>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "MRS%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s",
            regular_reg_str(ins->d).c_str(),
            banked_reg(ins).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_smc_previously_smi_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: SMC<c> #<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SMC%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " #%s",
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_smc_previously_smi_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: SMC<c> #<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SMC%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " #%s",
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_srs_thumb_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: SRSDB<c> SP{!}, #<mode>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SRSDB%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " SP%s, #%s",
            ins->wback ? "!" : "",
            integer_to_string(ins->mode, false).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_srs_thumb_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: SRS{IA}<c> SP{!}, #<mode>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SRS%s%s",
            IA_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " SP%s, #%s",
            ins->wback ? "!" : "",
            integer_to_string(ins->mode, false).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_srs_arm_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: SRS<amode> SP{!}, #<mode>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SRS%s",
            amode_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " SP%s, #%s",
            ins->wback ? "!" : "",
            integer_to_string(ins->mode, false).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_stm_user_registers_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: STM<amode><c> <Rn>, <registers> ^
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "STM%s%s",
            amode_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s ^",
            regular_reg_str(ins->n).c_str(),
            registers_str(ins->registers).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_subs_pc_lr_thumb_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: SUBS<c> PC, LR, #<imm32>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "SUBS%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " PC, LR, #%s",
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vabd_vabdl_integer_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: VABDL.<dt> <Qd>, <Dn>, <Dm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VABDL.%s",
            dt_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            quad_reg_str(ins->d >> 1).c_str(),
            double_reg_str(ins->n).c_str(),
            double_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vabd_vabdl_integer_a2_to_string(const ARMInstruction *ins) {
    // DEBUG: VABDL.<dt> <Qd>, <Dn>, <Dm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VABDL.%s",
            dt_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            quad_reg_str(ins->d >> 1).c_str(),
            double_reg_str(ins->n).c_str(),
            double_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vaddhn_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: VADDHN.<dt> <Dd>, <Qn>, <Qm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VADDHN.%s",
            dt_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            double_reg_str(ins->d).c_str(),
            quad_reg_str(ins->n >> 1).c_str(),
            quad_reg_str(ins->m >> 1).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vaddhn_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: VADDHN.<dt> <Dd>, <Qn>, <Qm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VADDHN.%s",
            dt_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            double_reg_str(ins->d).c_str(),
            quad_reg_str(ins->n >> 1).c_str(),
            quad_reg_str(ins->m >> 1).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vldm_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: VLDM{mode} <Rn>{!}, <list>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VLDM%s",
            mode_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s%s, %s",
            regular_reg_str(ins->n).c_str(),
            ins->wback ? "!" : "",
            list_str(ins).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vldm_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: VLDM{mode}<c> <Rn>{!}, <list>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VLDM%s%s",
            mode_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s%s, %s",
            regular_reg_str(ins->n).c_str(),
            ins->wback ? "!" : "",
            list_str(ins).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vldm_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: VLDM{mode} <Rn>{!}, <list>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VLDM%s",
            mode_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s%s, %s",
            regular_reg_str(ins->n).c_str(),
            ins->wback ? "!" : "",
            list_str(ins).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vldm_a2_to_string(const ARMInstruction *ins) {
    // DEBUG: VLDM{mode}<c> <Rn>{!}, <list>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VLDM%s%s",
            mode_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s%s, %s",
            regular_reg_str(ins->n).c_str(),
            ins->wback ? "!" : "",
            list_str(ins).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vldr_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: VLDR <Dd>, [<Rn>{, #+/-<imm>}]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VLDR"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [%s, #%s%s]",
            double_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            ins->add ? "" : "-",
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vldr_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: VLDR<c> <Dd>, [<Rn>{, #+/-<imm>}]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VLDR%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [%s, #%s%s]",
            double_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            ins->add ? "" : "-",
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vldr_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: VLDR <Sd>, [<Rn>{, #+/-<imm>}]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VLDR"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [%s, #%s%s]",
            simple_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            ins->add ? "" : "-",
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vldr_a2_to_string(const ARMInstruction *ins) {
    // DEBUG: VLDR<c> <Sd>, [<Rn>{, #+/-<imm>}]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VLDR%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [%s, #%s%s]",
            simple_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            ins->add ? "" : "-",
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vmov_arm_core_register_to_scalar_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: VMOV.<size> <Dd[x]>, <Rt>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VMOV.%s",
            size_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s",
            (double_reg_str(ins->d) + "[" + to_string(ins->index) + "]").c_str(),
            regular_reg_str(ins->t).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vmov_arm_core_register_to_scalar_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: VMOV<c>.<size> <Dd[x]>, <Rt>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VMOV%s%s%s",
            c_str(ins).c_str(),
            ".",
            size_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s",
            (double_reg_str(ins->d) + "[" + to_string(ins->index) + "]").c_str(),
            regular_reg_str(ins->t).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vmov_scalar_to_arm_core_register_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: VMOV.<dt> <Rt>, <Dn[x]>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VMOV.%s",
            dt_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s",
            regular_reg_str(ins->t).c_str(),
            (double_reg_str(ins->n) + "[" + to_string(ins->index) + "]").c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vmov_scalar_to_arm_core_register_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: VMOV<c>.<dt> <Rt>, <Dn[x]>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VMOV%s%s%s",
            c_str(ins).c_str(),
            ".",
            dt_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s",
            regular_reg_str(ins->t).c_str(),
            (double_reg_str(ins->n) + "[" + to_string(ins->index) + "]").c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vmovl_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: VMOVL.<dt> <Qd>, <Dm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VMOVL.%s",
            dt_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s",
            quad_reg_str(ins->d >> 1).c_str(),
            double_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vmovl_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: VMOVL.<dt> <Qd>, <Dm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VMOVL.%s",
            dt_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s",
            quad_reg_str(ins->d >> 1).c_str(),
            double_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vmovn_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: VMOVN.<dt> <Dd>, <Qm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VMOVN.%s",
            dt_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s",
            double_reg_str(ins->d).c_str(),
            quad_reg_str(ins->m >> 1).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vmovn_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: VMOVN.<dt> <Dd>, <Qm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VMOVN.%s",
            dt_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s",
            double_reg_str(ins->d).c_str(),
            quad_reg_str(ins->m >> 1).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vmrs_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: VMRS <Rt>, <spec_reg>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VMRS"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s",
            regular_reg_str(ins->t).c_str(),
            spec_reg_str(ins).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vmrs_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: VMRS<c> <Rt>, <spec_reg>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VMRS%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s",
            regular_reg_str(ins->t).c_str(),
            spec_reg_str(ins).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vmsr_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: VMSR <spec_reg>, <Rt>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VMSR"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s",
            spec_reg_str(ins).c_str(),
            regular_reg_str(ins->t).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vmsr_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: VMSR<c> <spec_reg>, <Rt>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VMSR%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s",
            spec_reg_str(ins).c_str(),
            regular_reg_str(ins->t).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vmul_vmull_integer_and_polynomial_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: VMULL.<dt> <Qd>, <Dn>, <Dm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VMULL.%s",
            dt_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            quad_reg_str(ins->d >> 1).c_str(),
            double_reg_str(ins->n).c_str(),
            double_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vmul_vmull_integer_and_polynomial_a2_to_string(const ARMInstruction *ins) {
    // DEBUG: VMULL.<dt> <Qd>, <Dn>, <Dm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VMULL.%s",
            dt_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            quad_reg_str(ins->d >> 1).c_str(),
            double_reg_str(ins->n).c_str(),
            double_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vmul_vmull_by_scalar_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: VMULL.<dt> <Qd>, <Dn>, <Dm[x]>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VMULL.%s",
            dt_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            quad_reg_str(ins->d >> 1).c_str(),
            double_reg_str(ins->n).c_str(),
            (double_reg_str(ins->m) + "[" + to_string(ins->index) + "]").c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vmul_vmull_by_scalar_a2_to_string(const ARMInstruction *ins) {
    // DEBUG: VMULL.<dt> <Qd>, <Dn>, <Dm[x]>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VMULL.%s",
            dt_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            quad_reg_str(ins->d >> 1).c_str(),
            double_reg_str(ins->n).c_str(),
            (double_reg_str(ins->m) + "[" + to_string(ins->index) + "]").c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vpadd_integer_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: VPADD.<dt> <Dd>, <Dn>, <Dm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VPADD.%s",
            dt_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            double_reg_str(ins->d).c_str(),
            double_reg_str(ins->n).c_str(),
            double_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vpadd_integer_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: VPADD.<dt> <Dd>, <Dn>, <Dm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VPADD.%s",
            dt_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            double_reg_str(ins->d).c_str(),
            double_reg_str(ins->n).c_str(),
            double_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vpadd_floating_point_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: VPADD.F32 <Dd>, <Dn>, <Dm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VPADD.F32"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            double_reg_str(ins->d).c_str(),
            double_reg_str(ins->n).c_str(),
            double_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vpadd_floating_point_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: VPADD.F32 <Dd>, <Dn>, <Dm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VPADD.F32"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            double_reg_str(ins->d).c_str(),
            double_reg_str(ins->n).c_str(),
            double_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vpmax_vpmin_integer_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: VP<op>.<dt> <Dd>, <Dn>, <Dm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VP%s%s%s",
            op_str(ins).c_str(),
            ".",
            dt_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            double_reg_str(ins->d).c_str(),
            double_reg_str(ins->n).c_str(),
            double_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vpmax_vpmin_integer_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: VP<op>.<dt> <Dd>, <Dn>, <Dm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VP%s%s%s",
            op_str(ins).c_str(),
            ".",
            dt_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            double_reg_str(ins->d).c_str(),
            double_reg_str(ins->n).c_str(),
            double_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vpmax_vpmin_floating_point_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: VP<op>.F32 <Dd>, <Dn>, <Dm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VP%s%s",
            op_str(ins).c_str(),
            ".F32"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            double_reg_str(ins->d).c_str(),
            double_reg_str(ins->n).c_str(),
            double_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vpmax_vpmin_floating_point_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: VP<op>.F32 <Dd>, <Dn>, <Dm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VP%s%s",
            op_str(ins).c_str(),
            ".F32"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            double_reg_str(ins->d).c_str(),
            double_reg_str(ins->n).c_str(),
            double_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vpop_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: VPOP <list>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VPOP"
    );

    snprintf(op_args, sizeof(op_args),
            " %s",
            list_str(ins).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vpop_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: VPOP<c> <list>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VPOP%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s",
            list_str(ins).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vpop_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: VPOP <list>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VPOP"
    );

    snprintf(op_args, sizeof(op_args),
            " %s",
            list_str(ins).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vpop_a2_to_string(const ARMInstruction *ins) {
    // DEBUG: VPOP<c> <list>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VPOP%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s",
            list_str(ins).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vpush_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: VPUSH <list>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VPUSH"
    );

    snprintf(op_args, sizeof(op_args),
            " %s",
            list_str(ins).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vpush_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: VPUSH<c> <list>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VPUSH%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s",
            list_str(ins).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vpush_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: VPUSH <list>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VPUSH"
    );

    snprintf(op_args, sizeof(op_args),
            " %s",
            list_str(ins).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vpush_a2_to_string(const ARMInstruction *ins) {
    // DEBUG: VPUSH<c> <list>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VPUSH%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s",
            list_str(ins).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vqdmlal_vqdmlsl_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: VQD<op>.<dt> <Qd>, <Dn>, <Dm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VQD%s%s%s",
            op_str(ins).c_str(),
            ".",
            dt_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            quad_reg_str(ins->d >> 1).c_str(),
            double_reg_str(ins->n).c_str(),
            double_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vqdmlal_vqdmlsl_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: VQD<op>.<dt> <Qd>, <Dn>, <Dm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VQD%s%s%s",
            op_str(ins).c_str(),
            ".",
            dt_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            quad_reg_str(ins->d >> 1).c_str(),
            double_reg_str(ins->n).c_str(),
            double_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vqdmlal_vqdmlsl_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: VQD<op>.<dt> <Qd>, <Dn>, <Dm[x]>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VQD%s%s%s",
            op_str(ins).c_str(),
            ".",
            dt_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            quad_reg_str(ins->d >> 1).c_str(),
            double_reg_str(ins->n).c_str(),
            (double_reg_str(ins->m) + "[" + to_string(ins->index) + "]").c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vqdmlal_vqdmlsl_a2_to_string(const ARMInstruction *ins) {
    // DEBUG: VQD<op>.<dt> <Qd>, <Dn>, <Dm[x]>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VQD%s%s%s",
            op_str(ins).c_str(),
            ".",
            dt_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            quad_reg_str(ins->d >> 1).c_str(),
            double_reg_str(ins->n).c_str(),
            (double_reg_str(ins->m) + "[" + to_string(ins->index) + "]").c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vqdmull_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: VQDMULL.<dt> <Qd>, <Dn>, <Dm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VQDMULL.%s",
            dt_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            quad_reg_str(ins->d >> 1).c_str(),
            double_reg_str(ins->n).c_str(),
            double_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vqdmull_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: VQDMULL.<dt> <Qd>, <Dn>, <Dm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VQDMULL.%s",
            dt_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            quad_reg_str(ins->d >> 1).c_str(),
            double_reg_str(ins->n).c_str(),
            double_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vqdmull_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: VQDMULL.<dt> <Qd>, <Dn>, <Dm[x]>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VQDMULL.%s",
            dt_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            quad_reg_str(ins->d >> 1).c_str(),
            double_reg_str(ins->n).c_str(),
            (double_reg_str(ins->m) + "[" + to_string(ins->index) + "]").c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vqdmull_a2_to_string(const ARMInstruction *ins) {
    // DEBUG: VQDMULL.<dt> <Qd>, <Dn>, <Dm[x]>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VQDMULL.%s",
            dt_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            quad_reg_str(ins->d >> 1).c_str(),
            double_reg_str(ins->n).c_str(),
            (double_reg_str(ins->m) + "[" + to_string(ins->index) + "]").c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vqmovn_vqmovun_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: VQMOV{U}N.<type><size> <Dd>, <Qm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VQMOV%s%s%s%s",
            U_str(ins).c_str(),
            "N.",
            type_str(ins).c_str(),
            size_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s",
            double_reg_str(ins->d).c_str(),
            quad_reg_str(ins->m >> 1).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vqmovn_vqmovun_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: VQMOV{U}N.<type><size> <Dd>, <Qm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VQMOV%s%s%s%s",
            U_str(ins).c_str(),
            "N.",
            type_str(ins).c_str(),
            size_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s",
            double_reg_str(ins->d).c_str(),
            quad_reg_str(ins->m >> 1).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vqrshrn_vqrshrun_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: VQRSHR{U}N.<type><size> <Dd>, <Qm>, #<shift_amount>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VQRSHR%s%s%s%s",
            U_str(ins).c_str(),
            "N.",
            type_str(ins).c_str(),
            size_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, #%s",
            double_reg_str(ins->d).c_str(),
            quad_reg_str(ins->m >> 1).c_str(),
            integer_to_string(ins->shift_amount, true).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vqrshrn_vqrshrun_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: VQRSHR{U}N.<type><size> <Dd>, <Qm>, #<shift_amount>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VQRSHR%s%s%s%s",
            U_str(ins).c_str(),
            "N.",
            type_str(ins).c_str(),
            size_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, #%s",
            double_reg_str(ins->d).c_str(),
            quad_reg_str(ins->m >> 1).c_str(),
            integer_to_string(ins->shift_amount, true).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vqshrn_vqshrun_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: VQSHR{U}N.<type><size> <Dd>, <Qm>, #<shift_amount>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VQSHR%s%s%s%s",
            U_str(ins).c_str(),
            "N.",
            type_str(ins).c_str(),
            size_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, #%s",
            double_reg_str(ins->d).c_str(),
            quad_reg_str(ins->m >> 1).c_str(),
            integer_to_string(ins->shift_amount, true).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vqshrn_vqshrun_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: VQSHR{U}N.<type><size> <Dd>, <Qm>, #<shift_amount>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VQSHR%s%s%s%s",
            U_str(ins).c_str(),
            "N.",
            type_str(ins).c_str(),
            size_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, #%s",
            double_reg_str(ins->d).c_str(),
            quad_reg_str(ins->m >> 1).c_str(),
            integer_to_string(ins->shift_amount, true).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vraddhn_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: VRADDHN.<dt> <Dd>, <Qn>, <Qm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VRADDHN.%s",
            dt_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            double_reg_str(ins->d).c_str(),
            quad_reg_str(ins->n >> 1).c_str(),
            quad_reg_str(ins->m >> 1).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vraddhn_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: VRADDHN.<dt> <Dd>, <Qn>, <Qm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VRADDHN.%s",
            dt_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            double_reg_str(ins->d).c_str(),
            quad_reg_str(ins->n >> 1).c_str(),
            quad_reg_str(ins->m >> 1).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vrshrn_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: VRSHRN.I<size> <Dd>, <Qm>, #<shift_amount>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VRSHRN.I%s",
            size_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, #%s",
            double_reg_str(ins->d).c_str(),
            quad_reg_str(ins->m >> 1).c_str(),
            integer_to_string(ins->shift_amount, true).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vrshrn_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: VRSHRN.I<size> <Dd>, <Qm>, #<shift_amount>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VRSHRN.I%s",
            size_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, #%s",
            double_reg_str(ins->d).c_str(),
            quad_reg_str(ins->m >> 1).c_str(),
            integer_to_string(ins->shift_amount, true).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vrsubhn_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: VRSUBHN.<dt> <Dd>, <Qn>, <Qm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VRSUBHN.%s",
            dt_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            double_reg_str(ins->d).c_str(),
            quad_reg_str(ins->n >> 1).c_str(),
            quad_reg_str(ins->m >> 1).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vrsubhn_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: VRSUBHN.<dt> <Dd>, <Qn>, <Qm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VRSUBHN.%s",
            dt_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            double_reg_str(ins->d).c_str(),
            quad_reg_str(ins->n >> 1).c_str(),
            quad_reg_str(ins->m >> 1).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vshll_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: VSHLL.<type><size> <Qd>, <Dm>, #<shift_amount>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VSHLL.%s%s",
            type_str(ins).c_str(),
            size_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, #%s",
            quad_reg_str(ins->d >> 1).c_str(),
            double_reg_str(ins->m).c_str(),
            integer_to_string(ins->shift_amount, true).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vshll_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: VSHLL.<type><size> <Qd>, <Dm>, #<shift_amount>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VSHLL.%s%s",
            type_str(ins).c_str(),
            size_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, #%s",
            quad_reg_str(ins->d >> 1).c_str(),
            double_reg_str(ins->m).c_str(),
            integer_to_string(ins->shift_amount, true).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vshll_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: VSHLL.<type><size> <Qd>, <Dm>, #<shift_amount>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VSHLL.%s%s",
            type_str(ins).c_str(),
            size_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, #%s",
            quad_reg_str(ins->d >> 1).c_str(),
            double_reg_str(ins->m).c_str(),
            integer_to_string(ins->shift_amount, true).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vshll_a2_to_string(const ARMInstruction *ins) {
    // DEBUG: VSHLL.<type><size> <Qd>, <Dm>, #<shift_amount>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VSHLL.%s%s",
            type_str(ins).c_str(),
            size_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, #%s",
            quad_reg_str(ins->d >> 1).c_str(),
            double_reg_str(ins->m).c_str(),
            integer_to_string(ins->shift_amount, true).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vshrn_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: VSHRN.I<size> <Dd>, <Qm>, #<shift_amount>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VSHRN.I%s",
            size_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, #%s",
            double_reg_str(ins->d).c_str(),
            quad_reg_str(ins->m >> 1).c_str(),
            integer_to_string(ins->shift_amount, true).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vshrn_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: VSHRN.I<size> <Dd>, <Qm>, #<shift_amount>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VSHRN.I%s",
            size_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, #%s",
            double_reg_str(ins->d).c_str(),
            quad_reg_str(ins->m >> 1).c_str(),
            integer_to_string(ins->shift_amount, true).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vstm_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: VSTM{mode} <Rn>{!}, <list>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VSTM%s",
            mode_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s%s, %s",
            regular_reg_str(ins->n).c_str(),
            ins->wback ? "!" : "",
            list_str(ins).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vstm_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: VSTM{mode}<c> <Rn>{!}, <list>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VSTM%s%s",
            mode_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s%s, %s",
            regular_reg_str(ins->n).c_str(),
            ins->wback ? "!" : "",
            list_str(ins).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vstm_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: VSTM{mode} <Rn>{!}, <list>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VSTM%s",
            mode_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s%s, %s",
            regular_reg_str(ins->n).c_str(),
            ins->wback ? "!" : "",
            list_str(ins).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vstm_a2_to_string(const ARMInstruction *ins) {
    // DEBUG: VSTM{mode}<c> <Rn>{!}, <list>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VSTM%s%s",
            mode_str(ins).c_str(),
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s%s, %s",
            regular_reg_str(ins->n).c_str(),
            ins->wback ? "!" : "",
            list_str(ins).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vstr_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: VSTR <Dd>, [<Rn>{, #+/-<imm32>}]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VSTR"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [%s, #%s%s]",
            double_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            ins->add ? "" : "-",
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vstr_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: VSTR<c> <Dd>, [<Rn>{, #+/-<imm32>}]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VSTR%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [%s, #%s%s]",
            double_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            ins->add ? "" : "-",
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vstr_t2_to_string(const ARMInstruction *ins) {
    // DEBUG: VSTR <Sd>, [<Rn>{, #+/-<imm32>}]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VSTR"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [%s, #%s%s]",
            simple_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            ins->add ? "" : "-",
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vstr_a2_to_string(const ARMInstruction *ins) {
    // DEBUG: VSTR<c> <Sd>, [<Rn>{, #+/-<imm32>}]
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VSTR%s",
            c_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, [%s, #%s%s]",
            simple_reg_str(ins->d).c_str(),
            regular_reg_str(ins->n).c_str(),
            ins->add ? "" : "-",
            integer_to_string(ins->imm32).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vsubhn_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: VSUBHN.<dt> <Dd>, <Qn>, <Qm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VSUBHN.%s",
            dt_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            double_reg_str(ins->d).c_str(),
            quad_reg_str(ins->n >> 1).c_str(),
            quad_reg_str(ins->m >> 1).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vsubhn_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: VSUBHN.<dt> <Dd>, <Qn>, <Qm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "VSUBHN.%s",
            dt_str(ins).c_str()
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            double_reg_str(ins->d).c_str(),
            quad_reg_str(ins->n >> 1).c_str(),
            quad_reg_str(ins->m >> 1).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vtbl_vtbx_t1_to_string(const ARMInstruction *ins) {
    // DEBUG: V<op>.8 <Dd>, <list>, <Dm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "V%s%s",
            op_str(ins).c_str(),
            ".8"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            double_reg_str(ins->d).c_str(),
            list_str(ins).c_str(),
            double_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

string decode_vtbl_vtbx_a1_to_string(const ARMInstruction *ins) {
    // DEBUG: V<op>.8 <Dd>, <list>, <Dm>
    char op_name[256], op_args[256];
    snprintf(op_name, sizeof(op_name),
            "V%s%s",
            op_str(ins).c_str(),
            ".8"
    );

    snprintf(op_args, sizeof(op_args),
            " %s, %s, %s",
            double_reg_str(ins->d).c_str(),
            list_str(ins).c_str(),
            double_reg_str(ins->m).c_str()
    );

    return string(op_name) + string(op_args);
}

